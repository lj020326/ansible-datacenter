---
# Check if cloudinit exists.
# For cloudinit GOSC, if not exist, will install it, if not installed, then the test "failed"
# For perl GOSC, if not exist, never mind, if exists, then disable it
#
- name: "Initialize the fact of cloud-init version"
  ansible.builtin.set_fact:
    cloudinit_version: ""
    cloudinit_is_installed: false

- ansible.builtin.include_tasks: get_installed_package_info.yml
  vars:
    package_name: "cloud-init"

- name: "Set fact that cloud-init is installed"
  ansible.builtin.set_fact:
    cloudinit_is_installed: true
  when: package_info | length > 0

# Install cloud-init for GOSC
- block:
    # Install cloud-init if it doesn't exist
    - block:
        - ansible.builtin.include_tasks: install_uninstall_package.yml
          vars:
            package_name: "cloud-init"
            package_state: "present"

        - ansible.builtin.include_tasks: get_installed_package_info.yml
          vars:
            package_name: "cloud-init"
      when: not cloudinit_is_installed
  when:
    - gosc_workflow is defined
    - gosc_workflow == "cloud-init"

- name: "Set fact of cloud-init version"
  ansible.builtin.set_fact:
    cloudinit_version: "{{ package_info.Version }}"
  when:
    - package_info | length > 0
    - package_info.Version is defined
    - package_info.Version

- name: "Print the cloud-init version"
  ansible.builtin.debug: var=cloudinit_version

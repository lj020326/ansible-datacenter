---
# Enable VMware tools vss log in tools.conf
- name: Set fact of VMware tools config file path
  ansible.builtin.set_fact:
    vmtools_conf_path: "C:\\ProgramData\\VMware\\VMware Tools\\tools.conf"
    vmtools_conf_template: "C:\\ProgramData\\VMware\\VMware Tools\\tools.conf.example"

# Check if VMware tools config file exists
- ansible.builtin.include_tasks: win_check_file_exist.yml
  vars:
    win_check_file_exist_file: "{{ vmtools_conf_path }}"

# Copy VMware tools config file from template file
- ansible.builtin.include_tasks: win_execute_cmd.yml
  vars:
    win_powershell_cmd: "Copy-Item '{{ vmtools_conf_template }}' -Destination '{{ vmtools_conf_path }}'"
  when: win_check_file_exist_result is defined and not win_check_file_exist_result

- name: Enable vss log in VMware tools config file
  community.windows.win_lineinfile:
    path: "{{ vmtools_conf_path }}"
    regexp: "{{ item.key }}"
    line: "{{ item.value }}"
  loop:
    - {key: '^#vmvss.level.*', value: 'vmvss.level = debug'}
    - {key: '^#vmvss.handler.*', value: 'vmvss.handler = vmx'}
    - {key: '^#vmbackup.level.*', value: 'vmbackup.level = debug'}
    - {key: '^#vmbackup.handler.*', value: 'vmbackup.handler = file'}
    - {key: '^#vmbackup.data.*', value: 'vmbackup.data = C://vmbackup.log'}
  delegate_to: "{{ vm_guest_ip }}"

# Restart VMware tools service
- ansible.builtin.include_tasks: win_execute_cmd.yml
  vars:
    win_powershell_cmd: "Restart-Service -Force -Name VMTools"

# Make sure VMware tools service is running before taking quiesce snapshot
- ansible.builtin.include_tasks: win_wait_service_status.yml
  vars:
    win_service_name: 'VMTools'

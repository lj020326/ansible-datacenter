---

- name: "Install rsync if not present"
  ansible.builtin.package:
    name: rsync
    state: present
  register: rsync_out
  delegate_to: "{{ item }}"
  loop:
     - "{{ remote_host }}"
     - "{{ source_host }}"

- name: "Set __rsync_dict"
  ansible.builtin.set_fact:
     __rsync_dict: "{{ __rsync_dict | default([]) | union([{'status': item.changed, 'ip': item.item }]) }}"
  with_items: "{{ rsync_out.results }}"

- name: "Backup the rsyncd.conf"
#  ansible.builtin.command: "cp /etc/rsyncd.conf /etc/rsyncd.conf.bkup"
  ansible.builtin.copy:
    remote_src: yes
    src: "/etc/rsyncd.conf"
    dest: "/etc/rsyncd.conf.bkup"
  when: item.status == false
  delegate_to: "{{ item.ip }}"
  loop: "{{ __rsync_dict }}"

- name: "Start and enable the service"
  ansible.builtin.service:
     name: rsyncd
     state: started
     enabled: yes
  delegate_to: "{{ item }}"
  loop:
     - "{{ remote_host }}"
     - "{{ source_host }}"

- name: "Configure the /etc/rsync.conf file"
  ansible.builtin.template:
    src: rsyncd.conf.j2
    dest: /etc/rsyncd.conf
  delegate_to: "{{ remote_host }}"

- name: "Restart rsyncd"
  ansible.builtin.service:
     name: rsyncd
     state: restarted
  become: yes
  delegate_to: "{{ remote_host }}"

- name: "Run rsync commnad"
  ansible.builtin.command: "rsync -avz --delete-before {{ local_filesystem_path }} {{ remote_host }}::files"
  become: yes
  delegate_to: "{{ source_host }}"

- name: "Restore the backup of the rsyncd.conf"
#  ansible.builtin.command: "mv /etc/rsyncd.conf.bkup /etc/rsyncd.conf"
  ansible.builtin.copy:
    remote_src: yes
    src: "/etc/rsyncd.conf.bkup"
    dest: "/etc/rsyncd.conf"
  when: item.status == false
  delegate_to: "{{ item.ip }}"
  loop: "{{ __rsync_dict }}"

- name: "Uninstall rsync"
  ansible.builtin.package:
    name: rsync
    state: absent
  when: item.status == true
  delegate_to: "{{ item.ip }}"
  loop: "{{ __rsync_dict }}"

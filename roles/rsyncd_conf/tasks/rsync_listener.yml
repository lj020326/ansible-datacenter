---

- name: Assert remote_filesystem_path is defined
  ansible.builtin.assert:
    that:
      - remote_filesystem_path is defined
      - remote_filesystem_path|length > 0

- name: Gather current services state
  ansible.builtin.service_facts:

- name: Debug fact_results
  ansible.builtin.debug:
    msg: "{{ hostvars[remote_host].ansible_facts.services }}"
    verbosity: 2

- name: Set rsyncd service state
  ansible.builtin.set_fact:
    __rsyncd_state: "{{ 'restarted' if hostvars[remote_host].ansible_facts.services[rsyncd_service].state == 'running' else 'stopped' }}"

- name: Gather current SELinux State
  ansible.builtin.command: /usr/sbin/getenforce
  changed_when: false
  register: __selinux_state

- name: Configure SELinux
  block:
    - name: Create local policy
      ansible.builtin.copy:
        dest: /tmp/local_rsync.cil
        content: "(allow rsync_t self (capability (dac_override)))"
        owner: root
        group: root
        mode: '0644'

    - name: Import local policy
      ansible.builtin.command: /usr/sbin/semodule -i /tmp/local_rsync.cil
      changed_when: true

    - name: Gather current rsync_full_access boolean state
      ansible.builtin.command: /usr/sbin/getsebool rsync_full_access
      register: __rsync_boolean_state
      changed_when: false

    - name: Enable rsync_full_access boolean
      ansible.builtin.command: /usr/sbin/setsebool rsync_full_access on
      changed_when: __rsync_boolean_state.stdout.split(' ')[-1] != 'on'

    - name: Set cleanup flag and boolen state
      ansible.builtin.set_fact:
        __cleanup_selinux: true
        __rsync_boolean_previous: "{{ __rsync_boolean_state.stdout.split(' ')[-1] }}"
  when: __selinux_state.stdout == 'Enforcing'

- name: Configure rsyncd
  ansible.builtin.copy:
    dest: "{{ rsyncd_config }}"
    content: |
      pid file = /var/run/rsyncd.pid
      lock file = /var/run/rsync.lock
      log file = /var/log/rsync.log
      use chroot = false

      [files]
      path = {{ remote_filesystem_path }}
      comment = RSYNC FILES
      read only = false
      timeout = 300
      uid = root
      gid = root
    owner: root
    group: root
    mode: '0644'
    backup: true
  register: rsyncd_conf

- name: Create remote_filesystem_path
  ansible.builtin.file:
    path: "{{ remote_filesystem_path }}"
    state: directory
    mode: 0755

- name: Set rsyncd backup path
  ansible.builtin.set_fact:
    __rsyncd_conf_backup_path: "{{ rsyncd_conf.backup_file }}"
  when:
    - rsyncd_conf.backup_file is defined

- name: (Re)start rsyncd
  ansible.builtin.service:
    name: "{{ rsyncd_service }}"
    state: restarted

---
- name: Include OS-specific variables (RedHat).
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution != "Fedora"

- name: Include OS-specific variables (Fedora).
  ansible.builtin.include_vars: "{{ ansible_distribution }}.yml"
  when: ansible_distribution == "Fedora"

- name: Include OS-specific variables (Debian).
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"
  when: ansible_os_family == "Debian"

- name: Define git_install_from_source_dependencies.
  ansible.builtin.set_fact:
    git_install_from_source_dependencies: "{{ __git_install_from_source_dependencies | list }}"
  when: git_install_from_source_dependencies is not defined

- name: Ensure git's dependencies are installed.
  ansible.builtin.package:
    name: "{{ git_install_from_source_dependencies }}"
    state: present

- name: Get installed version.
  command: git --version warn=no
  changed_when: false
  failed_when: false
  check_mode: false
  register: git_installed_version

- name: "Display packer_installed_version"
  debug:
    var: packer_installed_version

- name: "Display packer_installed_version.stdout | regex_replace('^.*?([0-9\.]+)$', '\\1')"
  debug:
    var: packer_installed_version.stdout | regex_replace("^.*?([0-9\.]+)$", "\\1")

- name: Force git install if the version numbers do not match.
  ansible.builtin.set_fact:
    git_reinstall_from_source: true
  when:
    - (git_install_from_source_force_update | bool) or
      (git_installed_version.rc != 0) or
      (git_installed_version.stdout | regex_replace("^.*?([0-9\.]+)$", "\\1") is version(git_version, operator="!="))

- name: "Display git_reinstall_from_source"
  debug:
    var: git_reinstall_from_source

- name: Download git.
  when: git_reinstall_from_source | bool
  get_url:
    url: "https://www.kernel.org/pub/software/scm/git/git-{{ git_version }}.tar.gz"
    dest: "{{ workspace }}/git-{{ git_version }}.tar.gz"

- name: Expand git archive.
  when: git_reinstall_from_source | bool
  unarchive:
    src: "{{ workspace }}/git-{{ git_version }}.tar.gz"
    dest: "{{ workspace }}"
    creates: "{{ workspace }}/git-{{ git_version }}/README"
    copy: false
    mode: "0755"

- name: Build git.
  when: git_reinstall_from_source | bool
  command: >
    make prefix={{ git_install_path }} {{ item }}
    chdir={{ workspace }}/git-{{ git_version }}
  with_items:
    - all
    - install
  become: true

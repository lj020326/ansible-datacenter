---
- name: Validate CAcert [{{ bootstrap_certs__ca_cert_type }}][{{ __bootstrap_certs__cert_node }}] | Set __log_prefix_local
  ansible.builtin.set_fact:
    __log_prefix_local: Validate CAcert [{{ bootstrap_certs__ca_cert_type }}][{{ __bootstrap_certs__ca_cert_cn
      | d(__bootstrap_certs__cert_node) | d(__bootstrap_certs__ca_cert) }}] |

- name: "{{ __log_prefix_local }} Initialize __cert_validation_results"
  ansible.builtin.set_fact:
    __cert_validation_results:
      failed: false
      exceptions: []
      
- name: "{{ __log_prefix_local }} Check for CA key existence"
  block:
    - name: "{{ __log_prefix_local }} Check if {{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_key }} certificate exists"
      ansible.builtin.stat:
        path: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_key }}"
      register: __key_file

    - name: "{{ __log_prefix_local }} Display __key_file"
      ansible.builtin.debug:
        var: __key_file
        verbosity: 1

    - name: "{{ __log_prefix_local }} Set __cert_validation_results.failed to true"
      when: not __key_file.stat.exists
      ansible.builtin.set_fact:
        __cert_validation_results.failed: true
        __cert_validation_results.exceptions: "{{ __cert_validation_results.exceptions
          + ['key file ' + __bootstrap_certs__keystore_cert_dir + '/' + __bootstrap_certs__ca_key
          + ' does not exist'] }}"

- name: "{{ __log_prefix_local }} Check for CA cert existence"
  block:
    - name: "{{ __log_prefix_local }} Check if {{ __bootstrap_certs__ca_cert }} certificate exists"
      ansible.builtin.stat:
        path: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_cert }}"
      register: __cert_file

    - name: "{{ __log_prefix_local }} Display __cert_file"
      ansible.builtin.debug:
        var: __cert_file
        verbosity: 1

    - name: "{{ __log_prefix_local }} Set __cert_validation_results.failed to true"
      when: not __cert_file.stat.exists
      ansible.builtin.set_fact:
        __cert_validation_results.failed: true
        __cert_validation_results.exceptions: "{{ __cert_validation_results.exceptions
          + ['cert file ' + __bootstrap_certs__keystore_cert_dir + '/' + __bootstrap_certs__ca_cert
          + ' does not exist'] }}"

- name: "{{ __log_prefix_local }} Check certificate expiration date"
  when: __cert_file.stat.exists|d(False)
  block:
    - name: "{{ __log_prefix_local }} Check certificate expiration date"
      changed_when: false
      ignore_errors: true
      ansible.builtin.command: |
        openssl x509 -checkend {{ __bootstrap_certs__ca_cert_expiration_panic_threshold }} \
            -noout -in {{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_cert }}
      register: __cert_validity_exp_date_check_result

    - name: "{{ __log_prefix_local }} Display __cert_validity_exp_date_check_result.failed"
      ansible.builtin.debug:
        var: __cert_validity_exp_date_check_result.failed

    - name: "{{ __log_prefix_local }} Set __cert_validation_results.failed to true"
      when: __cert_validity_exp_date_check_result.failed | d(True)
      ansible.builtin.set_fact:
        __cert_validation_results.failed: true
        __cert_validation_results.exceptions: "{{ __cert_validation_results.exceptions + ['certificate expired'] }}"

- name: "{{ __log_prefix_local }} Check if CA cert info and expiration is valid"
  when:
    - bootstrap_certs__ca_cert_type != "root-ca"
    - __cert_file.stat.exists|d(False)
  block:
    ## ref: https://docs.ansible.com/ansible/latest/modules/openssl_certificate_info_module.html#openssl-certificate-info-module
    - name: "{{ __log_prefix_local }} Get ca certificate info"
      community.crypto.x509_certificate_info:
        path: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_cert }}"
      register: cacert_result

    - name: "{{ __log_prefix_local }} Display cacert_result"
      when: bootstrap_certs__display_cacert_result
      ansible.builtin.debug:
        var: cacert_result

    # issuer and issuer_strict
    - name: "{{ __log_prefix_local }} Assert cert info for {{ __bootstrap_certs__cert_node }} is valid"
      ignore_errors: true
      register: __assert_cert_info_valid
      ansible.builtin.assert:
        that:
          - cacert_result.issuer.organizationName == __bootstrap_certs__ca_signer_cert_info.organization
          - cacert_result.issuer.commonName == __bootstrap_certs__ca_signer_cert_info.commonName
          - cacert_result.subject.organizationName == __bootstrap_certs__ca_cert_info.organization
          - cacert_result.subject.commonName == __bootstrap_certs__ca_cert_info.commonName

    - name: "{{ __log_prefix_local }} Display __assert_cert_info_valid"
      ansible.builtin.debug:
        var: __assert_cert_info_valid

    - name: "{{ __log_prefix_local }} Set __cert_validation_results.failed to true"
      when: __assert_cert_info_valid.failed|d(False)|bool
      ansible.builtin.set_fact:
        __cert_validation_results.failed: true
        __cert_validation_results.exceptions: "{{ __cert_validation_results.exceptions + ['invalid certificate information'] }}"

    # certificate expired?
    - name: "{{ __log_prefix_local }} Assert cert expiration for {{ __bootstrap_certs__cert_node }}"
      ignore_errors: true
      register: __assert_cert_expiration
      ansible.builtin.assert:
        that: not cacert_result.expired

    - name: "{{ __log_prefix_local }} Display __assert_cert_expiration"
      ansible.builtin.debug:
        var: __assert_cert_expiration

    - name: "{{ __log_prefix_local }} Set __cert_validation_results.failed to true"
      when: __assert_cert_expiration.failed|d(False)|bool
      ansible.builtin.set_fact:
        __cert_validation_results.failed: true
        __cert_validation_results.exceptions: "{{ __cert_validation_results.exceptions + ['certificate expired'] }}"

- name: "{{ __log_prefix_local }} Check if CA cert signature is valid"
  when:
    - bootstrap_certs__ca_cert_type != "root-ca"
    - __cert_file.stat.exists|d(False)
  block:
    - name: "{{ __log_prefix_local }} Validate signed by ca signer certs"
      changed_when: false
      ignore_errors: true
      #      when: __cert_file.stat.exists|d(False)
      #      ansible.builtin.command: >-
      #        openssl verify -CAfile \
      #          {{ __bootstrap_certs__ca_signer_cacerts_dir }}/{{ __bootstrap_certs__ca_signer_cert }} \
      #          {{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_cert }}
      ansible.builtin.command: >
        openssl verify -CAfile
          {{ __bootstrap_certs__ca_signer_cacerts_dir }}/{{ __bootstrap_certs__ca_signer_cert_chain }}
          {{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_cert }}
      register: __cert_validity_signer

    - name: "{{ __log_prefix_local }} Display __cert_validity_signer"
      ansible.builtin.debug:
        var: __cert_validity_signer

    - name: "{{ __log_prefix_local }} Set __cert_validation_results.failed to true"
      when: __cert_validity_signer.failed|d(False)|bool
      ansible.builtin.set_fact:
        __cert_validation_results.failed: true
        __cert_validation_results.exceptions: "{{ __cert_validation_results.exceptions + ['invalid certificate signature'] }}"

- name: "{{ __log_prefix_local }} Display __cert_validation_results"
  ansible.builtin.debug:
    var: __cert_validation_results

- name: "{{ __log_prefix_local }} Display bootstrap_certs__ca_force_create"
  ansible.builtin.debug:
    var: bootstrap_certs__ca_force_create

---
- name: Caroot | Set caroot facts
  ansible.builtin.set_fact:
    __bootstrap_certs__keystore_cert_dir: "{{ bootstrap_certs__cacerts_base_dir }}/{{ bootstrap_certs__ca_root.domainName }}"
    __bootstrap_certs__ca_cert: "{{ bootstrap_certs__ca_root.domainName }}.pem"
    __bootstrap_certs__ca_csr: "{{ bootstrap_certs__ca_root.domainName }}.csr"
    __bootstrap_certs__ca_key: "{{ bootstrap_certs__ca_root.domainName }}-key.pem"

- name: Caroot | Display ca info
  ansible.builtin.debug:
    msg:
      - bootstrap_certs__ca_root={{ bootstrap_certs__ca_root | to_nice_json }}
      - bootstrap_certs__ca_root_names={{ bootstrap_certs__ca_root_names | to_nice_json }}
      - __bootstrap_certs__keystore_cert_dir={{ __bootstrap_certs__keystore_cert_dir }}
      - __bootstrap_certs__ca_cert={{ __bootstrap_certs__ca_cert }}
      - __bootstrap_certs__ca_key={{ __bootstrap_certs__ca_key }}

- name: Create_caroot | Perform cacert validations
  ansible.builtin.include_tasks: validate_cacerts.yml

- name: Create_caroot | Create intermediate certificate authority key pair and CSR
  when: __cert_validation_results.failed|bool or bootstrap_certs__ca_force_create|bool
  block:
    - name: Caroot | Create domain configuration directories
      ansible.builtin.file:
        path: "{{ __bootstrap_certs__keystore_cert_dir }}"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Caroot | Generate OpenSSL private key for CA
      no_log: true
      community.crypto.openssl_privatekey:
        path: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_key }}"
        size: "{{ bootstrap_certs__ca_key_spec.size }}" # Key size from your ca-root.json
        type: "{{ bootstrap_certs__ca_key_spec.algo | upper }}" # Algorithm type from your ca-root.json
        mode: '0600' # Restrict permissions for the private key

    - name: Caroot | Create root CSR
      community.crypto.openssl_csr:
        path: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_csr }}"
        privatekey_path: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_key }}"
        # Define key usages for a CA root certificate
        extended_key_usage: [] # Not typically used for root CAs
        key_usage:
          - digitalSignature
          - keyCertSign
          - cRLSign
        subject:
          CN: "{{ bootstrap_certs__ca_root.domainName | d(omit) }}" # Updated key name
          O: "{{ bootstrap_certs__ca_root.organization }}"
          OU: "{{ bootstrap_certs__ca_root.organizationalUnit | d(omit) }}" # Updated key name
          C: "{{ bootstrap_certs__ca_root.country | d(omit) }}"
          ST: "{{ bootstrap_certs__ca_root.state | d(omit) }}"
          L: "{{ bootstrap_certs__ca_root.locality | d(omit) }}"
          emailAddress: "{{ bootstrap_certs__ca_root.email | d(omit) }}" # Added email_address
#        subject:
#          commonName: "{{ bootstrap_certs__ca_root.domainName | d(omit) }}" # Updated key name
#          organization: "{{ bootstrap_certs__ca_root.organization }}"
#          organizationalUnit: "{{ bootstrap_certs__ca_root.organizationalUnit | d(omit) }}" # Updated key name
#          country: "{{ bootstrap_certs__ca_root.country | d(omit) }}"
#          state: "{{ bootstrap_certs__ca_root.state | d(omit) }}"
#          locality: "{{ bootstrap_certs__ca_root.locality | d(omit) }}"
#          emailAddress: "{{ bootstrap_certs__ca_root.email | d(omit) }}" # Added email_address
#        subject_alt_names: [] # No subject alternative names for a root CA, typically

    ## the following module does not support a number of critical parameters needed
    ## so we invoke openssl directly using shell instead
    - name: Caroot | Generate root CA certificate
      community.crypto.x509_certificate:
        path: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_cert }}"
        privatekey_path: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_key }}"
        csr_path: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_csr }}"
        provider: selfsigned
        selfsigned_digest: "{{ bootstrap_certs__ca_root_cert_digest }}"
        # Set the cert validity
        selfsigned_not_after: "+{{ bootstrap_certs__ca_root_cert_validity_days | int }}d"

#    - name: Caroot | Generate self-signed root CA certificate using OpenSSL command
#      ansible.builtin.shell:
#        cmd: |
#          openssl req -x509 -new \
#          -key "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_key }}" \
#          -out "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_cert }}" \
#          -days "{{ bootstrap_certs__ca_root_cert_validity_days | int }}" \
#          -sha256 \
#          -subj "{{ bootstrap_certs__ca_root_subject }}" \
#          -addext "basicConstraints=CA:TRUE" \
#          -addext "keyUsage=digitalSignature,keyCertSign,cRLSign" \
#          -addext "subjectKeyIdentifier=hash" \
#          -addext "authorityKeyIdentifier=keyid:always"
#        creates: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_cert }}"
#      args:
#        # Prevents shell module from attempting to use jinja2 templating on the command string,
#        # ensuring the raw openssl command is passed
#        executable: /bin/bash

    - name: Caroot | Changing perm to 644 for {{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_cert }}
      ansible.builtin.file:
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      loop:
        - dest: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_key }}"
          mode: "600"
        - dest: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_cert }}"
          mode: "644"

## ref: https://docs.ansible.com/ansible/latest/modules/openssl_certificate_info_module.html#openssl-certificate-info-module
- name: Caroot | Get ca root certificate info
  community.crypto.x509_certificate_info:
    #    path: /etc/ssl/crt/ansible.com.crt
    path: "{{ __bootstrap_certs__keystore_cert_dir }}/{{ __bootstrap_certs__ca_cert }}"
  register: cacert_result

- name: Caroot | Display ca root cert info
  ansible.builtin.debug:
    var: cacert_result

- name: Caroot | Assert CA root cert info is valid
  ansible.builtin.assert:
    that:
      # issuer and issuer_strict
      - cacert_result.issuer.commonName == bootstrap_certs__ca_root.commonName
      - cacert_result.issuer.organizationName == bootstrap_certs__ca_root.organization
      - cacert_result.subject.commonName == bootstrap_certs__ca_root.commonName
      - cacert_result.subject.organizationName == bootstrap_certs__ca_root.organization
      # has_expired
      - not cacert_result.expired

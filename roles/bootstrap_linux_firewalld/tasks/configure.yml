---
- name: "{{ __bootstrap_firewalld__log_prefix_configure }} If action==configure, assert service is running"
  when:
    - firewalld_enabled | bool
    - firewalld_action in ['configure']
  block:
    - name: "{{ __bootstrap_firewalld__log_prefix_configure }} Restart firewalld"
      when: firewalld_enabled | bool
      ignore_errors: true
      ansible.builtin.service:
        name: firewalld
        state: started
      register: __firewalld_service_status

    - name: "{{ __bootstrap_firewalld__log_prefix_configure }} Assert firewalld service is running"
      ansible.builtin.assert:
        that: not __firewalld_service_status.failed
        fail_msg: firewalld_action is set to `configure` but the firewalld service is not running

  rescue:
    - name: "{{ __bootstrap_firewalld__log_prefix_configure }} Initialize firewalld config"
      ansible.builtin.template:
        src: firewalld.conf.j2
        dest: "{{ firewalld_conf_file }}"
        backup: true
        mode: "0644"

    - name: "{{ __bootstrap_firewalld__log_prefix_configure }} Enable firewalld"
      ansible.builtin.service:
        name: firewalld
        state: restarted
        enabled: true

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Configure firewalld configuration directory"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    recurse: true
  loop:
    - path: /etc/firewalld/services
    - path: /etc/firewalld/zones
    - path: /etc/firewalld/ipsets

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Configure firewalld custom services"
  when: item.custom|d(false)|bool
  ansible.builtin.template:
    src: service_template.xml.j2
    dest: /etc/firewalld/services/{{ item.name }}.xml
    backup: true
    mode: "0644"
  loop: "{{ __firewalld_services }}"
  loop_control:
    label: "{{ item.name }}"
  notify: Reload firewalld
  register: firewalld_service_backup

#- name: "{{ __bootstrap_firewalld__log_prefix_configure }} reload firewalld"
#  ansible.builtin.command: firewall-cmd --reload
#  ignore_errors: yes
#
#- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Restart firewalld"
#  ansible.builtin.service:
#    name: firewalld
#    state: restarted

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Display __firewalld_zones"
  ansible.builtin.debug:
    var: __firewalld_zones

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Get zones in /etc/firewalld/zones"
  ansible.builtin.shell: |
    ls -1 /etc/firewalld/zones/ | grep -E .xml$
  register: get_firewalld_zones
  changed_when: false
  failed_when: false

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Remove unmanaged zones in /etc/firewalld/zones"
  when:
    - firewalld_zones_force_reset|bool
    - item|replace('.xml','') not in __firewalld_zones.values() | list |map(attribute='name')|list
  ansible.builtin.file:
    path: /etc/firewalld/zones/{{ item }}
    state: absent
  loop: "{{ get_firewalld_zones.stdout_lines }}"
  notify: Reload firewalld

#- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Configure firewalld zones"
#  ansible.builtin.template:
#    src: zone_template.xml.j2
#    dest: /etc/firewalld/zones/{{ item.name }}.xml
#    backup: true
#  loop: "{{ __firewalld_zones.values() | list }}"
#  notify: Reload firewalld
#  loop_control:
#    label: "{{ item.name }}"
#  register: firewalld_zone_backup

## set up zone
- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Configure firewalld zones"
  vars:
    ansible_python_interpreter: "{{ os_python_interpreter }}"
  ansible.posix.firewalld:
    zone: "{{ item.name }}"
    state: present
    permanent: true
    target: ACCEPT
  loop: "{{ __firewalld_zones.values() | list }}"
  loop_control:
    label: "{{ item.name }}"
  register: __firewalld_zone_config_results

### setup zone
#- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Configure firewalld zones"
#  ansible.builtin.command: "firewall-cmd --permanent --add-masquerade --zone={{ item.name }}"
#  loop: "{{ __firewalld_zones.values() | list }}"
#  loop_control:
#    label: "{{ item.name }}"
#  register: __firewalld_zone_config_results

#- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Display firewalld_zone_backup"
#  ansible.builtin.debug:
#    var: firewalld_zone_backup
#
### ref: https://github.com/ansible/ansible/issues/16305#issuecomment-475220643
#- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Move original {{ firewalld_zone_backup.backup }} zone file backup to backup directory {{ firewalld_backup_dir }}/zones"
#  ansible.builtin.shell: >
#    mkdir --parents {{ firewalld_backup_dir }}/zones &&
#    mv {{ firewalld_zone_backup.backup }} {{ firewalld_backup_dir }}/zones/{{ firewalld_zone_backup.backup }}
#  when: firewalld_zone_backup.backup

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Display firewalld_ipsets"
  ansible.builtin.debug:
    var: firewalld_ipsets

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Get current ipsets in /etc/firewalld/ipsets"
  ansible.builtin.shell: |
    ls -1 /etc/firewalld/ipsets/ | grep -E .xml$
  register: get_firewalld_ipsets
  changed_when: false
  failed_when: false

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Remove unmanaged ipsets in /etc/firewalld/ipsets"
  ansible.builtin.file:
    path: /etc/firewalld/ipsets/{{ item }}
    state: absent
  loop: "{{ get_firewalld_ipsets.stdout_lines }}"
  notify: Reload firewalld
  when: item|replace('.xml','') not in firewalld_ipsets|map(attribute='name')|list

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Configure firewalld ipsets"
  ansible.builtin.template:
    src: ipset_template.xml.j2
    dest: /etc/firewalld/ipsets/{{ item.name }}.xml
    backup: true
    mode: "0644"
  loop: "{{ firewalld_ipsets }}"
  notify: Reload firewalld
  loop_control:
    label: "{{ item.name }}"

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Disable firewalld" # noqa: ignore-errors
  when: not firewalld_enabled | bool
  ignore_errors: true
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: false

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Restart firewalld"
  when: firewalld_enabled | bool
  ansible.builtin.service:
    name: firewalld
    state: restarted
  register: __firewalld_restart_result

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Display __firewalld_restart_result"
  ansible.builtin.debug:
    var: __firewalld_restart_result
    verbosity: 2

## ref: https://docs.ansible.com/ansible/latest/collections/ansible/posix/firewalld_module.html
- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Configure firewalld services"
  when:
    - firewalld_enabled | bool
    - __firewalld_zones.values() | list | d([]) | count>0
    - __firewalld_services|flatten|d([])|count>0
    - item.0.custom|d(false)|bool
  vars:
    ansible_python_interpreter: "{{ os_python_interpreter }}"
  ansible.posix.firewalld:
    zone: "{{ item.0.name }}"
    service: "{{ item.1.name }}"
    permanent: true
    state: enabled
    immediate: true
  register: firewalld_result
  failed_when: firewalld_result is failed and 'ALREADY_ENABLED' not in firewalld_result.msg
  with_nested:
    - "{{ __firewalld_zones.values() | list |flatten }}"
    - "{{ __firewalld_services|flatten }}"
  loop_control:
    label: "{{ item.0.name }} - {{ item.1.name }}"
  notify: Reload firewalld

#- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Configure firewalld ports"
#  when:
#    - firewalld_enabled | bool
#    - __firewalld_zones.values() | list |d([])|flatten|count>0
#    - __firewalld_ports|d([])|flatten|count>0
#  vars:
#    ansible_python_interpreter: "{{ os_python_interpreter }}"
#  ansible.posix.firewalld:
#    zone: "{{ item.0.name }}"
#    port: "{{ item.1 }}"
#    permanent: true
#    state: enabled
#    immediate: yes
#  register: firewalld_result
#  failed_when: firewalld_result is failed and 'ALREADY_ENABLED' not in firewalld_result.msg
#  with_nested:
#    - "{{ __firewalld_zones.values() | list |flatten }}"
#    - "{{ __firewalld_ports|flatten }}"
#  loop_control:
#    label: "{{ item.0.name }} - {{ item.1 }}"
#  notify: "Reload firewalld"

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Configure firewalld ports"
  when:
    - firewalld_enabled | bool
    - __firewalld_zones.values() | list |d([])|flatten|count>0
    - __firewalld_ports|d([])|flatten|count>0
  vars:
    ansible_python_interpreter: "{{ os_python_interpreter }}"
  ansible.posix.firewalld:
    #    zone: "{{ firewalld_default_zone }}"
    port: "{{ item }}"
    permanent: true
    state: enabled
    immediate: true
  register: firewalld_result
  failed_when: firewalld_result is failed and 'ALREADY_ENABLED' not in firewalld_result.msg
  loop: "{{ __firewalld_ports|flatten }}"
  notify: Reload firewalld

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Get services in /etc/firewalld/services"
  ansible.builtin.shell: |
    ls -1 /etc/firewalld/services/ | grep -E .xml$
  register: get_firewalld_services
  changed_when: false
  failed_when: false

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Remove unmanaged services in /etc/firewalld/services"
  when: item|replace('.xml','') not in __firewalld_services|map(attribute='name')|list
  ansible.builtin.file:
    path: /etc/firewalld/services/{{ item }}
    state: absent
  loop: "{{ get_firewalld_services.stdout_lines }}"
  notify: Reload firewalld

- name: "{{ __bootstrap_firewalld__log_prefix_configure }} Configure defined __firewalld_rules"
  when:
    - firewalld_enabled | bool
    - firewalld_rules|d([])|length>0
  vars:
    ansible_python_interpreter: "{{ os_python_interpreter }}"
  ansible.posix.firewalld:
    immediate: "{{ item.immediate|default(True)|bool }}"
    interface: "{{ item.interface|default(omit) }}"
    masquerade: "{{ item.masquerade|default(omit) }}"
    permanent: "{{ item.permanent|default(False)|bool }}"
    port: "{{ item.port|default(omit) }}"
    rich_rule: "{{ item.rich_rule|default(omit) }}"
    service: "{{ item.service|default(omit) }}"
    source: "{{ item.source|default(omit) }}"
    state: "{{ item.state|default('enabled') }}"
    zone: "{{ item.zone|default(omit) }}"
  loop: "{{ __firewalld_rules }}"

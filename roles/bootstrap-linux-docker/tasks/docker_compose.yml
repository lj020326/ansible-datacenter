---

- name: Docker | Docker Compose | Check current docker-compose version.
  command: "{{ bootstrap_docker__compose_path }} --version"
  register: __bootstrap_docker__compose_version
  check_mode: false
  changed_when: false
  failed_when: false

- name: Docker | Docker Compose | Set __bootstrap_docker__compose_current_version
  set_fact:
    __bootstrap_docker__compose_current_version: "{{ __bootstrap_docker__compose_version.stdout | regex_search('(\\d+(\\.\\d+)+)') }}"
  when: >
    __bootstrap_docker__compose_version.stdout is defined
    and (__bootstrap_docker__compose_version.stdout | length > 0)

- name: Docker | Docker Compose | Init __bootstrap_docker__compose_version
  set_fact:
    __bootstrap_docker__compose_version: "{{ bootstrap_docker__compose_version | d('') }}"

- name: Docker | Docker Compose | Get __bootstrap_docker__compose_version
  when: bootstrap_docker__compose_version is not defined
#  when:
#    - bootstrap_docker__compose_version is not defined
#    - bootstrap_docker__update_exist_compose_version|d(False)|bool
  block:

  - name: Docker | Docker Compose | Set __compose_latest_version_result
    shell: |
      curl -w '%{url_effective}' -I -L -s -S {{ bootstrap_docker__compose_url_latest }} -o /dev/null \
        | sed 's/.*tag\/\(.*\)/\1/'
    register: __compose_latest_version_result

  - name: Docker | Docker Compose | Set __compose_latest_version_result
    uri:
      url: "{{ bootstrap_docker__compose_url_latest }}"
    register: __compose_latest_version_result

  - name: Docker | Docker Compose | Display __compose_latest_version_result
    debug:
      var: __compose_latest_version_result

  - name: Docker | Docker Compose | Set __docker_compose_latest_version_url
    set_fact:
      __docker_compose_latest_version_url: "{{ __compose_latest_version_result.url }}"

  - name: Docker | Docker Compose | Display __docker_compose_latest_version_url
    debug:
      var: __docker_compose_latest_version_url

  - name: Docker | Docker Compose | Set __docker_compose_latest_version
    set_fact:
      __docker_compose_latest_version: "{{ __docker_compose_latest_version_url | regex_replace('.*tag\/(.*)', '\\1') }}"

  - name: Docker | Docker Compose | Display __docker_compose_latest_version
    debug:
      var: __docker_compose_latest_version

  - name: Docker | Docker Compose | Set __bootstrap_docker__compose_version
    set_fact:
      __bootstrap_docker__compose_version: "{{ bootstrap_docker__compose_version | d(__docker_compose_latest_version) }}"

- name: Docker | Docker Compose | Init __replace_docker_compose
  set_fact:
    __replace_docker_compose: no

- name: Docker | Docker Compose | Set __replace_docker_compose
  when: >
    __bootstrap_docker__compose_current_version is not defined
    or (__bootstrap_docker__compose_current_version | length == 0)
  set_fact:
    __replace_docker_compose: yes

- name: Docker | Docker Compose | Set __replace_docker_compose
  when:
    - bootstrap_docker__compose_version is defined
    - bootstrap_docker__update_exist_compose_version|d(False)|bool
    - (__bootstrap_docker__compose_version | regex_replace('v', '')) not in __bootstrap_docker__compose_current_version
  set_fact:
    __replace_docker_compose: yes

- name: Docker | Docker Compose | Replace existing docker-compose
  when: __replace_docker_compose|bool
  block:

    - name: Docker | Docker Compose | Delete existing docker-compose version if it's different.
      file:
        path: "{{ bootstrap_docker__compose_path }}"
        state: absent

    - name: Docker | Docker Compose | Install Docker Compose
      get_url:
        url: "{{ bootstrap_docker__compose_url }}"
        dest: "{{ bootstrap_docker__compose_path }}"
        mode: 0755

#########
## Docker virtualenv for ansible docker-compose automation
#########

- name: Docker | Docker Compose | Install Python docker packages
  pip:
    name: >
      {{ item.name }}{% if item.version|d() %}=={{ item.version }}{% endif %}
#      {{ item.name }}{% if item.version|d('')|length>0 %}=={{ item.version }}{% endif %}
    state: "{{ item.state | d('present') }}"
    extra_args: "--user"
    executable: pip3
  loop: "{{ bootstrap_docker__default_pip_packages + bootstrap_docker__pip_packages }}"
  when: item.name | d()

- name: Docker | Docker Compose | pip self-update
  pip:
    name: pip
    state: latest
    virtualenv: "{{ bootstrap_docker__pip_virtualenv }}"

## Unable to find pip in the virtualenv (python 3.10)
## https://github.com/ansible/ansible/issues/77604
- name: Docker | Docker Compose | Install Python docker packages into docker-python virtualenv
#  become: yes
  pip:
    name: >
      {{ item.name }}{% if item.version|d('')|length>0 %}=={{ item.version }}{% endif %}
    state: "{{ item.virtualenv_state | d('present') }}"
    virtualenv: "{{ bootstrap_docker__pip_virtualenv }}"
#    virtualenv_site_packages: yes
#    virtualenv_python: python3
    virtualenv_command: "{{ bootstrap_docker__python_virtualenv_command | d(omit) }}"
#    virtualenv_python: "{{ 'python3' if (bootstrap_docker__python_virtualenv_command is not defined) else omit }}"
#    executable: "pip3"
  loop: "{{ bootstrap_docker__default_pip_packages + bootstrap_docker__pip_packages }}"
  when: item.name | d()
  environment:
    SETUPTOOLS_USE_DISTUTILS: stdlib

- name: Docker | Docker Compose | Symlink Docker Python binary to {{ bootstrap_docker_python_docker_interpreter }}
  file:
    path: "{{ bootstrap_docker_python_docker_interpreter }}"
    src: "{{ bootstrap_docker__pip_virtualenv }}/bin/python"
    state: link

#- name: Docker | Docker Compose | Symlink selected Python package binaries to /usr/local/bin
#  file:
#    path: "{{ item.path }}"
#    src: "{{ item.src }}"
#    state: "link"
#  loop: "{{ bootstrap_docker__default_pip_packages + bootstrap_docker__pip_packages }}"
#  when:
#    - item.state | d("present") != "absent"
#    - item.path | d() and item.src | d()


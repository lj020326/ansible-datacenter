---
  - name: Creating configuration file of Trillian services
    template:
      dest: '{{ trillian_install_root }}/config/{{ item }}.cfg'
      src: 'ct_config/{{ item }}.cfg.j2'
    loop:
      - log-server
      - log-signer

  - name: Creating Trillian systemd services
    template:
      dest: '/etc/systemd/system/{{ item }}.service'
      src: 'ct_systemd_units/{{ item }}.service'
    loop: '{{ ctlog_services }}'

  - name: Calcuating log shards differences
    block:
      - set_fact:
          __current_prefixes: '{{ ansible_local.ctlog.current_shards | d([]) | map(attribute="prefix") | list }}'
          __desired_prefixes: '{{ ctlog_shards | map(attribute="prefix") | list }}'

      - set_fact:
          __remove_prefixes: '{{ __current_prefixes | difference(__desired_prefixes) }}'
          __new_prefixes: '{{ __desired_prefixes | difference(__current_prefixes) }}'
          __stay_prefixes: '{{ __current_prefixes | intersect(__desired_prefixes) }}'

  - name: Configuring log shards
    block:
    - name: Starting Trillian for now
      systemd:
        name: trillian-log
        daemon-reload: yes
        state: started

    - name: Creating new log trees
      command:
        cmd: '{{ trillian_install_root }}/createtree --admin_server 127.0.0.1:{{ trillian_log_server_grpc }} --display_name {{ item }}'
      loop: '{{ __new_prefixes }}'
      register: __new_tree_ids

    - name: Deleting removed log trees
      command:
        cmd: '{{ trillian_install_root }}/deletetree --admin_server 127.0.0.1:{{ trillian_log_server_grpc }} --log_id {{ item }}'
      loop: '{{ __remove_prefixes }}'

    - name: Stopping Trillian
      systemd:
        name: trillian-log
        state: stopped

    - name: Generating log signing key
      openssl_privatekey:
        path: '{{ secret + "/certificates/" + ansible_fqdn + "/ctlog/" + item + ".key" }}'
        type: ECC
        curve: secp256r1
      loop: '{{ __new_prefixes }}'
      delegate_to: 127.0.0.1

    - name: Obtaining log signing public key
      command:
        cmd: openssl ec -in {{ item }}.key -pubout -out {{ item }}.pub
        chdir: '{{ secret + "/certificates/" + ansible_fqdn + "/ctlog" }}'
      loop: '{{ __new_prefixes }}'
      delegate_to: 127.0.0.1

#    - name: Obtaining log signing public key
#      openssl_publickey:
#        path: '{{ secret + "/certificates/" + ansible_fqdn + "/ctlog/" + item + ".pub" }}'
#        privatekey_path: '{{ secret + "/certificates/" + ansible_fqdn + "/ctlog/" + item + ".key" }}'
#      loop: '{{ __new_prefixes }}'
#      delegate_to: 127.0.0.1

    - name: Removing removed log signing key
      file:
        path: '{{ secret + "/certificates/" + ansible_fqdn + "/ctlog/" + item }}'
        state: absent
      loop: '{{ __remove_prefixes | product(["key", "pub"]) | map("join", ".") | list }}'
      delegate_to: 127.0.0.1

    - name: Synchronizing log signing keys
      synchronize:
        dest: '{{ ct_install_root + "/signing_keys/" }}'
        src: '{{ secret + "/certificates/" + ansible_fqdn + "/ctlog/" }}'
        archive: no
        compress: no
        delete: yes
        recursive: yes

    - name: Calculating current established shard informations
      block:
        - set_fact:
            __new_shards: '{{ __new_shards | d([]) + [ { "prefix": item.0, "id": item.1 } ] }}'
          loop: '{{ __new_prefixes | zip(__new_tree_ids.results | map(attribute="stdout")) | list }}'

        - set_fact:
            __all_shards_id: '{{ (ansible_local.ctlog.current_shards | d([]) + __new_shards) | sort(False, True, attribute="prefix") }}'

        - set_fact:
            __all_shards: '{{ __all_shards | d([]) + [ item.0 | combine(item.1) ] }}'
          loop: '{{ ctlog_shards | sort(False,True,attribute="prefix") | zip(__all_shards_id) | list }}'

    - name: Updating current established trees info
      block:
        - file:
            path: /etc/ansible/facts.d
            state: directory

        - copy:
            dest: /etc/ansible/facts.d/ctlog.fact
            content: |
              {
                "current_shards": [
                  {% for i in __all_shards_id %}
                    {
                      "prefix": "{{ i.prefix }}",
                      "id": {{ i.id }}
                    }{{ ',' if not loop.last else '' }}
                  {% endfor %}
                ]
              }

    - name: Generating CT log definitions
      template:
        dest: '{{ ct_install_root }}/config/log_definitions.cfg'
        src: ct_config/log_definitions.cfg.j2
    when: __new_prefixes | length or __remove_prefixes | length

  - name: Inserting signing public key information to stepca's ra.json
    replace:
      path: '{{ install_root + "/config/ra.json" }}'
      after: '{{ item }}'
      before: submitFinalCert
      regexp: '@@TOBEREPLACED@@'
      replace: '{{ lookup("file", secret + "/certificates/" + ansible_fqdn + "/ctlog/" + item + ".pub") | decap_pem }}'
    loop: '{{ __stay_prefixes + __new_prefixes | d([]) }}'

  - name: Copying accepting CA certificate file
    copy:
      src: '{{ secret + "/certificates/" + ansible_fqdn + "/issuing/" + issuing_ca_crtname }}'
      dest: '{{ ct_install_root + "/config/" + issuing_ca_crtname }}'

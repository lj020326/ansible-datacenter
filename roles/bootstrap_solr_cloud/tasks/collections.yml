---
- name: SolrCloud | Check if collections configs exists
  ansible.builtin.uri:
    url: "{{ solr_url }}/{{ item.key }}/config"
    return_content: true
    status_code: 200,404
  register: config_exists_api_responses
  changed_when: false
  with_dict: "{{ solr_collections }}"

- name: SolrCloud | Copy files for collections configs in tmp directories
  ansible.posix.synchronize: # noqa: no-same-owner
    src: "{{ solr_collections_template_path }}"
    dest: "{{ solr_collections_config_tmp_dir }}"
    recursive: true
    delete: true
    checksum: true
    times: true
    owner: true
    group: true
  become: true
  become_user: "{{ solr_user }}"
  register: synchronized_config_synchronize
  when: solr_collections_transfer_mode == "synchronize"

- name: SolrCloud | Copy files for collections configs in tmp directories
  ansible.builtin.copy:
    src: "{{ solr_collections_template_path }}"
    dest: "{{ solr_collections_config_tmp_dir }}"
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
    mode: "0644"
  register: synchronized_config_copy
  when: solr_collections_transfer_mode == "copy"

- name: SolrCloud | Upload initial config
  changed_when: false
  ansible.builtin.command: >
    {{ solr_zookeeper_client_path }}/zkcli.sh
    -zkhost {{ solr_zookeeper_hosts }}/{{ solr_zookeeper_hosts_solr_path }}
    -cmd upconfig
    -confname {{ item.key }}
    -confdir {{ solr_collections_config_tmp_dir }}/{{ item.key }}
  when: synchronized_config_synchronize.changed or synchronized_config_copy.changed
  with_dict: "{{ solr_collections }}"
  tags: skip_ansible_lint

- name: SolrCloud | Return existing collections
  ansible.builtin.uri:
    url: "{{ solr_url }}/admin/collections?action=LIST"
    return_content: true
  register: existing_collections
  changed_when: false

- name: SolrCloud | Create new collections
  ansible.builtin.uri:
    url: "{{ solr_url }}/admin/collections?action=CREATE&name={{ item }}&numShards={{ solr_collections[item].shards }}&replicationFactor={{ solr_collections[item].replicas
      }}&collection.configName={{ item }}&maxShardsPerNode={{ solr_collections[item].shards_per_node }}"
  loop: "{{ solr_collections.keys() | difference(existing_collections.json.collections) }}"

- name: SolrCloud | Modify existing collections
  ansible.builtin.uri:
    url: "{{ solr_url }}/admin/collections?action=MODIFYCOLLECTION&collection={{ item }}&replicationFactor={{ solr_collections[item].replicas }}&maxShardsPerNode={{
      solr_collections[item].shards_per_node }}&autoAddReplicas=true"
  loop: "{{ existing_collections.json.collections | intersect(solr_collections.keys()) }}"

- name: SolrCloud | Reload modified collections
  ansible.builtin.uri:
    url: "{{ solr_url }}/admin/collections?action=RELOAD&name={{ item }}"
  loop: "{{ existing_collections.json.collections | intersect(solr_collections.keys()) }}"

- name: SolrCloud | Delete collections that exists in SolrCloud but not in given configuration
  ansible.builtin.uri:
    url: "{{ solr_url }}/admin/collections?action=DELETE&name={{ item }}"
  loop: "{{ existing_collections.json.collections | difference(solr_collections.keys()) }}"

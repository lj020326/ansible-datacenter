---

- set_fact:
    __log_prefix_local: "Firewalld | Configure |"

- name: "{{ __log_prefix_local }} If action==configure, assert service is running"
  when:
    - firewalld_enabled | bool
    - firewalld_action in ['configure']
  block:
    - name: "{{ __log_prefix_local }} Restart firewalld"
      when: firewalld_enabled | bool
      ignore_errors: yes
      service:
        name: firewalld
        state: started
      register: __firewalld_service_status

    - name: "{{ __log_prefix_local }} Assert firewalld service is running"
      assert:
        that: not __firewalld_service_status.failed
        fail_msg: "firewalld_action is set to `configure` but the firewalld service is not running"

- name: "{{ __log_prefix_local }} Configure firewalld configuration directory"
  file:
    path: "{{ item.path }}"
    state: directory
    recurse: yes
  loop:
    - path: "/etc/firewalld/services"
    - path: "/etc/firewalld/zones"
    - path: "/etc/firewalld/ipsets"

- name: "{{ __log_prefix_local }} Configure firewalld custom services"
  when: item.custom|d(false)|bool
  template:
    src: service_template.xml.j2
    dest: /etc/firewalld/services/{{ item.name }}.xml
    backup: yes
  loop: "{{ __firewalld_services }}"
  loop_control:
    label: "{{ item.name }}"
  notify: reload firewalld
  register: firewalld_service_backup

#- name: "{{ __log_prefix_local }} reload firewalld"
#  command: firewall-cmd --reload
#  ignore_errors: yes
#
#- name: "{{ __log_prefix_local }} Restart firewalld"
#  service:
#    name: firewalld
#    state: restarted

- name: "{{ __log_prefix_local }} Display __firewalld_zones"
  debug:
    var: __firewalld_zones

- name: "{{ __log_prefix_local }} Get zones in /etc/firewalld/zones"
  shell: ls -1 /etc/firewalld/zones/ | grep -E .xml$
  register: get_firewalld_zones
  changed_when: false
  failed_when: false

- name: "{{ __log_prefix_local }} Remove unmanaged zones in /etc/firewalld/zones"
  file:
    path: "/etc/firewalld/zones/{{ item }}"
    state: absent
  with_items: "{{ get_firewalld_zones.stdout_lines }}"
  notify: reload firewalld
  when: item|replace('.xml','') not in __firewalld_zones|map(attribute='name')|list

#- name: "{{ __log_prefix_local }} Configure firewalld zones"
#  template:
#    src: zone_template.xml.j2
#    dest: /etc/firewalld/zones/{{ item.name }}.xml
#    backup: yes
#  with_items: "{{ __firewalld_zones }}"
#  notify: reload firewalld
#  loop_control:
#    label: "{{ item.name }}"
#  register: firewalld_zone_backup

- name: "{{ __log_prefix_local }} Configure firewalld zones"
  ansible.posix.firewalld:
    zone: "{{ item.name }}"
    state: present
    permanent: true
    target: ACCEPT
  loop: "{{ __firewalld_zones }}"
  loop_control:
    label: "{{ item.name }}"
  register: __firewalld_zone_config_results

#- name: "{{ __log_prefix_local }} Display firewalld_zone_backup"
#  debug:
#    var: firewalld_zone_backup
#
### ref: https://github.com/ansible/ansible/issues/16305#issuecomment-475220643
#- name: "{{ __log_prefix_local }} Move original {{ firewalld_zone_backup.backup }} zone file backup to backup directory {{ firewalld_backup_dir }}/zones"
#  shell: >
#    mkdir --parents {{ firewalld_backup_dir }}/zones &&
#    mv {{ firewalld_zone_backup.backup }} {{ firewalld_backup_dir }}/zones/{{ firewalld_zone_backup.backup }}
#  when: firewalld_zone_backup.backup

- name: "{{ __log_prefix_local }} Display firewalld_ipsets"
  debug:
    var: firewalld_ipsets

- name: "{{ __log_prefix_local }} Get current ipsets in /etc/firewalld/ipsets"
  shell: ls -1 /etc/firewalld/ipsets/ | grep -E .xml$
  register: get_firewalld_ipsets
  changed_when: false
  failed_when: false

- name: "{{ __log_prefix_local }} Remove unmanaged ipsets in /etc/firewalld/ipsets"
  file:
    path: "/etc/firewalld/ipsets/{{ item }}"
    state: absent
  with_items: "{{ get_firewalld_ipsets.stdout_lines }}"
  notify: reload firewalld
  when: item|replace('.xml','') not in firewalld_ipsets|map(attribute='name')|list

- name: "{{ __log_prefix_local }} Configure firewalld ipsets"
  template:
    src: ipset_template.xml.j2
    dest: /etc/firewalld/ipsets/{{ item.name }}.xml
    backup: yes
  with_items: "{{ firewalld_ipsets }}"
  notify: reload firewalld
  loop_control:
    label: "{{ item.name }}"

- name: "{{ __log_prefix_local }} Disable firewalld"
  when: not firewalld_enabled | bool
  ignore_errors: yes
  service:
    name: firewalld
    state: stopped
    enabled: no

- name: "{{ __log_prefix_local }} Restart firewalld"
  when: firewalld_enabled | bool
  service:
    name: firewalld
    state: restarted
  register: __firewalld_restart_result

- name: "{{ __log_prefix_local }} Display __firewalld_restart_result"
  debug:
    var: __firewalld_restart_result

## ref: https://docs.ansible.com/ansible/latest/collections/ansible/posix/firewalld_module.html
- name: "{{ __log_prefix_local }} Configure firewalld services"
  when:
    - firewalld_enabled | bool
    - __firewalld_zones|flatten|d([])|count>0
    - __firewalld_services|flatten|d([])|count>0
    - item.0.custom|d(false)|bool
  ansible.posix.firewalld:
    zone: "{{ item.0.name }}"
    service: "{{ item.1.name }}"
    permanent: true
    state: enabled
    immediate: yes
  register: firewalld_result
  failed_when: firewalld_result is failed and 'ALREADY_ENABLED' not in firewalld_result.msg
  with_nested:
    - "{{ __firewalld_zones|flatten }}"
    - "{{ __firewalld_services|flatten }}"
  loop_control:
    label: "{{ item.0.name }} - {{ item.1.name }}"
  notify: reload firewalld

#- name: "{{ __log_prefix_local }} Configure firewalld ports"
#  when:
#    - firewalld_enabled | bool
#    - __firewalld_zones|d([])|flatten|count>0
#    - __firewalld_ports|d([])|flatten|count>0
#  ansible.posix.firewalld:
#    zone: "{{ item.0.name }}"
#    port: "{{ item.1 }}"
#    permanent: true
#    state: enabled
#    immediate: yes
#  register: firewalld_result
#  failed_when: firewalld_result is failed and 'ALREADY_ENABLED' not in firewalld_result.msg
#  with_nested:
#    - "{{ __firewalld_zones|flatten }}"
#    - "{{ __firewalld_ports|flatten }}"
#  loop_control:
#    label: "{{ item.0.name }} - {{ item.1 }}"
#  notify: "reload firewalld"

- name: "{{ __log_prefix_local }} Configure firewalld ports"
  when:
    - firewalld_enabled | bool
    - __firewalld_zones|d([])|flatten|count>0
    - __firewalld_ports|d([])|flatten|count>0
  ansible.posix.firewalld:
    zone: "{{ firewalld_default_zone }}"
    port: "{{ item }}"
    permanent: true
    state: enabled
    immediate: yes
  register: firewalld_result
  failed_when: firewalld_result is failed and 'ALREADY_ENABLED' not in firewalld_result.msg
  loop: "{{ __firewalld_ports|flatten }}"
  notify: "reload firewalld"

- name: "{{ __log_prefix_local }} Get services in /etc/firewalld/services"
  shell: ls -1 /etc/firewalld/services/ | grep -E .xml$
  register: get_firewalld_services
  changed_when: false
  failed_when: false

- name: "{{ __log_prefix_local }} Remove unmanaged services in /etc/firewalld/services"
  when: item|replace('.xml','') not in __firewalld_services|map(attribute='name')|list
  file:
    path: "/etc/firewalld/services/{{ item }}"
    state: absent
  with_items: "{{ get_firewalld_services.stdout_lines }}"
  notify: reload firewalld

- name: "{{ __log_prefix_local }} Configure defined __firewalld_rules"
  when:
    - firewalld_enabled | bool
    - firewalld_rules|d([])|length>0
  ansible.posix.firewalld:
    immediate: "{{ item.immediate|default('yes') }}"
    interface: "{{ item.interface|default(omit) }}"
    masquerade: "{{ item.masquerade|default(omit) }}"
    permanent: "{{ item.permanent|default('no') }}"
    port: "{{ item.port|default(omit) }}"
    rich_rule: "{{ item.rich_rule|default(omit) }}"
    service: "{{ item.service|default(omit) }}"
    source: "{{ item.source|default(omit) }}"
    state: "{{ item.state|default('enabled') }}"
    zone: "{{ item.zone|default(omit) }}"
  with_items: "{{ __firewalld_rules }}"

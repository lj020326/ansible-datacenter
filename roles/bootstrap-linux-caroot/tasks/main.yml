---
- include_vars: "{{ ansible_os_family }}.yml"

#- name: "fetch_certs | Ensure keyring dirs exist in {{ ca_keyring_base_dir }}"
#  become: no
#  delegate_to: "localhost"
#  file:
#    path: "{{ item.path }}"
#    state: directory
#    mode: "{{ item.mode | d('0755') }}"
#  with_items:
#    - { path: "{{ ca_keyring_certs_dir }}" }
#    - { path: "{{ ca_keyring_keys_dir }}", mode: '0700' }

- name: "fetch_certs | Ensure cert dir exist in {{ ca_local_cert_dir }}"
  delegate_to: "localhost"
  file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode | d('0755') }}"
  with_items:
    - { path: "{{ ca_local_cert_dir }}" }

- name: "Display ca_cert fetch info"
  debug:
    msg:
      - "keyring_cacerts_base_dir={{ keyring_cacerts_base_dir }}"
      - "ca_domain={{ ca_domain }}"
      - "ca_domains_hosted={{ ca_domains_hosted }}"

## ref: https://unix.stackexchange.com/questions/240814/rsync-with-different-user
#- name: "fetch_certs | Fetch certs to {{ ca_keyring_certs_dir }}"
#  become: no
##  become: yes
##  become_user: "{{ ansible_local_user }}"
#  delegate_to: "localhost"
#  shell: >
#    rsync -arP -e'ssh -o StrictHostKeyChecking=no'
#    {{ ansible_ssh_user }}@{{ cacert_keyring_host }}:{{ item.src }}
#    {{ item.dest }}
##  shell: >
##    rsync -arP -e'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no'
##    {{ ansible_ssh_user }}@{{ cacert_keyring_host }}:{{ item.src }}
##    {{ item.dest }}
##  args:
##    warn: False
#  with_items:
#    - src: "{{ keyring_cacerts_base_dir }}/{{ ca_root_cn }}/{{ pki_caroot_cert }}"
#      dest: "{{ ca_keyring_certs_dir }}/{{ pki_caroot_cert }}"
#
#- name: "Copy root cert [{{ pki_caroot_cert }}] to {{ ca_local_cert_dir }}"
#  copy:
#    backup: yes
#    src: "{{ item.src }}"
#    dest: "{{ item.dest }}"
#    mode: "0644"
#  loop:
#    - src: "{{ ca_keyring_certs_dir }}/{{ pki_caroot_cert }}"
#      dest: "{{ ca_local_cert_dir }}/{{ pki_caroot_cert }}"

- name: "fetch_certs | Fetch root ca-cert to {{ ca_local_cert_dir }}"
  shell: >
    rsync -arP -e 'ssh -o StrictHostKeyChecking=no'
    {{ ansible_ssh_user }}@{{ cacert_keyring_host }}:{{ item.src }}
    {{ item.dest }}
  with_items:
    - src: "{{ keyring_cacerts_base_dir }}/{{ ca_root_cn }}/{{ pki_caroot_cert }}"
      dest: "{{ ca_local_cert_dir }}/{{ pki_caroot_cert }}"

- name: "trust_cert | ensure trust dir exists"
  file:
    state: directory
    path: "{{ ca_trust_info[ansible_os_family].ca_trust_cert_dir }}"

- name: "trust_cert | Remove all existing old CA certs from {{ trust_ca_cacert_dir }}"
  when: ca_force_distribute_nodes or ca_force_create
  shell: "/bin/rm -rf {{ ca_trust_info[ansible_os_family].ca_trust_cert_dir }}/*"

#- name: "trust_cert | Remove all existing old CA certs from {{ trust_ca_cacert_dir }}"
#  when: ca_force_distribute_nodes or ca_force_create
#  shell: "/bin/rm -rf {{ trust_ca_cacert_dir }}/*"

### ref: https://stackoverflow.com/questions/37043442/how-to-add-certificate-authority-file-in-centos-7
### ref: https://www.techrepublic.com/article/how-to-install-ca-certificates-in-ubuntu-server/
### ref: https://gist.github.com/aseigneurin/4902819f17218340d11f
- name: "trust_cert | Copy root cert to {{ ca_trust_info[ansible_os_family].ca_trust_cert_dir }} for importing"
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  with_items:
    - src: "{{ ca_local_cert_dir }}/{{ pki_caroot_cert }}"
      dest: "{{ ca_trust_info[ansible_os_family].ca_trust_cert_dir }}/{{ ca_root_cn }}.{{ ca_trust_info[ansible_os_family].ca_trust_cert_extension }}"
  register: trust_ca_cacertinstalled

#- name: "trust_cert | Get list of certs"
#  shell: "ls -lR {{ trust_ca_cacert_dir }}/"
#  register: ls
#  changed_when: false
#
#- debug: var=ls.stdout_lines
#  when: debug is defined

## need to research for centos how to add multiple CAs - if even possible
## ref: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/using-shared-system-certificates_security-hardening
## ref: https://techjourney.net/update-add-ca-certificates-bundle-in-redhat-centos/
- name: "trust_cert | update CA trust"
  command: '{{ ca_trust_info[ansible_os_family].ca_update_trust_cmd }}'
#  when: trust_ca_cacertinstalled is changed or ca_force_distribute_nodes|bool

#- name: convert to pkcs12
#  command: openssl pkcs12 -export -in {{ ca_path }}/{{ cert_node.domainName }}/{{ cert_node.commonName }}.crt -inkey {{ ca_path }}/{{ cert_node.domainName}}/{{ cert_node.commonName }}.key -out {{ ca_path }}/{{ cert_node.domainName }}/{{ cert_node.commonName }}.p12 -name "{{ cert_node.commonName }}" -passout pass:{{ keystore_password }}

## only need to do this for CentOS
## For Ubuntu/Debian - update-ca-certificates updates /etc/ssl/certs/java/cacerts
## ref: https://github.com/anapsix/docker-alpine-java/issues/27
- name: "trust_cert | Add ca root cert to keystore at {{ ca_java_keystore }} - RedHat method"
  when:
    - ca_java_keystore_enabled|bool
    - ansible_os_family == "RedHat"
#  command: |
  ansible.builtin.command: |
    keytool -importcert -v \
      -storepass {{ ca_java_keystore_pass }} \
      -noprompt \
      -cacerts \
      -alias {{ ca_root_cn }} \
      -file {{ item }}
  register: shell_cmd
  failed_when: shell_cmd.rc > 0 and not ( shell_cmd.stderr | regex_search("Certificate not imported, alias .* already exists") )
#  failed_when: shell_cmd.rc > 0 and not ( shell_cmd.stdout | regex_search("Certificate not imported, alias .* already exists") )
#  loop: "{{ ca_service_routes_list }}"
  loop:
    - "{{ ca_local_cert_dir }}/{{ pki_caroot_cert }}"

#- name: "trust_cert | Add ca root cert to keystore - Debian method"
#  when:
#    - ca_java_keystore_enabled|bool
#    - ansible_os_family == "Debian"
#  command: |
#    keytool -importcert -v \
#      -storepass {{ ca_java_keystore_pass }} \
#      -keystore {{ ca_java_keystore }} \
#      -noprompt \
#      -cacerts \
#      -alias {{ ca_root_cn }} \
#      -file {{ item }}
#  register: shell_cmd
#  failed_when: shell_cmd.rc > 0 and not ( shell_cmd.stdout | regex_search("Certificate not imported, alias .* already exists") )
##  loop: "{{ ca_service_routes_list }}"
#  loop:
#    - "{{ ca_local_cert_dir }}/{{ pki_caroot_cert }}"

- name: "trust_cert | Add ca root cert to keystore - Debian method"
  when:
    - ca_java_keystore_enabled|bool
    - ansible_os_family == "Debian"
#  ansible.builtin.command: |
  command: |
    keytool -importcert -v \
      -storepass {{ ca_java_keystore_pass }} \
      -noprompt \
      -alias {{ ca_root_cn }} \
      -file {{ item }}
  register: shell_cmd
  failed_when: shell_cmd.rc > 0 and not ( shell_cmd.stdout | regex_search("Certificate not imported, alias .* already exists") )
#  loop: "{{ ca_service_routes_list }}"
  loop:
    - "{{ ca_local_cert_dir }}/{{ pki_caroot_cert }}"

- debug:
    var: shell_cmd

---

- name: "caroot | Set caroot facts"
  set_fact:
    __bootstrap_signing_certs__keystore_cert_dir: "{{ bootstrap_signing_certs__cacerts_base_dir }}/{{ bootstrap_signing_certs__ca_root.domainName }}"
    __bootstrap_signing_certs__ca_cert: "{{ bootstrap_signing_certs__ca_root.domainName }}.pem"
    __bootstrap_signing_certs__ca_key: "{{ bootstrap_signing_certs__ca_root.domainName }}-key.pem"

- name: "caroot | Display ca info"
  debug:
    msg:
      - "bootstrap_signing_certs__ca_root={{ bootstrap_signing_certs__ca_root | to_nice_json }}"
      - "bootstrap_signing_certs__ca_root_names={{ bootstrap_signing_certs__ca_root_names | to_nice_json }}"
      - "__bootstrap_signing_certs__keystore_cert_dir={{ __bootstrap_signing_certs__keystore_cert_dir }}"
      - "__bootstrap_signing_certs__ca_cert={{ __bootstrap_signing_certs__ca_cert }}"
      - "__bootstrap_signing_certs__ca_key={{ __bootstrap_signing_certs__ca_key }}"

- name: "create_caroot | Perform cacert validations"
  include_tasks: validate_cacerts.yml

- name: "create_caroot | Create intermediate certificate authority key pair and CSR"
  when: _ca_missing_or_invalid_cert|bool == True or _ca_key_exists|bool == False or bootstrap_signing_certs__ca_force_create|bool
  block:

  - name: "caroot | Create domain configuration directories"
    file:
      path: "{{ __bootstrap_signing_certs__keystore_cert_dir }}"
      state: directory
      owner: root
      group: root
      mode: "0755"

  - name: "caroot | Create CA CSR json"
    template:
      src: "ca/ca-root-csr.json.j2"
      dest: "{{ __bootstrap_signing_certs__keystore_cert_dir }}/{{ bootstrap_signing_certs__ca_root.commonName }}.json"
      mode: "0600"

  ## ref: https://jite.eu/2019/2/6/ca-with-cfssl/
  ## ref: https://github.com/jason-riddle/generating-certs/wiki/Generating-a-Root-CA,-Server,-and-Client-Certs-using-CFSSL
  - name: "caroot | Create certificate authority key pair and CSR"
    shell: >-
      cfssl genkey -initca {{ bootstrap_signing_certs__ca_root.commonName }}.json \
        | cfssljson -bare {{ bootstrap_signing_certs__ca_root.commonName }}
    args:
      chdir: "{{ __bootstrap_signing_certs__keystore_cert_dir }}"
  #    creates: "{{ __bootstrap_signing_certs__keystore_cert_dir }}/{{ bootstrap_signing_certs__pki_caroot_key }}"

  - name: "Changing perm to 644 for {{ __bootstrap_signing_certs__keystore_cert_dir }}/{{ __bootstrap_signing_certs__ca_cert }}"
    file:
      dest: "{{ item.dest }}"
      mode: "{{ item.mode }}"
    loop:
      - dest: "{{ __bootstrap_signing_certs__keystore_cert_dir }}/{{ bootstrap_signing_certs__pki_caroot_key }}"
        mode: "600"
      - dest: "{{ __bootstrap_signing_certs__keystore_cert_dir }}/{{ __bootstrap_signing_certs__ca_cert }}"
        mode: "644"


## ref: https://docs.ansible.com/ansible/latest/modules/openssl_certificate_info_module.html#openssl-certificate-info-module
- name: "caroot | Get ca root certificate info"
  openssl_certificate_info:
#    path: /etc/ssl/crt/ansible.com.crt
    path: "{{ __bootstrap_signing_certs__keystore_cert_dir }}/{{ __bootstrap_signing_certs__ca_cert }}"
  register: cacert_result

- name: "caroot | Display ca root cert info"
  debug: var=cacert_result

- name: "caroot | Assert CA root cert info is valid"
  assert:
    that:
      # issuer and issuer_strict
      - cacert_result.issuer.commonName == "{{ bootstrap_signing_certs__ca_root.commonName }}"
      - cacert_result.issuer.organizationName == "{{ bootstrap_signing_certs__ca_root.organization }}"
      - cacert_result.subject.commonName == "{{ bootstrap_signing_certs__ca_root.commonName }}"
      - cacert_result.subject.organizationName == "{{ bootstrap_signing_certs__ca_root.organization }}"
      # has_expired
      - not cacert_result.expired

---

__bootstrap_signing_certs__trust_ca_cacert_dir: "{{ bootstrap_signing_certs__trust_ca_cacert_dir
  | d(__bootstrap_signing_certs__trust_ca_cacert_dir_default) }}"

__bootstrap_signing_certs__trust_ca_update_trust_cmd:  "{{ bootstrap_signing_certs__trust_ca_update_trust_cmd
  | d(__bootstrap_signing_certs__trust_ca_update_trust_cmd_default) }}"

__bootstrap_signing_certs__ca_java_keystore_default: "{{ bootstrap_signing_certs__ca_java_keystore
  | d(__bootstrap_signing_certs__ca_java_keystore_default) }}"

bootstrap_signing_certs__required_pip_libs:
  - pexpect
  - cryptography
  - pyOpenSSL

bootstrap_signing_certs__display_cacert_result: yes

bootstrap_signing_certs__trust_ca_update_trust_cmd: "update-ca-trust extract"
bootstrap_signing_certs__trust_ca_cacert_dir: "/etc/pki/ca-trust/source/anchors"

bootstrap_signing_certs__ca_init: yes
bootstrap_signing_certs__ca_certify_nodes: yes
bootstrap_signing_certs__ca_certify_routes: yes
#bootstrap_signing_certs__ca_force_create: no
#bootstrap_signing_certs__ca_force_certify_nodes: no

#bootstrap_signing_certs__ca_force_create: yes
bootstrap_signing_certs__ca_force_create: no
bootstrap_signing_certs__ca_force_certify_nodes: no
bootstrap_signing_certs__ca_force_distribute_nodes: no

bootstrap_signing_certs__trust_certs: yes

bootstrap_signing_certs__ca_fetch_certs: yes

# where to generate the certs
bootstrap_signing_certs__cacerts_base_dir: /usr/share/ca-certs

bootstrap_signing_certs__ca_key_dir: /etc/ssl/private

bootstrap_signing_certs__ca_root_cn: "ca-root"
bootstrap_signing_certs__caroot_cert: "{{ bootstrap_signing_certs__ca_root_cn }}.pem"
bootstrap_signing_certs__pki_caroot_key: "{{ bootstrap_signing_certs__ca_root_cn }}-key.pem"

## used by distribution vars
bootstrap_signing_certs__ca_reset_local_certs: no
bootstrap_signing_certs__ca_local_cert_dir: /usr/local/ssl/certs
bootstrap_signing_certs__ca_local_key_dir: /usr/local/ssl/private

bootstrap_signing_certs__ca_java_keystore_enabled: yes
bootstrap_signing_certs__ca_java_keystore_pass: changeit

bootstrap_signing_certs__trust_ca_cert_extension: "pem"

#bootstrap_signing_certs__admin_user: "{{ ansible_user }}"
bootstrap_signing_certs__admin_user: "{{ ansible_local_user | d(ansible_user) }}"

# where to deploy the finalized cert files to on the ansible control node
bootstrap_signing_certs__cacert_base_dir: "{{ '~/pki' | expanduser }}"
#bootstrap_signing_certs__cacert_base_dir: "{{ lookup('env','HOME') }}/pki"
#bootstrap_signing_certs__cacert_base_dir: "{{ getent_passwd[bootstrap_signing_certs__admin_user][4] }}"
#bootstrap_signing_certs__cacert_base_dir: "/home/{{ bootstrap_signing_certs__admin_user }}/pki"

bootstrap_signing_certs__cacert_certs_dir: "{{ bootstrap_signing_certs__cacert_base_dir }}/certs"
bootstrap_signing_certs__cacert_keys_dir: "{{ bootstrap_signing_certs__cacert_base_dir }}/keys"

#bootstrap_signing_certs__ca_cert: ca.pem
#bootstrap_signing_certs__ca_key: ca-key.pem

# how long should remain before we generate a new CA cert ?
__bootstrap_signing_certs__ca_cert_expiration_panic_threshold: 604800 # 1 week

##
##

bootstrap_signing_certs__ca_domains_hosted: []

bootstrap_signing_certs__ca_root:
  domainName: "{{ bootstrap_signing_certs__ca_root_cn }}"
  commonName: "Example LLC"
  country: "US"
  state: "New York"
  locality: "New York"
  organization: "Example LLC"
  organizationalUnit: "Research"
  email: "caroot@example.com"

bootstrap_signing_certs__ca_root_csr_tpl:
  CN: "{{ bootstrap_signing_certs__ca_root.commonName }}"
#  hosts: "{{ bootstrap_signing_certs__ca_root.sans|default([]) + bootstrap_signing_certs__ca_root.altips|default([]) }}"
  key: "{{ bootstrap_signing_certs__ca_key_spec }}"
  names: "{{ bootstrap_signing_certs__ca_root_names }}"

bootstrap_signing_certs__ca_root_cacerts_dir: "{{ bootstrap_signing_certs__cacerts_base_dir }}/{{ bootstrap_signing_certs__ca_root.domainName }}"
bootstrap_signing_certs__ca_root_cert: "{{ bootstrap_signing_certs__ca_root_cn }}.pem"
bootstrap_signing_certs__ca_root_key: "{{ bootstrap_signing_certs__ca_root_cn }}-key.pem"

bootstrap_signing_certs__ca_intermediate_certs_list:
  - domainName: "example.com"
    commonName: ca.example.com
    sans:
      - ca-dr.example.com
    altips:
      - 192.168.0.1
    country: US
    state: "New York"
    locality: "New York"
    organization: "Example LLC"
    organizationalUnit: "Research"
    email: "ca-admin@example.com"

bootstrap_signing_certs__ca_service_routes_list:
  - route: route-1.example.com
  - route: route-2.example.com

bootstrap_signing_certs__ca_cert_type: "cert"

bootstrap_signing_certs__ca_key_spec:
  algo: rsa
  size: 2048

bootstrap_signing_certs__ca_root_names:
  - C: "{{ bootstrap_signing_certs__ca_root.country }}"
    ST: "{{ bootstrap_signing_certs__ca_root.state }}"
    L: "{{ bootstrap_signing_certs__ca_root.locality }}"
    O: "{{ bootstrap_signing_certs__ca_root.organization }}"
    OU: "{{ bootstrap_signing_certs__ca_root.organizationalUnit }}"

bootstrap_signing_certs__ca_intermediate_default_profile: "intermediate_ca"
bootstrap_signing_certs__ca_cacert_default_profile: "server"

## ref: https://jite.eu/2019/2/6/ca-with-cfssl/
## ref: https://github.com/jason-riddle/generating-certs/wiki/Generating-a-Root-CA,-Server,-and-Client-Certs-using-CFSSL
## ref: https://github.com/entercloudsuite/ansible-cfssl/blob/master/defaults/main.yml
## ref: https://gist.github.com/jdeathe/7f7bb957a4e8e0304f0df070f3cbcbee
bootstrap_signing_certs__ca_intermediate_config_tpl:
  signing:
    default:
      expiry: 8760h
    profiles:
      intermediate_ca:
        ca_constraint:
          is_ca: true
#          max_path_len: 0
#          max_path_len_zero: true
        expiry: 43800h
        usages:
          - signing
          - digital signature
          - key encipherment
          - cert sign
          - crl sign
          - server auth
          - client auth
      domain:
        ca_constraint:
          is_ca: true
        expiry: 43800h
        usages:
          - signing
          - key encipherment
          - cert sign
          - crl sign
          - server auth
          - client auth
      cluster:
        ca_constraint:
          is_ca: true
        expiry: 8760h
        usages:
          - signing
          - key encipherment
          - cert sign
          - crl sign
          - server auth
          - client auth
      development:
        expiry: 8760h
        usages:
          - signing
          - key encipherment
          - cert sign
          - crl sign
        ca_constraint:
          is_ca: true
      server:
        expiry: 8760h
        usages:
        - signing
        - key encipherment
        - server auth
      client:
        expiry: 8760h
        usages:
        - signing
        - key encipherment
        - client auth
      client-server:
        expiry: 8760h
        usages:
        - signing
        - digital signing
        - key encipherment
        - server auth
        - client auth
      peer:
        expiry: 8760h
        usages:
        - signing
        - digital signing
        - key encipherment
        - server auth
        - client auth


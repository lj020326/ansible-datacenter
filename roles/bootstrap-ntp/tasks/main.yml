---

- name: "Init __ipaddr_version"
  set_fact:
    __ipaddr_version: "no-utils"

- name: "Get ansible.utils collection version information"
  set_fact:
    __ansible_utils_version: "{{ lookup('community.general.collection_version', 'ansible.utils') }}"

- name: "Display __ansible_utils_version"
  debug:
    var: __ansible_utils_version

## ipaddr filter lookup is in ansible.utils collection as of version 2.5.0
## ref: https://docs.ansible.com/ansible/latest/collections/ansible/utils/ipaddr_filter.html
- name: "Set __ipaddr_version to utils"
  when:
    - __ansible_utils_version is defined
    - (__ansible_utils_version=='*' or __ansible_utils_version is version('2.5.0', '>='))
  set_fact:
    __ipaddr_version: "utils"

- name: "Init {{ role_name }} vars with __ipaddr_version={{ __ipaddr_version }}"
  include_tasks: "init-vars-{{ __ipaddr_version }}.yml"
#  include_tasks: "init-vars-{{ ansible_version.major }}.yml"

## ref: https://stackoverflow.com/questions/30328506/check-if-service-exists-with-ansible
- name: "Populate service facts to determine if ntpd is installed"
  service_facts:

- name: "When chronyd is used, assert that the ntpd service is not installed/running"
  when:
    - bootstrap_ntp_daemon == 'chronyd'
    - services | d([]) | intersect(['ntpd', 'ntpd.service']) | list | length>0
  block:

  - name: "Ensure ntpd service is stopped and disabled"
    ignore_errors: yes
    service:
      name: "{{ item }}"
      state: stopped
      enabled: false
    loop:
      - ntpd
      - ntpd.service

  - name: "Ensure ntp package is uninstalled"
    package:
      name: ntp
      state: absent

- name: "Ensure ntp packages are installed."
  package:
    name: "{{ bootstrap_ntp_packages }}"
    state: present

- name: "Ensure {{ bootstrap_ntp_tzdata_package }} package is installed (Linux)."
  when: ansible_system == "Linux"
  package:
    name: "{{ bootstrap_ntp_tzdata_package }}"
    state: present

- name: "Set timezone to {{ bootstrap_ntp_timezone }}."
  timezone:
    name: "{{ bootstrap_ntp_timezone }}"
  notify: restart cron

- name: "Populate post-install service facts."
  service_facts:

- name: "Disable systemd-timesyncd if it's running but ntp is enabled."
  when:
    - bootstrap_ntp_enabled | bool
    - services | d([]) | intersect(['systemd-timesyncd', 'systemd-timesyncd.service']) | list | length>0
#    - '"systemd-timesyncd.service" in services'
    - services["systemd-timesyncd.service"]["status"] != "not-found"
  service:
    name: systemd-timesyncd.service
    enabled: false
    state: stopped

- name: "Ensure {{ bootstrap_ntp_daemon }} is stopped and disabled as configured."
  when: not (bootstrap_ntp_enabled | bool)
  ignore_errors: yes
  service:
    name: "{{ bootstrap_ntp_daemon }}"
    state: stopped
    enabled: false

- name: Generate ntp configuration file.
  when: bootstrap_ntp_manage_config | bool
  template:
    src: "{{ bootstrap_ntp_config_file | basename }}.j2"
    dest: "{{ bootstrap_ntp_config_file }}"
    mode: "0644"
    backup: yes
  notify: restart ntp

- name: "Ensure {{ bootstrap_ntp_daemon }} is running and enabled as configured."
  when: bootstrap_ntp_enabled | bool
  service:
    name: "{{ bootstrap_ntp_daemon }}"
    state: restarted
    enabled: true

- name: "Sync chronyc"
  when:
    - bootstrap_ntp_enabled | bool
    - bootstrap_ntp_daemon == 'chronyd'
    - bootstrap_ntp_role_action in ['all', 'sync']
  include_tasks: sync-chrony.yml

- name: "Sync ntp"
  when:
    - bootstrap_ntp_enabled | bool
    - bootstrap_ntp_daemon in ['ntp','ntpd']
    - bootstrap_ntp_role_action in ['all', 'sync']
  include_tasks: sync-ntp.yml

- name: "Test chronyc"
  when:
    - bootstrap_ntp_enabled | bool
    - bootstrap_ntp_daemon == 'chronyd'
    - bootstrap_ntp_role_action in ['all', 'test']
  include_tasks: test-chrony.yml

- name: "Test ntp"
  when:
    - bootstrap_ntp_enabled | bool
    - bootstrap_ntp_daemon in ['ntp','ntpd']
    - bootstrap_ntp_role_action in ['all', 'test']
  include_tasks: test-ntp.yml

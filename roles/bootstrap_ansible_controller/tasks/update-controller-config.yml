---
##
## Create organizations
##
- name: Organization block
  when: controller_organizations | d([]) | length > 0
  block:
    - name: Create organizations
      ansible.controller.organization:
        name: "{{ item['name'] | mandatory }}"
        description: "{{ item.description | d('') }}"
        # galaxy_credentials: "{{ galaxy_credentials | d([]) }}" # Have to create creds first, then associate w/ org
      loop: "{{ controller_organizations }}"
      loop_control:
        label: "{{ item['name'] }}"

- name: Credentials block
  block:
    - name: Create credential types
      when:
        - controller_credential_types | d([]) | length>0
      ansible.controller.credential_type:
        name: "{{ item['name'] | mandatory }}"
        description: "{{ item['description'] | d('') }}"
        kind: cloud
        inputs: "{{ item['inputs'] | d({}) }}"
        injectors: "{{ item['injectors'] | d({}) }}"
      loop: "{{ controller_credential_types }}"
      loop_control:
        label: "{{ item['name'] }}"

    - name: Unmask credentials
      ansible.builtin.set_fact:
        vaulted_credentials: "{{ _vaulted_credentials }}"
      no_log: true

    - name: Create org credentials
      when:
        - controller_credentials | d([]) | length>0
        - item['environments'] is not defined or controller_env.lower() in item['environments']
      ansible.controller.credential:
        name: "{{ item['name'] | mandatory }}"
        description: "{{ item['description'] | d('') }}"
        credential_type: "{{ item['credential_type'] | mandatory }}"
        organization: "{{ item['organization'] | d('') }}"
        inputs: "{{ item['inputs'] | d({}) }}"
      ignore_errors: "{{ ansible_check_mode }}"
      no_log: true
      loop: "{{ controller_credentials }}"
      loop_control:
        label: "{{ item['name'] }}"
      async: "{{ ansible_check_mode | ternary(0, __bootstrap_ansible_controller__async_max_runtime_in_seconds) }}"
      poll: 0
      register: __create_credential_async
      changed_when: not __create_credential_async.changed

    - name: Wait for async credential creation to finish
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      register: __async_credential_result
      loop: "{{ __create_credential_async.results }}"
      loop_control:
        label: "{{ item['item']['name'] }}"
      until: __async_credential_result.finished
      when: not ansible_check_mode and item.ansible_job_id is defined

    - name: Remask credentials
      ansible.builtin.set_fact:
        vaulted_credentials: "{{ vaulted_credentials | d({}) | combine(({item: 'MASKED'})) }}"
      loop: "{{ _vaulted_credentials.keys() | list }}"

- name: Add Galaxy credentials to organizations
  ansible.controller.organization:
    name: "{{ item['name'] | mandatory }}"
    galaxy_credentials: "{{ item['galaxy_credentials'] | d([]) }}"
  ignore_errors: "{{ ansible_check_mode }}"
  loop: "{{ controller_organizations }}"
  loop_control:
    label: "{{ item['name'] }}"

##
## Create local users
##

- name: Local users block
  block:
    - name: Unmask credentials
      ansible.builtin.set_fact:
        vaulted_credentials: "{{ _vaulted_credentials }}"
      no_log: true

    - name: Create users
      ansible.controller.user:
        username: "{{ item['username'] | mandatory }}"
        password: "{{ item['password'] | d(omit, true) }}"
        organization: "{{ item['organization'] | d(omit) }}"
      no_log: true
      loop: "{{ bootstrap_ansible_controller__local_users }}"

    - name: Remask credentials
      ansible.builtin.set_fact:
        vaulted_credentials: "{{ vaulted_credentials | d({}) | combine(({item: 'MASKED'})) }}"
      loop: "{{ _vaulted_credentials.keys() | list }}"

##
## Create teams
##

- name: Teams block
  block:
    - name: Create teams
      ansible.controller.team:
        name: "{{ item['team'] | mandatory }}"
        organization: "{{ item['organization'] | mandatory }}"
      ignore_errors: "{{ ansible_check_mode }}"
      loop: "{{ __org_team_list }}"
      loop_control:
        label: "{{ item['organization'] }} - {{ item['team'] }}"

##
## Add execution_environments
##

- name: Execution environments block
  block:
    - name: Add custom execution environments
      ansible.controller.execution_environment:
        name: "{{ item['name'] | mandatory }}"
        image: "{{ item['image'] | mandatory }}"
        credential: "{{ item['credential'] | d('') }}"
        pull: "{{ item['pull'] | d('missing') }}"
      loop: "{{ controller_execution_environments }}"

##
## Create projects
##

- name: Projects block
  block:
    - name: Create projects
      when:
        - __controller_projects | d([]) | length>0
        - item['environments'] is not defined or controller_env.lower() in item['environments']
      ansible.controller.project:
        name: "{{ item['name'] | mandatory }}"
        description: "{{ item['description'] | d('') }}"
        organization: "{{ item['organization'] | d('') }}"
        scm_type: "{{ item['scm_type'] | d('manual') }}"
        scm_branch: "{{ item['scm_branch'] | d('') }}"
        scm_url: "{{ item['scm_url'] | d('') }}"
        credential: "{{ item['credential'] | d(omit, true) }}"
        default_environment: "{{ item['default_environment'] | d(omit, true) }}"
        scm_update_on_launch: "{{ item['scm_update_on_launch'] | d(false) }}"
        scm_update_cache_timeout: "{{ item['scm_update_cache_timeout'] | d(0, true) }}"
        scm_clean: "{{ item['scm_clean'] | d(false) }}"
        allow_override: "{{ item['allow_override'] | d(false) }}"
      ignore_errors: "{{ ansible_check_mode }}"
      loop: "{{ __controller_projects }}"

##
## Create inventories
##

- name: Inventories block
  block:
    - name: Create inventories
      when:
        - __controller_inventories | d([]) | length>0
        - item['environments'] is not defined or controller_env.lower() in item['environments']
      ansible.builtin.include_tasks: create-inventory.yml
      ignore_errors: "{{ ansible_check_mode }}"
      loop: "{{ __controller_inventories }}"
      loop_control:
        loop_var: inventory_item

##
## Create notification templates
##

- name: Notification templates block
  when: bootstrap_ansible_controller__notification_templates | d([]) | length > 0
  block:
    - name: Create email notifications
      when:
        - bootstrap_ansible_controller__notification_templates | selectattr('notification_type', 'eq', 'email') | length > 0
        - item['environments'] is not defined or controller_env.lower() in item['environments']
      ansible.controller.notification_template:
        name: "{{ item['name'] | mandatory }}"
        description: "{{ item['description'] | d('') }}"
        organization: "{{ item['organization'] | mandatory }}"
        notification_type: email
        messages: "{{ item['messages'] | d({}) }}"
        notification_configuration: "{{ (item['email_settings'] | d(bootstrap_ansible_controller__default_email_notification_settings) |
          combine({'recipients': item['recipients']})) | d({}) }}"
      loop: "{{ bootstrap_ansible_controller__notification_templates | selectattr('notification_type', 'eq', 'email') }}"
      loop_control:
        label: "{{ item['name'] }}"

    - name: Create webhook notifications
      when:
        - bootstrap_ansible_controller__notification_templates | selectattr('notification_type', 'eq', 'webhook') | length > 0
        - item['environments'] is not defined or controller_env.lower() in item['environments']
      ansible.controller.notification_template:
        name: "{{ item['name'] | mandatory }}"
        description: "{{ item['description'] | d('') }}"
        organization: "{{ item['organization'] | mandatory }}"
        notification_type: webhook
        notification_configuration: "{{ item['notification_configuration'] | d({}) }}"
      loop: "{{ bootstrap_ansible_controller__notification_templates | selectattr('notification_type', 'eq', 'webhook') }}"
      loop_control:
        label: "{{ item['name'] }}"

##
## Create job_templates
##

- name: Job templates block
  block:

    ## getting timeout issues when running
    ## e.g.,
    ## msg: 'There was an unknown error when trying
    ##       to connect to https://aap.dev.dettonville.int/api/v2/credentials/?name=AAP+Bitbucket+Push+SSH+Key:
    ##       timeout The read operation timed out'
    ## ref: https://infracicd01.dev.s1.dettonville.int/jenkins/job/INFRA/job/ansible/job/SANDBOX/job/ansible-automation-platform/job/bootstrap-ansible-controller/39/consoleFull
    ##
    ## presumably this is since without batching the job is sending the API with 100+ job template definition updates
    ## all at once.
    ##
    ## According to the documentation, in order to run multiple asynchronous tasks
    ## while limiting the number of tasks running concurrently:
    ## ref: https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_async.html
    ## ref: https://dmsimard.com/2017/05/10/limiting-the-amount-of-concurrent-asynchronous-tasks-in-ansible/
    - name: "Create project job template items asynchronously in batches of {{ 
        __bootstrap_ansible_controller__async_max_batch_size }}"
      vars:
        _controller_job_templates_batch: "{{ item }}"
      ansible.builtin.include_tasks: update-job-template.yml
      loop: "{{ __controller_job_templates 
        | batch(__bootstrap_ansible_controller__async_max_batch_size) | list }}"

##
## Create workflow templates
##

- name: Workflow template block
  block:
    - name: Create workflow template
      when:
        - controller_workflow_templates | d([]) | length>0
        - item['environments'] is not defined or controller_env.lower() in item['environments']
      ansible.controller.workflow_job_template:
        name: "{{ item['name'] | mandatory }}"
        organization: "{{ item['organization'] | d('', true)}}"
        inventory: "{{ item['inventory'] | d('', true) }}"
        extra_vars: "{{ item['extra_vars'] | d({}, true) }}"
        workflow_nodes: "{{ item['workflow_nodes'] | d([], true) }}"
      loop: "{{ controller_workflow_templates }}"

##
## Create schedules
##

- name: Schedules block
  block:
    - name: Ensure schedules
      ansible.builtin.include_tasks: manage-schedules.yml
      loop: "{{ __controller_schedules }}"
      loop_control:
        loop_var: __schedule_loop_var
        label: "{{ __schedule_loop_var['schedule_name'] }}"
      when:
        - __controller_schedules | d([]) | length>0
        - __schedule_loop_var['environments'] is not defined or controller_env.lower() in __schedule_loop_var['environments']

##
## Create roles
##

- name: Roles block
  block:
    - name: Ensure roles
      ansible.builtin.include_tasks: manage-roles.yml
      loop: "{{ controller_organizations }}"
      loop_control:
        loop_var: __organization_loop_var
        label: "{{ __organization_loop_var['name'] }}"

- name: Set SAML settings
  ansible.controller.settings:
    settings: "{{ controller_saml_settings }}"

- name: Set general settings
  ansible.controller.settings:
    settings: "{{ controller_general_settings }}"

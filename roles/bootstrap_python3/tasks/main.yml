---
- name: Display __bootstrap_python__release
  ansible.builtin.debug:
    var: __bootstrap_python__release

- name: Set distribution specific vars
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
    - default.yml

- name: Installing Packages required by python
  ansible.builtin.package:
    name: "{{ __bootstrap_python__build_source_required_packages }}"
    state: present
#    state: latest
#    update_cache: true

- name: Check for existing python install
  ansible.builtin.stat:
    path: "{{ __bootstrap_python__python_bin_path }}"
  register: __python_path
#  ignore_errors: true

## ref: https://stackoverflow.com/questions/33094929/ansible-how-to-check-shell-output
- name: Check python version
  when: not __python_path.stat.exists
  ansible.builtin.command: python -V
  ignore_errors: true
  changed_when: false
  failed_when: false
  register: __current_python_version

- name: Check for existing python src dir
  when: not __python_path.stat.exists
  ansible.builtin.stat:
    path: "{{ __bootstrap_python__source_dir }}"
  register: bootstrap_python__source_dir_path
#  ignore_errors: true

## ref: https://github.com/ansible/ansible/issues/47927
- name: Unarchive source
  #  when: __current_python_version.stdout.find ('\"{{ bootstrap_python__release }}\"') == -1
  #  when: (not __python_path.stat.exists or bootstrap_python__release not in __current_python_version.stdout) and not bootstrap_python__source_dir_path.stat.exists
  when: not __python_path.stat.exists and not bootstrap_python__source_dir_path.stat.exists
  block:
    - name: Ensure directory at {{ bootstrap_python__source_dir }}
      ansible.builtin.file:
        path: "{{ bootstrap_python__source_dir }}"
        state: directory
        mode: "0755"

    - name: Unarchive source
      ansible.builtin.unarchive:
        src: "{{ __bootstrap_python__source_package_url }}"
        dest: "{{ bootstrap_python__source_dir }}"
        remote_src: true
      register: reg
      changed_when: false
      failed_when: false

- name: make
  when:
    - not __python_path.stat.exists
    - bootstrap_python__release not in __current_python_version.stdout
  #  ansible.builtin.shell: |
  #    cd {{ __bootstrap_python__source_dir }}
  #    && bash ./configure --enable-optimizations --shared --prefix={{ bootstrap_python__install_base_dir }}
  #    && make -j 8
  #    && make altinstall
  ansible.builtin.shell: |
    cd {{ __bootstrap_python__source_dir }} 
    && bash ./configure --enable-optimizations --prefix={{ bootstrap_python__install_base_dir }} 
    && make -j 8 
    && make altinstall
  changed_when: false
  failed_when: false
  become: true
#  become_method: ansible.builtin.sudo

- name: Check for existing pip
  ansible.builtin.stat:
    path: /usr/local/bin/pip{{ __bootstrap_python__python_major_version }}
  register: __pip_path
#  ignore_errors: true

- name: Setup pip for installed python
  when: not __pip_path.stat.exists
  ansible.builtin.include_tasks: install-pip.yml

- name: Create symbolic links to /usr/local/bin
  when: bootstrap_python__setup_symlinks|d(False)|bool
  ansible.builtin.file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  ignore_errors: true # noqa: ignore-errors
  changed_when: false
  failed_when: false
  loop:
    - src: /usr/local/bin/python{{ __bootstrap_python__release }}
      dest: /usr/local/bin/python{{ __bootstrap_python__python_major_version }}
    - src: /usr/local/bin/pip{{ __bootstrap_python__release }}
      dest: /usr/local/bin/pip{{ __bootstrap_python__python_major_version }}
#    - src: "/usr/local/bin/pyvenv-{{ __bootstrap_python__release }}"
#      dest: "/usr/local/bin/pyvenv"

- name: Install Virtualenv
  ansible.builtin.pip:
    name: virtualenv

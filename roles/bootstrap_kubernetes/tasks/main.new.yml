---
- name: Ensure base APT utilities and Python bindings are installed (no cache update yet)
  ansible.builtin.apt:
    name: "{{ bootstrap_kubernetes__packages }}"
    state: present
    # Do NOT run update_cache here, as it's the failing part we're trying to circumvent initially
  failed_when: false # Allow task to proceed even if minor apt issues occur, focus on cleanup

# --- Start: APT Repository Cleanup and Modern Key Management ---
# This section ensures that old, deprecated GPG keys and repository files
# are removed, as they can conflict with the modern 'signed-by' approach
# and cause "not signed" or "legacy trusted.gpg keyring" errors on Ubuntu 24.04+.

- name: Forcefully remove ALL GPG keys from the legacy trusted.gpg keyring (generic cleanup)
  ansible.builtin.shell:
    cmd: >
      apt-key list | grep -B 1 "expired: " | head -n 1 | awk '{print $1}' | xargs -r apt-key del &&
      apt-key list | grep -B 1 "revoked: " | head -n 1 | awk '{print $1}' | xargs -r apt-key del || true
  changed_when: true
  failed_when: false # Ignore if apt-key is not found or no keys to delete

- name: Remove old Kubernetes GPG key from trusted.gpg (if present - by ID)
  ansible.builtin.apt_key:
    id: "234654DA9A296436" # Kubernetes key ID from previous error logs
    state: absent
  failed_when: false # Ignore if the key is not found

- name: Remove all old Kubernetes repository sources files
  ansible.builtin.find:
    paths: /etc/apt/sources.list.d/
    patterns: '*kubernetes*.list,*k8s*.list'
  register: k8s_repo_files_to_remove

- name: Delete found Kubernetes repository sources files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ k8s_repo_files_to_remove.files }}"
  failed_when: false # Ignore if no files are found or deletion fails

- name: Force clean all APT lists (aggressive cleanup)
  ansible.builtin.command:
    cmd: rm -rf /var/lib/apt/lists/*
  changed_when: true # Always report as changed to trigger subsequent update_cache

- name: Run apt clean (standard cleanup)
  ansible.builtin.command:
    cmd: apt clean
  changed_when: true

- name: Create apt keyrings directory (if it doesn't exist)
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Display bootstrap_kubernetes__version_short_repo
  ansible.builtin.debug:
    var: bootstrap_kubernetes__version_short_repo

- name: Display bootstrap_kubernetes__apt_repo_url
  ansible.builtin.debug:
    var: bootstrap_kubernetes__apt_repo_url

- name: Test network connectivity to Kubernetes repository
  ansible.builtin.uri:
    url: "{{ bootstrap_kubernetes__apt_repo_url }}Release.key"
    method: GET
    status_code: 200
    timeout: 5
  register: connectivity_test_result
  failed_when: false
  changed_when: false

- name: Display connectivity test result
  ansible.builtin.debug:
    var: connectivity_test_result

- name: Download Kubernetes GPG key (ASCII-armored)
  ansible.builtin.get_url:
    url: "{{ bootstrap_kubernetes__apt_repo_url }}Release.key"
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    mode: '0644'
    owner: root
    group: root
    force: true
  register: download_k8s_key_result
  until: download_k8s_key_result is success
  retries: 5
  delay: 5

- name: Convert Kubernetes GPG key to binary format
  ansible.builtin.command:
    cmd: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /etc/apt/keyrings/kubernetes-apt-keyring.asc
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  changed_when: true

- name: Set permissions on Kubernetes keyring file
  ansible.builtin.file:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    mode: '0644'
    owner: root
    group: root

- name: Verify Kubernetes GPG key integrity
  ansible.builtin.command:
    cmd: gpg --keyring /etc/apt/keyrings/kubernetes-apt-keyring.gpg --list-keys 234654DA9A296436
  register: verify_key_result
  failed_when: verify_key_result.rc != 0
  changed_when: false

- name: Display GPG key verification result
  ansible.builtin.debug:
    var: verify_key_result

- name: Add Kubernetes GPG key to APT keyring (fallback)
  ansible.builtin.apt_key:
    file: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    state: present
  register: apt_key_add_result

- name: Display APT key addition result
  ansible.builtin.debug:
    var: apt_key_add_result

- name: Add Kubernetes APT repository
  ansible.builtin.copy:
    content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] {{ bootstrap_kubernetes__apt_repo_url }} /"
    dest: /etc/apt/sources.list.d/kubernetes.list
    owner: root
    group: root
    mode: '0644'
  register: k8s_repo_copy_result

- name: Display Kubernetes repository file content
  ansible.builtin.command:
    cmd: cat /etc/apt/sources.list.d/kubernetes.list
  register: k8s_repo_content
  changed_when: false

- name: Display Kubernetes repository file
  ansible.builtin.debug:
    var: k8s_repo_content

- name: Force APT to use IPv4 for pkgs.k8s.io
  ansible.builtin.copy:
    content: |
      Acquire::by-hash "yes";
      Acquire::ForceIPv4 "true";
    dest: /etc/apt/apt.conf.d/99force-ipv4-k8s
    owner: root
    group: root
    mode: '0644'

- name: Final apt update after all repositories and keys are configured
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 0 # Force a complete refresh
  retries: 5
  delay: 5
  register: apt_update_result
  until: apt_update_result is success
  failed_when: apt_update_result is failed and 'NO_PUBKEY' not in apt_update_result.msg

- name: Display apt update result
  ansible.builtin.debug:
    var: apt_update_result
  when: apt_update_result is failed

- name: Install kubelet, kubeadm, and kubectl
  ansible.builtin.apt:
    name:
      - kubelet={{ bootstrap_kubernetes__version }}
      - kubeadm={{ bootstrap_kubernetes__version }}
      - kubectl={{ bootstrap_kubernetes__version }}
    state: present
    allow_unauthenticated: false
    force_apt_get: true
  register: install_kubernetes_packages

- name: Hold kubelet, kubeadm, and kubectl packages to prevent updates
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Generate default containerd configuration
  ansible.builtin.command:
    cmd: containerd config default > /etc/containerd/config.toml
  changed_when: true

- name: Ensure CRI plugin is enabled in containerd configuration
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^disabled_plugins =.*'
    line: 'disabled_plugins = []'
    state: present
  notify: Restart containerd

- name: Set SystemdCgroup in containerd configuration
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    line: '  SystemdCgroup = true'
    insertafter: '\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]'
    state: present
  notify: Restart containerd

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Ensure firewalld is installed
  ansible.builtin.apt:
    name: firewalld
    state: present

- name: Ensure Kubernetes ports are open in firewalld
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: true
    state: enabled
    immediate: true
  loop:
    - 6443/tcp
    - 10250/tcp
  when: ansible_facts.services['firewalld.service'] is defined

- name: Disable swap
  ansible.posix.mount:
    name: swap
    fstype: swap
    state: absent

- name: Comment out swap in /etc/fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^(\S+\s+swap\s+.*)$'
    replace: '#\1'

- name: Enable kernel modules for Kubernetes
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - br_netfilter
    - overlay

- name: Ensure kernel modules are loaded at boot
  ansible.builtin.copy:
    content: |
      br_netfilter
      overlay
    dest: /etc/modules-load.d/k8s.conf
    owner: root
    group: root
    mode: '0644'

- name: Configure sysctl parameters for Kubernetes
  ansible.builtin.copy:
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
    dest: /etc/sysctl.d/k8s.conf
    owner: root
    group: root
    mode: '0644'

- name: Apply sysctl parameters
  ansible.builtin.command:
    cmd: sysctl --system
  changed_when: true

- name: Ensure Kubernetes admin user exists
  ansible.builtin.user:
    name: "{{ bootstrap_kubernetes__user }}"
    state: present
    create_home: true
    shell: /bin/bash
    system: false
  register: k8s_user_result

- name: Check if Kubernetes cluster is already initialized
  ansible.builtin.stat:
    path: /etc/kubernetes/admin.conf
  register: kubernetes_cluster_initialized

- name: Initialize Kubernetes cluster (master node)
  ansible.builtin.command:
    cmd: >
      kubeadm init
      --pod-network-cidr={{ bootstrap_kubernetes__pod_network_cidr }}
      --kubernetes-version={{ bootstrap_kubernetes__version_short }}
  args:
    creates: /etc/kubernetes/admin.conf
  when: not kubernetes_cluster_initialized.stat.exists
  register: kubeadm_init_result

- name: Create .kube directory for Kubernetes admin user
  ansible.builtin.file:
    path: "/home/{{ bootstrap_kubernetes__user }}/.kube"
    state: directory
    owner: "{{ bootstrap_kubernetes__user }}"
    group: "{{ bootstrap_kubernetes__user }}"
    mode: '0755'

- name: Copy admin.conf to Kubernetes admin user's .kube directory
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ bootstrap_kubernetes__user }}/.kube/config"
    remote_src: true
    owner: "{{ bootstrap_kubernetes__user }}"
    group: "{{ bootstrap_kubernetes__user }}"
    mode: '0644'

- name: Check if Calico CNI is already applied
  kubernetes.core.k8s_info:
    kind: DaemonSet
    name: calico-node
    namespace: kube-system
    kubeconfig: /etc/kubernetes/admin.conf
  register: calico_cni_applied

#- name: Check if Calico CNI is already applied
#  ansible.builtin.shell:
#    cmd: kubectl --kubeconfig=/etc/kubernetes/admin.conf get ds calico-node -n kube-system
#    executable: /bin/bash
#  register: calico_cni_applied
#  failed_when: false
#  changed_when: false

- name: Install Calico CNI
  ansible.builtin.shell:
    cmd: >
      kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f https://docs.tigera.io/calico/latest/manifests/calico.yaml
    executable: /bin/bash
  when: calico_cni_applied.failed
  register: calico_install_result
  changed_when: calico_install_result.rc == 0 and 'created' in calico_install_result.stdout

- name: Untaint master node if it's the only node
  ansible.builtin.command:
    cmd: >
      kubectl --kubeconfig=/etc/kubernetes/admin.conf taint nodes --all node-role.kubernetes.io/control-plane-
  when: inventory_hostname == groups['all'][0]
  changed_when: true
  failed_when:
    - not (untaint_result.stderr | regex_search("taint not found"))
    - untaint_result.rc != 0
  register: untaint_result

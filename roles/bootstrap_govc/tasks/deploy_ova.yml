---

- name: Check for existing VM
  ansible.builtin.command: "{{ bootstrap_govc__file }} vm.info {{ item.name |quote }}"
  environment:
    GOVC_HOST: "{{ bootstrap_govc__host }}"
    GOVC_URL: "https://{{ bootstrap_govc__host }}/sdk"
    GOVC_USERNAME: "{{ bootstrap_govc__username }}"
    GOVC_PASSWORD: "{{ bootstrap_govc__password }}"
    GOVC_INSECURE: "{{ bootstrap_govc__insecure }}"
    GOVC_DATASTORE: "{{ bootstrap_govc__datastore }}"
    GOVC_DATACENTER: "{{ bootstrap_govc__datacenter }}"
  changed_when: false
  register: __govc_vm_info
  loop: "{{ bootstrap_govc__ova_imports }}"

- name: Display __govc_vm_info
  ansible.builtin.debug:
    var: __govc_vm_info

# unless vm by this name already exists, import ova
- name: Import OVA
  when: "item.1.rc != 0 or 'UUID' not in item.1.stdout"
  changed_when: false
  ansible.builtin.command: >
    {{ bootstrap_govc__file }} import.ova
    {% if item.0.spec is defined %}
      -options={{ item.0.spec }}
    {% endif %}
    -name={{ item.0.name |quote }}
    {{ item.0.ova |quote }}
  environment:
    GOVC_HOST: "{{ bootstrap_govc__host }}"
    GOVC_URL: "https://{{ bootstrap_govc__host }}/sdk"
    GOVC_USERNAME: "{{ bootstrap_govc__username }}"
    GOVC_PASSWORD: "{{ bootstrap_govc__password }}"
    GOVC_INSECURE: "{{ bootstrap_govc__insecure }}"
    GOVC_DATASTORE: "{{ bootstrap_govc__datastore }}"
    GOVC_DATACENTER: "{{ bootstrap_govc__datacenter }}"
    GOVC_CLUSTER: "{{ bootstrap_govc__cluster }}"
  register: command_result
  with_together:
    - "{{ bootstrap_govc__ova_imports }}"
    - "{{ __govc_vm_info.results }}"

- name: Display command_result
  ansible.builtin.debug:
    var: command_result

- name: On Import Failed
  when: "item.skipped is defined and not item.skipped and item.rc != 0"
  ansible.builtin.fail:
    msg: "Failed to import vm {{ item.item.0.name }}"
  loop: "{{ command_result.results }}"

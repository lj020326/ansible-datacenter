# Copyright Â© 2017 VMware, Inc. All Rights Reserved.
# SPDX-License-Identifier: MIT OR GPL-3.0-only
---

- name: Check the current govc version (if any)
  ansible.builtin.command: "{{ bootstrap_govc__path }}/govc version"
  ignore_errors: true
  register: __govc_installed_version
  changed_when: false
  check_mode: false

- name: "Display __govc_installed_version"
  ansible.builtin.debug:
    var: __govc_installed_version

#- name: "Set __govc_version"
#  ansible.builtin.set_fact:
#    __govc_version: "{{ __govc_installed_version.stdout | regex_replace('^.* ([0-9\.]+)$', '\\1') }}"

- name: "Set __govc_version"
  ansible.builtin.set_fact:
    __govc_version: "{{ __govc_installed_version.stdout | regex_search('(\\d+(\\.\\d+)+)') }}"
  when:
    - __govc_installed_version.stdout is defined
    - __govc_installed_version.stdout | length > 0

- name: "Display __govc_version"
  ansible.builtin.debug:
    var: __govc_version

- name: "Display __govc_version is version"
  when: not __govc_installed_version.failed
  ansible.builtin.set_fact:
    __installed_version_does_not_match: "{{ __govc_version is version(bootstrap_govc__version, operator='!=') }}"

- name: "Set bootstrap_govc__reinstall_from_source"
  ansible.builtin.set_fact:
    bootstrap_govc__reinstall_from_source: "{{ __govc_installed_version.failed|d(False)
      or __installed_version_does_not_match|d(True) }}"

- name: "Display bootstrap_govc__reinstall_from_source"
  ansible.builtin.debug:
    var: bootstrap_govc__reinstall_from_source

- name: "Force govc install if not found or the version numbers do not match."
  when: bootstrap_govc__reinstall_from_source | bool
  block:

    - name: Download archive 32 bits
      when: "'32' in ansible_architecture"
      ansible.builtin.get_url:
        url: "{{ bootstrap_govc__download_url }}/govc_{{ ansible_system|lower }}_386.gz"
        dest: "{{ bootstrap_govc__tmp }}/govc-{{ bootstrap_govc__version }}.gz"
        validate_certs: false
        mode: "0644"

    - name: Download archive 64 bits
      when: "'64' in ansible_architecture"
      ansible.builtin.get_url:
        url: "{{ bootstrap_govc__download_url }}/govc_{{ ansible_system|lower }}_amd64.gz"
        dest: "{{ bootstrap_govc__tmp }}/govc-{{ bootstrap_govc__version }}.gz"
        validate_certs: false
        mode: "0644"

    - name: Uncompress govc binary
      changed_when: false
      ansible.builtin.command: "gunzip {{ bootstrap_govc__tmp }}/govc-{{ bootstrap_govc__version }}.gz"
      args:
        creates: "{{ bootstrap_govc__tmp }}/govc-{{ bootstrap_govc__version }}"

    - name: move govc into place
      changed_when: false
      ansible.builtin.command: |
        mv "{{ bootstrap_govc__tmp }}/govc-{{ bootstrap_govc__version }}" "{{ bootstrap_govc__file }}"

    - name: Ensure govc executable
      ansible.builtin.file:
        path: "{{ bootstrap_govc__file }}"
        mode: "0755"

- name: Verify installed govc version
  ansible.builtin.command: "{{ bootstrap_govc__path }}/govc version"
  ignore_errors: false
  register: __govc_version_installed
  changed_when: false

- name: "Display __govc_version_installed.stdout"
  ansible.builtin.debug:
    var: __govc_version_installed.stdout

- name: Assert correct installed version
  ansible.builtin.assert:
    that:
      - __govc_version_installed is not failed
      - __govc_version_installed.stdout is defined
      - bootstrap_govc__version in __govc_version_installed.stdout
  when: not ansible_check_mode

---
## blog: https://www.justai.net/blog/ansible-deploy-and-provision-a-packer-image-on-vmware/
## orig source: https://github.com/justai-net/ansible_vmware_deploy_provision.git
## ref: https://github.com/justai-net/ansible_vmware_deploy_provision/blob/master/deploy.yml

- name: "Bootstrap category related to new VMs"
  community.vmware.vmware_category:
    hostname: "{{ deploy_vm_vcenter_hostname }}"
    username: "{{ deploy_vm_vcenter_username }}"
    password: "{{ deploy_vm_vcenter_password }}"
    validate_certs: False
    category_name: "vm_new_machine"
    category_description: "Category for newly created VMs prior to bootstrap OS plays"
    category_cardinality: 'multiple'
    state: present
  register: vm_category_results

- name: "Display vm_category_results"
  ansible.builtin.debug:
    var: vm_category_results

- name: "Initialize all tags related to new VMs"
  community.vmware.vmware_tag:
    hostname: "{{ deploy_vm_vcenter_hostname }}"
    username: "{{ deploy_vm_vcenter_username }}"
    password: "{{ deploy_vm_vcenter_password }}"
    validate_certs: False
    category_id: "{{ vm_category_results.category_results.category_id }}"
    tag_name: "{{ item.tag_name }}"
    tag_description: "{{ item.tag_description }}"
    state: present
  loop: "{{ deploy_vm__tags_init_all }}"

- name: "Set __deploy_vm__vmware_vm_facts_initial"
  community.vmware.vmware_vm_info:
    hostname: "{{ deploy_vm_vcenter_hostname }}"
    username: "{{ deploy_vm_vcenter_username }}"
    password: "{{ deploy_vm_vcenter_password }}"
    validate_certs: False
    vm_type: vm
  register: __deploy_vm__vmware_vm_facts_initial

- name: "Display deploy_vm__vmware_vm_defaults"
  ansible.builtin.debug:
    var: deploy_vm__vmware_vm_defaults

- name: "Display deploy_vm_vmware_vm_list"
  ansible.builtin.debug:
    var: deploy_vm_vmware_vm_list

- name: "Set __deploy_vm__vmware_vm_info"
  ansible.builtin.set_fact:
    __deploy_vm__vmware_vm_info: "{{ __deploy_vm__vmware_vm_info | d({}) |
        combine( { item: deploy_vm__vmware_vm_defaults } ) |
        combine( { item: hostvars[item].deploy_vm__vmware_vm_config | d({}) }, recursive=True ) }}"
  loop: "{{ deploy_vm_vmware_vm_list }}"

- name: "Set static node IP on __deploy_vm__vmware_vm_info fact"
  ansible.builtin.set_fact:
    __deploy_vm__vmware_vm_info: "{{ __deploy_vm__vmware_vm_info | combine( { item: { 'ip': hostvars[item].bind_ipv4_address } }, recursive=True ) }}"
  when: hostvars[item].bind_ipv4_address is defined
  loop: "{{ deploy_vm_vmware_vm_list }}"

- name: "Display __deploy_vm__vmware_vm_info"
  ansible.builtin.debug:
    var: __deploy_vm__vmware_vm_info
#    verbosity: 1

- name: "Set __deploy_vm__vmware_vm_list fact"
  ansible.builtin.set_fact:
    __deploy_vm__vmware_vm_list: "{{ __deploy_vm__vmware_vm_list|d([]) + [ __deploy_vm__vmware_vm_info[item] ] }}"
  loop: "{{ __deploy_vm__vmware_vm_info | list }}"

- name: "Display __deploy_vm__vmware_vm_list"
  ansible.builtin.debug:
    var: __deploy_vm__vmware_vm_list
#    verbosity: 1

- name: "Set __deploy_vm__vmware_vm_facts_initial_by_name fact"
  ansible.builtin.set_fact:
    __deploy_vm__vmware_vm_facts_initial_by_name: "{{ __deploy_vm__vmware_vm_facts_initial_by_name|default({}) | combine( { item.guest_name: item } ) }}"
  loop: "{{ __deploy_vm__vmware_vm_facts_initial.virtual_machines }}"
  loop_control:
    label: "{{ item.guest_name }}"

- name: "Display __deploy_vm__vmware_vm_facts_initial_by_name"
  ansible.builtin.debug:
    var: __deploy_vm__vmware_vm_facts_initial_by_name
    verbosity: 1

- name: "Clone from Template and Customize Virtual Machine"
  community.vmware.vmware_guest:
    hostname: "{{ deploy_vm_vcenter_hostname }}"
    username: "{{ deploy_vm_vcenter_username }}"
    password: "{{ deploy_vm_vcenter_password }}"
    validate_certs: "{{ deploy_vm_vcenter_validate_certs }}"
    datacenter: "{{ item.datacenter | d(__deploy_vm__vmware_datacenter) }}"
    cluster: "{{ item.cluster | d(omit) }}"
    esxi_hostname: "{{ item.host if item.cluster is not defined else omit }}"
    folder: "{{ item.datastore_folder }}"
    name: "{{ item.name }}"
#    state: poweredon
#    state: poweredoff
    state: present
    ansible.builtin.template: "{{ deploy_vm_template_info[item.template_id].name }}"
    hardware: "{{ item.hardware }}"
    disk: "{{ item.disks }}"
    notes: "Deployed via Ansible - date: {{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    wait_for_ip_address: yes
    networks: "{{ item.networks | d(omit) }}"
    ## ref: https://github.com/ansible/ansible/issues/44159
    ## ref: https://github.com/ansible-collections/community.vmware/blob/main/plugins/modules/vmware_guest.py#L3237-L3244
    ## ref: https://stackoverflow.com/questions/69649638/ansible-vmware-guest-customization-spec-doesnt-change-anything-if-a-vm-is-alrea
    customization:
      existing_vm: yes
      hostname: "{{ item.hostname }}"
      domain: "{{ item.guest_domain | d(__deploy_vm__vmware_guest_domain) }}"
      dns_servers: "{{ item.dns_servers | d(__deploy_vm__vmware_vm_dns_nameservers) }}"
  loop: "{{ __deploy_vm__vmware_vm_list }}"
  loop_control:
    label: "{{ item.name }}"
  register: __deploy_vm_job_start
  when: __deploy_vm__vmware_vm_facts_initial_by_name[item.name] is not defined
  ## ref: https://www.virtualizationhowto.com/2020/07/ansible-deploy-multiple-vm-from-template-vmware/
  async: 2000
#  poll: 10
  poll: 0

- name: "Display __deploy_vm_job_start"
  ansible.builtin.debug:
    var: __deploy_vm_job_start
    verbosity: 1

- name: "Display __deploy_vm_job_start (not skipped)"
  when: not item.skipped|d(false)|bool
  ansible.builtin.debug:
    var: item
  loop: "{{ __deploy_vm_job_start.results }}"
  loop_control:
    label: "{{ item.item.name }}"

## ref: https://docs.ansible.com/ansible/latest/user_guide/playbooks_async.html
## ref: https://itspyworld.blogspot.com/2020/07/ansible-deploy-multiple-vm-from.html
## ref: https://blog.crisp.se/2018/01/27/maxwenzin/how-to-run-ansible-tasks-in-parallel
- name: Wait for VM creation to finish
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  loop: "{{ __deploy_vm_job_start.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when: item.ansible_job_id is defined
  register: __deploy_vm_job
  until: __deploy_vm_job.finished
  # Check every 5 seconds. Adjust as you like.
  delay: "{{ deploy_vm_create_async_delay }}"
  # Retry up to 10 times. Adjust as needed.
  retries: "{{ deploy_vm_create_async_retries }}"

- name: "Initialize __deploy_vm_job_results"
  ansible.builtin.set_fact:
    __deploy_vm_job_results: "{{ __deploy_vm_job.results | selectattr('changed','defined') | selectattr('changed', 'equalto', true) }}"

- name: "Display __deploy_vm_job_results"
  ansible.builtin.debug:
    var: __deploy_vm_job_results
    verbosity: 2

- name: "Initialize __deploy_vm_new_vm"
  ansible.builtin.set_fact:
    __deploy_vm_new_vm: {}

- name: "Set __deploy_vm_new_vm"
  ansible.builtin.set_fact:
    __deploy_vm_new_vm: "{{ __deploy_vm_new_vm|d({}) | combine( { item.item.item.name: item } ) }}"
  loop: "{{ __deploy_vm_job_results }}"
  loop_control:
    label: "{{ item.item.item.name }}"

- name: "Display __deploy_vm_new_vm"
  ansible.builtin.debug:
    var: __deploy_vm_new_vm
#    verbosity: 1

- name: "Set __deploy_vm__vmware_vm_facts"
  community.vmware.vmware_vm_info:
    hostname: "{{ deploy_vm_vcenter_hostname }}"
    username: "{{ deploy_vm_vcenter_username }}"
    password: "{{ deploy_vm_vcenter_password }}"
    validate_certs: False
    vm_type: vm
  register: __deploy_vm__vmware_vm_facts

- name: "Set __deploy_vmware_vm_info_by_name fact"
  ansible.builtin.set_fact:
     __deploy_vmware_vm_info_by_name: "{{  __deploy_vmware_vm_info_by_name|default({}) | combine( { item.guest_name: item } ) }}"
  loop: "{{ __deploy_vm__vmware_vm_facts.virtual_machines }}"
  loop_control:
    label: "{{ item.guest_name }}"

- name: "Configure new VMs"
  when:
    - __vm_info.os_flavor=='linux'
    - __deploy_vm_new_vm[__vm_info.name] is defined or __deploy_vmware_vm_info_by_name[__vm_info.name].power_state != "poweredOn"
  ansible.builtin.include_tasks: config-vmware-vm-linux.yml
  loop: "{{ __deploy_vm__vmware_vm_list }}"
  loop_control:
    loop_var: __vm_info
    label: "{{ __vm_info.name }}"

---
## blog: https://www.justai.net/blog/ansible-deploy-and-provision-a-packer-image-on-vmware/
## orig source: https://github.com/justai-net/ansible_vmware_deploy_provision.git
## ref: https://github.com/justai-net/ansible_vmware_deploy_provision/blob/master/deploy.yml

- name: "Gather vm_facts for all VMs in Virtual Center or ESXi."
  vmware_vm_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: False
  register: vm_facts

- name: "Set vmware_spec_node_info fact defaults"
  set_fact:
    vmware_spec_node_info: "{{ vmware_spec_node_info | d({}) | combine( { item: vmware_spec_defaults } ) }}"
  loop: "{{ groups['vmware_vm'] }}"

- name: "Set node specifics for vmware_spec_node_info fact"
  set_fact:
#    vmware_spec_node_info: "{{ vmware_spec_node_info | combine({ item: {'name': item, 'guest_domain': (hostvars[item]['vm_guest_domain']) } }, recursive=True ) | combine( { item: hostvars[item].vmware_node_info | d({}) }, recursive=True ) }}"
    vmware_spec_node_info: "{{ vmware_spec_node_info | combine( { item: hostvars[item].vmware_node_info | d({}) }, recursive=True ) }}"
  loop: "{{ groups['vmware_vm'] }}"

- name: "Set static node IP on vmware_spec_node_info fact"
  set_fact:
    vmware_spec_node_info: "{{ vmware_spec_node_info | combine( { item: { 'ip': hostvars[item].bind_ipv4_address } }, recursive=True ) }}"
  when:
    - vmware_spec_node_info[item].network_type == "static"
#    - hostvars[item].ansible_host is defined
    - hostvars[item].bind_ipv4_address is defined
  loop: "{{ groups['vmware_vm'] }}"

- name: "Display vmware_spec_node_info"
  debug:
      var: vmware_spec_node_info

- name: "Set vmware_spec_nodes fact"
  set_fact:
    vmware_spec_nodes: "{{ vmware_spec_nodes|default([]) + [ vmware_spec_node_info[item] ] }}"
  loop: "{{ vmware_spec_node_info | list }}"

- name: "Display vmware_spec_nodes"
  debug:
      var: vmware_spec_nodes

- name: "Set  vmware_vm_info_by_name fact"
  set_fact:
    virtual_machines_by_name: "{{ virtual_machines_by_name|default({}) | combine( { item.guest_name: item } ) }}"
  loop: "{{ vm_facts.virtual_machines }}"

- name: Display virtual_machines_by_name
  debug:
      var: virtual_machines_by_name

- name: "Clone from Template and Customize Virtual Machine"
  vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    datacenter: "{{ vmware_vm_datacenter }}"
    cluster: "{{ item.cluster | d(omit) }}"
    esxi_hostname: "{{ item.host if item.cluster is not defined else omit }}"
    folder: "{{ item.datastore_folder }}"
    name: "{{ item.name }}"
#    state: poweredon
#    state: poweredoff
    state: present
    template: "{{ deploy_vm_template_info[item.template_id].name }}"
    notes: "Deployed via Ansible - date: {{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    disk: "{{ item.disks }}"
    hardware: "{{ item.hardware }}"
    wait_for_ip_address: yes
  loop: "{{ vmware_spec_nodes }}"
#  delegate_to: localhost
  register: deploy_results
  when: virtual_machines_by_name[item.name] is not defined
  ## ref: https://www.virtualizationhowto.com/2020/07/ansible-deploy-multiple-vm-from-template-vmware/
  async: 2000
#  poll: 10
  poll: 0

- name: "Display deploy_results (initial)"
  debug:
      var: deploy_results

## ref: https://docs.ansible.com/ansible/latest/user_guide/playbooks_async.html
## ref: https://itspyworld.blogspot.com/2020/07/ansible-deploy-multiple-vm-from.html
## ref: https://blog.crisp.se/2018/01/27/maxwenzin/how-to-run-ansible-tasks-in-parallel
- name: Wait for VM creation to finish
  async_status:
    jid: "{{ item.ansible_job_id }}"
  loop: "{{ deploy_results.results }}"
  when: item.ansible_job_id is defined
  register: job_result
  until: job_result.finished
  # Check every 5 seconds. Adjust as you like.
  delay: "{{ deploy_vm_create_async_delay }}"
  # Retry up to 10 times. Adjust as needed.
  retries: "{{ deploy_vm_create_async_retries }}"

- name: "Display job_result"
  debug:
      var: job_result

- name: Gather vm_facts for VMs
  vmware_vm_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: False
  register: vm_facts

- name: "Set  vmware_vm_info_by_name fact"
  set_fact:
     vmware_vm_info_by_name: "{{  vmware_vm_info_by_name|default({}) | combine( { item.guest_name: item } ) }}"
  loop: "{{ vm_facts.virtual_machines }}"

- name: "Configure VMs"
  include_tasks: config_vm_vmware.yml
  loop: "{{ vmware_spec_nodes }}"
  loop_control:
    loop_var: vm_info

- name: "Set server_vm_static_ip for vm_groups fact"
  set_fact:
    vm_groups: "{{ vm_groups|default({}) | combine( { item.name: item.services + ['vmware_guest_auto', 'server_vm_static_ip'] } )  }}"
  when:
    - item.network_type == "static"
    - item.ip is defined
  with_items:
    - "{{ vmware_spec_nodes }}"

- name: "Set server_vm_dynamic_ip for vm_groups fact"
  set_fact:
    vm_groups: "{{ vm_groups|default({}) | combine( { item.name: item.services + ['vmware_guest_auto', 'server_vm_dynamic_ip'] } )  }}"
  when:
    - item.network_type == "dhcp"
#    - item.ip is not defined
  with_items:
    - "{{ vmware_spec_nodes }}"

- name: Display vm_groups
  debug:
    var: vm_groups

- name: "Add new static IP VM to dynamic inventory for further tasks"
  when: item.network_type == "static"
  add_host:
    name: "{{ item.name }}"
#    group: "{{ item.services }}"
#    groups: "{{ item.services + ['vmware_guest_auto', 'server_vm_dynamic_ip'] }}"
    groups: "{{ vm_groups[item.name] }}"
#    ansible_ssh_host: "{{  vmware_vm_info_by_name[item.name]['ip_address'] }}"
#    ansible_ssh_host: "{{ item.name }}.{{ item.guest_domain }}"
    ansible_ssh_host: "{{ hostvars[item.name]['ansible_default_ipv4']['address'] | d(hostvars[item.name]['ansible_all_ipv4_addresses'][0]) | d('') }}"
    ansible_ssh_port: "{{ ansible_ssh_port | d(omit) }}"
#    inventory_dir: "{{ inventory_dir }}"
    ansible_ssh_user: "{{ ansible_ssh_user | d(omit) }}"
    ansible_ssh_pass: "{{ ansible_ssh_pass | d(omit) }}"
    ansible_become_user: "{{ ansible_become_user | d(omit) }}"
    ansible_become_pass: "{{ ansible_become_pass | d(omit) }}"
    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
  changed_when: false
  with_items:
    - "{{ vmware_spec_nodes }}"

- name: "Add new DHCP VM to dynamic inventory for further tasks"
  when: item.network_type == "dhcp"
  add_host:
    name: "{{ item.name }}"
    groups: "{{ vm_groups[item.name] }}"
    ansible_ssh_host: "{{ item.name }}.{{ item.guest_domain }}"
    ansible_ssh_port: "{{ ansible_ssh_port | d(omit) }}"
    ansible_ssh_user: "{{ ansible_ssh_user | d(omit) }}"
    ansible_ssh_pass: "{{ ansible_ssh_pass | d(omit) }}"
    ansible_become_user: "{{ ansible_become_user | d(omit) }}"
    ansible_become_pass: "{{ ansible_become_pass | d(omit) }}"
    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
  changed_when: false
  with_items:
    - "{{ vmware_spec_nodes }}"

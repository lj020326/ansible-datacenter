---
## blog: https://www.justai.net/blog/ansible-deploy-and-provision-a-packer-image-on-vmware/
## orig source: https://github.com/justai-net/ansible_vmware_deploy_provision.git
## ref: https://github.com/justai-net/ansible_vmware_deploy_provision/blob/master/deploy.yml

- name: "Gather vm_facts for all VMs in Virtual Center or ESXi."
  vmware_vm_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: False
  register: __deploy_vm_facts_initial

- name: "Set __deploy_vm_spec_node_info fact defaults"
  set_fact:
    __deploy_vm_spec_node_info: "{{ __deploy_vm_spec_node_info | d({}) | combine( { item: vmware_spec_defaults } ) }}"
  loop: "{{ groups['vmware_vm'] }}"

- name: "Set node specifics for __deploy_vm_spec_node_info fact"
  set_fact:
#    __deploy_vm_spec_node_info: "{{ __deploy_vm_spec_node_info | combine({ item: {'name': item, 'guest_domain': (hostvars[item]['vm_guest_domain']) } }, recursive=True ) | combine( { item: hostvars[item].vmware_node_info | d({}) }, recursive=True ) }}"
    __deploy_vm_spec_node_info: "{{ __deploy_vm_spec_node_info | combine( { item: hostvars[item].vmware_node_info | d({}) }, recursive=True ) }}"
  loop: "{{ groups['vmware_vm'] }}"

- name: "Set static node IP on __deploy_vm_spec_node_info fact"
  set_fact:
    __deploy_vm_spec_node_info: "{{ __deploy_vm_spec_node_info | combine( { item: { 'ip': hostvars[item].bind_ipv4_address } }, recursive=True ) }}"
  when:
    - __deploy_vm_spec_node_info[item].network_type == "static"
#    - hostvars[item].ansible_host is defined
    - hostvars[item].bind_ipv4_address is defined
  loop: "{{ groups['vmware_vm'] }}"

- name: "Display __deploy_vm_spec_node_info"
  debug:
    var: __deploy_vm_spec_node_info

- name: "Set __deploy_vm_vmware_spec_list fact"
  set_fact:
    __deploy_vm_vmware_spec_list: "{{ __deploy_vm_vmware_spec_list|d([]) + [ __deploy_vm_spec_node_info[item] ] }}"
  loop: "{{ __deploy_vm_spec_node_info | list }}"

- name: "Display __deploy_vm_vmware_spec_list"
  debug:
    var: __deploy_vm_vmware_spec_list

- name: "Set __deploy_vm_facts_initial_by_name fact"
  set_fact:
    __deploy_vm_facts_initial_by_name: "{{ __deploy_vm_facts_initial_by_name|default({}) | combine( { item.guest_name: item } ) }}"
  loop: "{{ __deploy_vm_facts_initial.virtual_machines }}"
  loop_control:
    label: "{{ item.guest_name }}"

- name: Display __deploy_vm_facts_initial_by_name
  debug:
    var: __deploy_vm_facts_initial_by_name
    verbosity: 1

- name: "Clone from Template and Customize Virtual Machine"
  vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    datacenter: "{{ vmware_vm_datacenter }}"
    cluster: "{{ item.cluster | d(omit) }}"
    esxi_hostname: "{{ item.host if item.cluster is not defined else omit }}"
    folder: "{{ item.datastore_folder }}"
    name: "{{ item.name }}"
#    state: poweredon
#    state: poweredoff
    state: present
    template: "{{ deploy_vm_template_info[item.template_id].name }}"
    notes: "Deployed via Ansible - date: {{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    disk: "{{ item.disks }}"
    hardware: "{{ item.hardware }}"
    wait_for_ip_address: yes
  loop: "{{ __deploy_vm_vmware_spec_list }}"
  loop_control:
    label: "{{ item.name }}"
  register: __deploy_vm_job_start
  when: __deploy_vm_facts_initial_by_name[item.name] is not defined
  ## ref: https://www.virtualizationhowto.com/2020/07/ansible-deploy-multiple-vm-from-template-vmware/
  async: 2000
#  poll: 10
  poll: 0

- name: "Display __deploy_vm_job_start"
  debug:
    var: __deploy_vm_job_start
    verbosity: 1

- name: "Display __deploy_vm_job_start (not skipped)"
  when: not item.skipped|d(false)|bool
  debug:
    var: item
  loop: "{{ __deploy_vm_job_start.results }}"
  loop_control:
    label: "{{ item.item.name }}"

## ref: https://docs.ansible.com/ansible/latest/user_guide/playbooks_async.html
## ref: https://itspyworld.blogspot.com/2020/07/ansible-deploy-multiple-vm-from.html
## ref: https://blog.crisp.se/2018/01/27/maxwenzin/how-to-run-ansible-tasks-in-parallel
- name: Wait for VM creation to finish
  async_status:
    jid: "{{ item.ansible_job_id }}"
  loop: "{{ __deploy_vm_job_start.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when: item.ansible_job_id is defined
  register: __deploy_vm_job
  until: __deploy_vm_job.finished
  # Check every 5 seconds. Adjust as you like.
  delay: "{{ deploy_vm_create_async_delay }}"
  # Retry up to 10 times. Adjust as needed.
  retries: "{{ deploy_vm_create_async_retries }}"

- name: "Initialize __deploy_vm_new_vm"
  set_fact:
    __deploy_vm_job_results: "{{ __deploy_vm_job.results | selectattr('skipped','defined') | selectattr('skipped', 'equalto', false) }}"

- name: "Display __deploy_vm_job_results"
  debug:
    var: __deploy_vm_job_results
#    verbosity: 1

- name: "Initialize __deploy_vm_new_vm"
  set_fact:
    __deploy_vm_new_vm: {}

- name: "Set __deploy_vm_new_vm [1]"
  when:
    - not item.failed|d(false)|bool
    - not item.skipped|d(false)|bool
#    - item.changed|d(false)|bool
#    - item.finished|d(0)|int==1
  set_fact:
    __deploy_vm_new_vm: "{{ __deploy_vm_new_vm|default({}) | combine( { item.item.name: item.item } ) }}"
  loop: "{{ __deploy_vm_job_results }}"
  loop_control:
    label: "{{ item.item.name|d(item.name)|d(item) }}"
#    label: "{{ item.item.name }}"

- name: "Display __deploy_vm_new_vm [1]"
  debug:
    var: __deploy_vm_new_vm


- name: "Set __deploy_vm_new_vm [2]"
  set_fact:
    __deploy_vm_new_vm: "{{ __deploy_vm_new_vm | map('combine', { 'groups': deploy_vm_group_names } ) }}"

- name: "Display __deploy_vm_new_vm [2]"
  debug:
    var: __deploy_vm_new_vm


- name: Gather vm_facts for VMs
  vmware_vm_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: False
  register: __deploy_vm_facts

- name: "Set __deploy_vmware_vm_info_by_name fact"
  set_fact:
     __deploy_vmware_vm_info_by_name: "{{  __deploy_vmware_vm_info_by_name|default({}) | combine( { item.guest_name: item } ) }}"
  loop: "{{ __deploy_vm_facts.virtual_machines }}"
  loop_control:
    label: "{{ item.guest_name }}"

- name: "Initialize __deploy_vm_groups"
  set_fact:
    __deploy_vm_groups: {}

- name: "Set __deploy_vm_groups"
  when: __deploy_vm_new_vm[item.name] is defined
#  when: item.ip is defined
  set_fact:
    __deploy_vm_groups: "{{ __deploy_vm_groups|default({}) | combine(
      { item.name: item.services|d([]) +
        __deploy_vm_new_vm[item.name]['groups']|d([]) +
        ['deploy_vm_ip_' + item.network_type] | flatten
      } )  }}"
  loop: "{{ __deploy_vm_vmware_spec_list }}"
  loop_control:
    label: "{{ item.name }}"

- name: Display __deploy_vm_groups
  debug:
    var: __deploy_vm_groups

- name: "Configure newly deployed VMs"
  when: __deploy_vm_new_vm[item.name] is defined
  include_tasks: config-vm-vmware.yml
  loop: "{{ __deploy_vm_vmware_spec_list }}"
  loop_control:
    loop_var: vm_info
    label: "{{ item.name }}"

- name: "Add new VM to dynamic inventory for further tasks"
  when: __deploy_vm_new_vm[item.name] is defined
  add_host:
    name: "{{ item.name }}"
    groups: "{{ __deploy_vm_groups[item.name] | d(omit) }}"
    ansible_ssh_host: "{{ item.name }}.{{ item.guest_domain }}"
    ansible_ssh_port: "{{ ansible_ssh_port | d(omit) }}"
    ansible_ssh_user: "{{ ansible_ssh_user | d(omit) }}"
    ansible_ssh_pass: "{{ ansible_ssh_pass | d(omit) }}"
    ansible_become_user: "{{ ansible_become_user | d(omit) }}"
    ansible_become_pass: "{{ ansible_become_pass | d(omit) }}"
    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
  changed_when: false
  loop: "{{ __deploy_vm_vmware_spec_list }}"
  loop_control:
    loop_var: vm_info
    label: "{{ item.name }}"

#- name: "Add new static IP VM to dynamic inventory for further tasks"
#  when: item.network_type == "static"
#  add_host:
#    name: "{{ item.name }}"
#    groups: "{{ __deploy_vm_groups[item.name] }}"
##    ansible_ssh_host: "{{  __deploy_vmware_vm_info_by_name[item.name]['ip_address'] }}"
##    ansible_ssh_host: "{{ item.name }}.{{ item.guest_domain }}"
#    ansible_ssh_host: "{{ hostvars[item.name]['ansible_default_ipv4']['address'] | d(hostvars[item.name]['ansible_all_ipv4_addresses'][0]) | d('') }}"
#    ansible_ssh_port: "{{ ansible_ssh_port | d(omit) }}"
#    ansible_ssh_user: "{{ ansible_ssh_user | d(omit) }}"
#    ansible_ssh_pass: "{{ ansible_ssh_pass | d(omit) }}"
#    ansible_become_user: "{{ ansible_become_user | d(omit) }}"
#    ansible_become_pass: "{{ ansible_become_pass | d(omit) }}"
#    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
#  changed_when: false
#  loop: "{{ __deploy_vm_vmware_spec_list }}"
#
#- name: "Add new DHCP VM to dynamic inventory for further tasks"
#  when: item.network_type == "dhcp"
#  add_host:
#    name: "{{ item.name }}"
#    groups: "{{ __deploy_vm_groups[item.name] }}"
#    ansible_ssh_host: "{{ item.name }}.{{ item.guest_domain }}"
#    ansible_ssh_port: "{{ ansible_ssh_port | d(omit) }}"
#    ansible_ssh_user: "{{ ansible_ssh_user | d(omit) }}"
#    ansible_ssh_pass: "{{ ansible_ssh_pass | d(omit) }}"
#    ansible_become_user: "{{ ansible_become_user | d(omit) }}"
#    ansible_become_pass: "{{ ansible_become_pass | d(omit) }}"
#    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'
#  changed_when: false
#  loop: "{{ __deploy_vm_vmware_spec_list }}"

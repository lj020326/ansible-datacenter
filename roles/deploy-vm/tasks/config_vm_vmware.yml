---

- name: "config_vm_vmware:{{ vm_info.name }} | Display vm_info"
  debug:
      var: vm_info

- name: "config_vm_vmware:{{ vm_info.name }} | Display  vmware_vm_info_by_name[vm_info.name]"
  debug:
      var:  vmware_vm_info_by_name[vm_info.name]

- name: "config_vm_vmware:{{ vm_info.name }} | Power on Virtual Machine"
  when:  vmware_vm_info_by_name[vm_info.name].power_state != "poweredOn"
  vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    datacenter: "{{ vmware_vm_datacenter }}"
    name: "{{ vm_info.name }}"
    state: poweredon
    wait_for_ip_address: yes

- name: "config_vm_vmware:{{ vm_info.name }} | Gather VM info for {{ vm_info.name }}"
  vmware_guest_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    datacenter: "{{ vmware_vm_datacenter }}"
    schema: "vsphere"
    uuid: "{{  vmware_vm_info_by_name[vm_info.name].uuid }}"
#  delegate_to: localhost
  register: vm_guest_info

#- name: "config_vm_vmware:{{ vm_info.name }} | Display vm_guest_info"
#  debug:
#      var: vm_guest_info

- name: "config_vm_vmware:{{ vm_info.name }} | Get vm path info"
  set_fact:
#    vmPathName: "deploy.hw_files | select('match','.*\.vmx') | list | first"
    vmPathName: "{{ vm_guest_info.instance.config.files.vmPathName }}"
    vmPathDir: "{{ vm_guest_info.instance.config.files.vmPathName.split(' ')[1].split('/')[:-2] | join('/') }}"

- name: "config_vm_vmware:{{ vm_info.name }} | Display vm path info"
  debug:
    msg:
      - "vmPathName={{ vmPathName }}"
      - "vmPathDir={{ vmPathDir }}"
      - "vm_info.datastore_folder={{ vm_info.datastore_folder }}"

## ref: https://rutgerblom.com/2020/07/27/automated-ubuntu-server-20-04-installation-with-ansible/
- name: "config_vm_vmware:{{ vm_info.name }} | Move vm from {{ vmPathName }} to {{ vm_info.datastore_folder }}"
  when:
    - vmPathDir != vm_info.datastore_folder
  block:

    - name: "config_vm_vmware:{{ vm_info.name }} | Set powerstate of a virtual machine to poweredoff"
      vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        name: "{{ vm_info.name }}"
        state: poweredoff

    - name: "config_vm_vmware:{{ vm_info.name }} | Unregister VM"
      command: "govc vm.unregister {{ vm_info.name }}"
      environment: "{{ govc_environment }}"

    ## ref: https://opensourcelibs.com/lib/govc
    - name: "config_vm_vmware:{{ vm_info.name }} | Create directory {{ vm_info.datastore_folder }} on VM datastore {{ vm_info.datastore }}"
      command: "govc datastore.mkdir -p -ds={{ vm_info.datastore }} {{ vm_info.datastore_folder }}"
      environment: "{{ govc_environment }}"

    - name: "config_vm_vmware:{{ vm_info.name }} | Move VM datastore folder to {{ vm_info.datastore_folder }}"
      command: "govc datastore.mv -f -ds={{ vm_info.datastore }} {{ vm_info.name }} {{ vm_info.datastore_folder }}/{{ vm_info.name }}"
      environment: "{{ govc_environment }}"

    - name: "config_vm_vmware:{{ vm_info.name }} | Register VM"
      command: "govc vm.register -template=false -ds={{ vm_info.datastore }} -folder={{ vm_info.folder }} -host={{ vm_info.host }} {{ vm_info.datastore_folder }}/{{ vm_info.name }}/{{ vm_info.name }}.vmx"
      environment: "{{ govc_environment }}"

    ## ref: https://docs.openshift.com/container-platform/3.6/install_config/configuring_vsphere.html#vsphere-enabling
    ## ref: https://docs.vmware.com/en/VMware-Workstation-Pro/16.0/com.vmware.ws.using.doc/GUID-E601BE81-59B5-4B6C-BD96-2E1F41CBBDB2.html
    ## ref: https://github.com/ansible/ansible/commit/d23da2e4943642b007b4e46971244bd66917d4ec
    ## [root@esx02:~] cat /vmfs/volumes/54453819-a19ddd4c-aa71-001ec956143b/vm/vm02/vm02.vmx
    - name: "config_vm_vmware:{{ vm_info.name }} | Update VM UUID action to keep"
      command: "govc vm.change -e='uuid.action=keep' -vm={{ vm_info.name }}"
      environment: "{{ govc_environment }}"

    - name: "config_vm_vmware:{{ vm_info.name }} | Set powerstate of a virtual machine to poweredon"
      vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        name: "{{ vm_info.name }}"
        state: poweredon
        wait_for_ip_address: yes

##
## ref: https://docs.ansible.com/ansible/latest/collections/community/vmware/vmware_guest_disk_module.html
## eventually should be able to add RDM disk to VM if/when this PR gets merged:
##
##		https://github.com/ansible-collections/community.vmware/pull/449
##		https://github.com/ansible/ansible/issues/24837
##		https://github.com/ansible/ansible/pull/62394
##		https://github.com/ansible/ansible/pull/66648
##

#- name: "config_vm_vmware:{{ vm_info.name }} | Add disk to virtual machine"
#  when: vm_info.disk is defined
#  vmware_guest_disk:
#    hostname: "{{ vcenter_hostname }}"
#    username: "{{ vcenter_username }}"
#    password: "{{ vcenter_password }}"
#    validate_certs: no
#    name: "{{ vm_info.name }}"
#    state: poweredon
#    wait_for_ip_address: yes


- name: "config_vm_vmware:{{ vm_info.name }} | Display inputs to conditional block to configure netplan / hostname"
  debug:
    msg:
      - "vm_guest_info.instance.summary.runtime.powerState={{vm_guest_info.instance.summary.runtime.powerState}}"
      - "vm_info.network_type={{vm_info.network_type}}"
      - "vm_info.ip={{vm_info.ip|d('')}}"
      - "vm_guest_info.instance.guest.hostName={{vm_guest_info.instance.guest.hostName}}"
      - "vm_guest_info.instance.guest.ipAddress={{vm_guest_info.instance.guest.ipAddress}}"
      - "vm_guest_info.instance.config.guestId={{vm_guest_info.instance.config.guestId}}"

## ref: https://rutgerblom.com/2020/07/27/automated-ubuntu-server-20-04-installation-with-ansible/
- name: "config_vm_vmware:{{ vm_info.name }} | Configure netplan on new machine"
  when:
    - vm_guest_info.instance.summary.runtime.powerState=="poweredOn"
    - vm_info.network_type == "static"
    - vm_info.ip is defined
    - vm_guest_info.instance.guest.ipAddress != vm_info.ip
    - "'ubuntu' in vm_guest_info.instance.config.guestId"
  block:

    - name: "config_vm_vmware:{{ vm_info.name }} | Create working directory on Ansible Controller"
      file:
        path: "{{ deploy_vm_workdir }}"
        state: directory

    - name: "config_vm_vmware:{{ vm_info.name }} | Copy network configuration file to working directory at {{ deploy_vm_workdir }}"
      template:
        src: "netplan.yml.j2"
        dest: "{{ deploy_vm_workdir }}/00-installer-config.yaml"
#        dest: "{{ deploy_vm_workdir }}/01-netcfg.yaml"

    - name: "config_vm_vmware:{{ vm_info.name }} | Copy network configuration file to Ubuntu VM"
      vmware_guest_file_operation:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        vm_id: "{{ vm_info.name }}"
#        vm_id: "{{ vm_info.uuid }}"
#        vm_id_type: "uuid"
        vm_username: "{{ deploy_vm_username }}"
        vm_password: "{{ deploy_vm_password }}"
        copy:
#            src: "{{ deploy_vm_workdir }}/01-netcfg.yaml"
#            dest: "/home/{{ deploy_vm_username }}/01-netcfg.yaml"
            src: "{{ deploy_vm_workdir }}/00-installer-config.yaml"
            dest: "/home/{{ deploy_vm_username }}/00-installer-config.yaml"

    - name: "config_vm_vmware:{{ vm_info.name }} | Move network configuration file to right location on Ubuntu VM"
      vmware_vm_shell:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        vm_id: "{{ vm_info.name }}"
        vm_username: "{{ deploy_vm_username }}"
        vm_password: "{{ deploy_vm_password }}"
        vm_shell: /usr/bin/sudo
#        vm_shell_args: "mv /home/{{ deploy_vm_username }}/01-netcfg.yaml /etc/netplan/01-netcfg.yaml && chown root.root /etc/netplan/01-netcfg.yaml"
        vm_shell_args: "mv /home/{{ deploy_vm_username }}/00-installer-config.yaml /etc/netplan/00-installer-config.yaml && chown root.root /etc/netplan/00-installer-config.yaml"

    ## ref: https://cloudinit.readthedocs.io/en/latest/topics/faq.html
    - name: "config_vm_vmware:{{ vm_info.name }} | Apply the netplan network configuration on Ubuntu VM"
      vmware_vm_shell:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        vm_id: "{{ vm_info.name }}"
        vm_username: "{{ deploy_vm_username }}"
        vm_password: "{{ deploy_vm_password }}"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "netplan apply"

    - name: "config_vm_vmware:{{ vm_info.name }} | Delete working directory on Ansible controller"
      file:
        path: "{{ deploy_vm_workdir }}"
        state: absent

- name: "config_vm_vmware:{{ vm_info.name }} | Configure hostname on new machine"
  when:
    - vm_guest_info.instance.summary.runtime.powerState=="poweredOn"
    - vm_guest_info.instance.guest.hostName != vm_info.name
  block:

    - name: "config_vm_vmware:{{ vm_info.name }} | Change hostname of guest machine"
      vmware_vm_shell:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        vm_id: "{{ vm_info.name }}"
        vm_username: "{{ deploy_vm_username }}"
        vm_password: "{{ deploy_vm_password }}"
        vm_shell: /usr/bin/sudo
#        vm_shell_args: "hostnamectl set-hostname {{ vm_info.name }}.{{ vm_info.guest_domain }} > /tmp/$$.txt 2>&1"
        vm_shell_args: "hostnamectl set-hostname {{ vm_info.name }} > /tmp/$$.txt 2>&1"

    - name: "config_vm_vmware:{{ vm_info.name }} | Change /etc/hosts of guest machine"
      vmware_vm_shell:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        vm_id: "{{ vm_info.name }}"
        vm_username: "{{ deploy_vm_username }}"
        vm_password: "{{ deploy_vm_password }}"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "sed -i -E 's/^127.0.0.1(\\s*)(.*)/127.0.0.1\\1{{ vm_info.name }}.{{ vm_info.guest_domain }} {{ vm_info.name }} \\2/' /etc/hosts"

    - name: "config_vm_vmware:{{ vm_info.name }} | Restart network service of guest machine"
      vmware_vm_shell:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        vm_id: "{{ vm_info.name }}"
        vm_username: "{{ deploy_vm_username }}"
        vm_password: "{{ deploy_vm_password }}"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "systemctl restart {{ deploy_vm_template_info[vm_info.template_id].network_service }}"


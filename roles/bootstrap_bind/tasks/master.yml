# roles/bind/tasks/master.yml
# Set up a BIND master server
---
#- name: display bind_zone_hosts_dynamic
#  ansible.builtin.debug: var=bind_zone_hosts_dynamic

#- name: display bind_zone_hosts
#  ansible.builtin.debug:
#    var: bind_zone_hosts

- name: Display bind_zone_domains
  ansible.builtin.debug:
    var: bind_zone_domains

- name: Display bind_zone_name
  ansible.builtin.debug:
    var: bind_zone_name

- name: Set bind_domain_group
  ansible.builtin.set_fact:
    bind_domain_group: ca_domain_{{ '_'.join( bind_zone_name.split('.')|reverse ) }}

- name: Display bind_domain_group
  ansible.builtin.debug:
    var: bind_domain_group

- name: Display groups[bind_domain_group]
  ansible.builtin.debug:
    var: groups[bind_domain_group]

- name: Read forward zone hashes
  ansible.builtin.shell: grep -s "^; Hash:" {{ bind_zone_dir }}/{% if bind_enable_views is sameas true %}{{ item.view }}_{% endif %}{{ item.name }} || true
  changed_when: false
  check_mode: false
  register: forward_hashes_temp
  #  loop:
  #    - "{{ bind_zone_domains }}"
  loop: "{{ bind_zone_domains }}"
  run_once: true
  loop_control:
    label: "{{ item.name }}"

- name: create dict of forward hashes
  ansible.builtin.set_fact:
    forward_hashes: "{{ forward_hashes|default([]) + [ {'hash': item.stdout|default(), 'name': item.item.name} ] }}"
  loop:
    - "{{ forward_hashes_temp.results }}"
  run_once: true
  loop_control:
    label: "{{ item.item.name }}"

- name: Read reverse ipv4 zone hashes
  run_once: true
  ansible.builtin.shell: grep -s "^; Hash:" {{ bind_zone_dir }}/{% if bind_enable_views is sameas true %}{{ item.0.view }}_{% endif %}{{ ('.'.join(item.1.replace(item.1+'.','').split('.')[::-1]))
    }}.in-addr.arpa || true
  changed_when: false
  check_mode: false
  register: reverse_hashes_temp
  with_subelements:
    - "{{ bind_zone_domains }}"
    - networks
    - flags:
      skip_missing: true
  loop_control:
    label: "{{ item.1 }}"

#- ansible.builtin.debug:
#    var: reverse_hashes_temp

- name: create dict of reverse hashes
  ansible.builtin.set_fact:
    reverse_hashes: "{{ reverse_hashes|default([]) + [ {'hash': item.0.stdout|default(), 'network': item.1} ] }}"
  with_subelements:
    - "{{ reverse_hashes_temp.results }}"
    - item
  run_once: true
  loop_control:
    label: "{{ item.1.name |default(item.0.cmd.split(' ')[4]) }}"

#- ansible.builtin.debug:
#    var: reverse_hashes

- name: Read reverse ipv6 zone hashes
  ansible.builtin.shell: grep -s "^; Hash:" {{ bind_zone_dir }}/{% if bind_enable_views is sameas true %}{{ item.0.view }}_{% endif %}{{ (item.1 | ansible.utils.ipaddr('revdns'))[-(9+(item.1|regex_replace('^.*/','')|int)//2):-1]
    }} || true
  changed_when: false
  check_mode: false
  register: reverse_hashes_ipv6_temp
  with_subelements:
    - "{{ bind_zone_domains }}"
    - ipv6_networks
    - flags:
      skip_missing: true
  run_once: true
  loop_control:
    label: "{{ item.1 }}"

- name: create dict of reverse ipv6 hashes
  ansible.builtin.set_fact:
    reverse_hashes_ipv6: "{{ reverse_hashes_ipv6|default([]) + [ {'hash': item.0.stdout|default(), 'network': item.1} ] }}"
  with_subelements:
    - "{{ reverse_hashes_ipv6_temp.results }}"
    - item
  run_once: true
  loop_control:
    label: "{{ item.1.name |default(item.0.cmd.split(' ')[4]) }}"

- name: Master | Main BIND config file (master)
  ansible.builtin.template:
    src: etc_named.conf.j2
    dest: "{{ bind_config }}"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "0640"
    setype: named_conf_t
    validate: named-checkconf %s
    backup: "{{ bind_backup_conf }}"
  notify: reload bind
  tags: bind

- name: Master | Create forward lookup zone file
  ansible.builtin.template:
    src: bind_zone.j2
    dest: "{{ bind_zone_dir }}/{% if bind_enable_views is sameas true %}{{ item.view }}_{% endif %}{{ item.name }}"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "{{ bind_zone_file_mode }}"
    setype: named_zone_t
    validate: named-checkzone -d {{ item.name }} %s
    backup: "{{ bind_backup_conf }}"
  loop: "{{ bind_zone_domains }}"
  loop_control:
    label: "{{ item.name }}"
  notify: reload bind
  tags: bind

- name: Master | Create reverse lookup zone file
  ansible.builtin.template:
    src: reverse_zone.j2
    dest: "{{ bind_zone_dir }}/{% if bind_enable_views is sameas true %}{{ item.0.view }}_{% endif %}{{ ('.'.join(item.1.replace(item.1+'.','').split('.')[::-1]))
      }}.in-addr.arpa"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "{{ bind_zone_file_mode }}"
    setype: named_zone_t
    validate: named-checkzone {{ ('.'.join(item.1.replace(item.1+'.','').split('.')[::-1])) }}.in-addr.arpa %s
    backup: "{{ bind_backup_conf }}"
  with_subelements:
    - "{{ bind_zone_domains }}"
    - networks
    - flags:
      skip_missing: true
  loop_control:
    label: "{{ item.1 }}"
  notify: reload bind
  tags: bind

- name: Master | Create reverse IPv6 lookup zone file
  ansible.builtin.template:
    src: reverse_zone_ipv6.j2
    dest: "{{bind_zone_dir}}/{% if bind_enable_views is sameas true %}{{ item.0.view }}_{% endif %}{{ (item.1 | ansible.utils.ipaddr('revdns'))[-(9+(item.1|regex_replace('^.*/','')|int)//2):-1]
      }}"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "{{ bind_zone_file_mode }}"
    setype: named_zone_t
    validate: named-checkzone {{ (item.1 | ansible.utils.ipaddr('revdns'))[-(9+(item.1|regex_replace('^.*/','')|int)//2):] }} %s
    backup: "{{ bind_backup_conf }}"
  with_subelements:
    - "{{ bind_zone_domains }}"
    - ipv6_networks
    - flags:
      skip_missing: true
  loop_control:
    label: "{{ item.1 }}"
  notify: reload bind
  tags: bind

---

- name: "Set OS specific variables"
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version|lower }}.yml"
    - "{{ ansible_distribution|lower }}.yml"
    - "{{ ansible_os_family|lower }}.yml"
    - default.yml

- name: "Install netplan packages"
  when:
    - bootstrap_netplan__check_install|bool
    - bootstrap_netplan__packages|d([])|length>0
  ansible.builtin.package:
    name: "{{ bootstrap_netplan__packages }}"
    state: present
  become: true
  register: result
  until: result is successful

- name: "Remove existing configurations"
  when: bootstrap_netplan__remove_existing|bool
  ansible.builtin.import_tasks: remove-existing.yml

- name: "Display bootstrap_netplan__configuration"
  ansible.builtin.debug:
    var: bootstrap_netplan__configuration
#    verbosity: 1

- name: "Ensure netplan configuration"
  when: bootstrap_netplan__configuration|length>0
  ansible.builtin.template:
    src: config.yml.j2
    dest: "{{ bootstrap_netplan__config_file }}"
    mode: "0600"
  become: true
  notify: netplan generate config

- name: "Ensure DHCP netplan configuration"
  when:
    - bootstrap_netplan__configuration | length == 0
    - __bootstrap_netplan__netplan_interfaces | length > 0
  block:
    - name: "Display __bootstrap_netplan__netplan_interfaces"
      ansible.builtin.debug:
        var: __bootstrap_netplan__netplan_interfaces

    - name: "Ensure DHCP netplan configuration"
      ansible.builtin.template:
        src: netplan-dhcp.yml.j2
        dest: "{{ bootstrap_netplan__config_file }}"
        mode: "0600"
      become: true
      notify: netplan generate config

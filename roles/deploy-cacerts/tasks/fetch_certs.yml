---

- set_fact:
    __log_prefix_fetch: "Deploy CA Certs | Fetch certs |"
    
- name: "{{ __log_prefix_fetch }} Display cert and key dir info"
  debug:
    var: "{{ item }}"
  loop:
    - deploy_cacerts__cacert_local_cert_dir
    - deploy_cacerts__cacert_local_key_dir
    - deploy_cacerts__ca_key_dir

- name: "{{ __log_prefix_fetch }} Remove all existing old CA certs and keys"
  when: deploy_cacerts__ca_reset_local_certs|bool
  file:
    state: absent
    path: "{{ item }}"
  loop:
    - "{{ deploy_cacerts__cacert_local_cert_dir }}"
    - "{{ deploy_cacerts__cacert_local_key_dir }}"
    - "{{ deploy_cacerts__ca_key_dir }}"

- name: "{{ __log_prefix_fetch }} Ensure local cert dirs exist"
  file:
    state: directory
    path: "{{ item }}"
  loop:
    - "{{ deploy_cacerts__cacert_local_cert_dir }}"
    - "{{ deploy_cacerts__cacert_local_key_dir }}"
    - "{{ deploy_cacerts__ca_key_dir }}"

- name: "{{ __log_prefix_fetch }} fetch host cert/key from keystore"
  when: not deploy_cacerts__using_stepca|d(False)|bool
  block:

    - name: "{{ __log_prefix_fetch }} fetch host cert/key from keystore"
      ansible.builtin.include_tasks: slurp_from_to.yml
      loop_control:
        loop_var: __copy_from_to_info
      loop:
        - src: "{{ deploy_cacerts__keystore_cert_base_dir }}/{{ deploy_cacerts__ca_root_cn }}/{{ deploy_cacerts__pki_caroot_cert }}"
          dest: "{{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__pki_caroot_cert }}"
        - src: "{{ deploy_cacerts__keystore_cert_base_dir }}/{{ deploy_cacerts__ca_domain }}/{{ deploy_cacerts__hostname_full }}.pem"
          dest: "{{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__hostname_full }}.pem"
        - src: "{{ deploy_cacerts__keystore_cert_base_dir }}/{{ deploy_cacerts__ca_domain }}/{{ deploy_cacerts__hostname_full }}.chain.pem"
          dest: "{{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__hostname_full }}.chain.pem"
#        - src: "{{ deploy_cacerts__keystore_cert_base_dir }}/{{ deploy_cacerts__ca_domain }}/{{ inventory_hostname }}-key.pem"
#          dest: "{{ deploy_cacerts__cacert_local_key_dir }}/{{ inventory_hostname }}-key.pem"
#          owner: 'root'
#          group: 'root'
#          mode: '0600'
#        - src: "{{ deploy_cacerts__keystore_cert_base_dir }}/{{ deploy_cacerts__ca_domain }}/{{ inventory_hostname }}-key.pem"
#          dest: "{{ deploy_cacerts__ca_key_dir }}/{{ inventory_hostname }}-key.pem"
#          owner: 'root'
#          group: 'root'
#          mode: '0600'
        - src: "{{ deploy_cacerts__keystore_cert_base_dir }}/{{ deploy_cacerts__ca_domain }}/{{ deploy_cacerts__hostname_full }}-key.pem"
          dest: "{{ deploy_cacerts__cacert_local_key_dir }}/{{ deploy_cacerts__hostname_full }}-key.pem"
          owner: 'root'
          group: 'root'
          mode: '0600'
        - src: "{{ deploy_cacerts__keystore_cert_base_dir }}/{{ deploy_cacerts__ca_domain }}/{{ deploy_cacerts__hostname_full }}-key.pem"
          dest: "{{ deploy_cacerts__ca_key_dir }}/{{ deploy_cacerts__hostname_full }}-key.pem"
          owner: 'root'
          group: 'root'
          mode: '0600'

- name: "{{ __log_prefix_fetch }} fetch host cert/key from keystore"
  when: deploy_cacerts__using_stepca|d(False)|bool
  block:

    - name: "Validate deploy_cacerts__stepca_root_ca_fingerprint defined"
      assert:
        that: deploy_cacerts__stepca_root_ca_fingerprint is defined

    - name: "{{ __log_prefix_fetch }} Check if {{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__pki_caroot_cert }} exists"
      stat:
        path: "{{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__pki_caroot_cert }}"
      register: __cacert_root_result

    - name: "{{ __log_prefix_fetch }} check host cert info"
      when: deploy_cacerts__validate_certs|d(True)|bool
      block:
        - name: "{{ __log_prefix_fetch }} Check if {{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__hostname_full }}.pem exists"
          stat:
            path: "{{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__hostname_full }}.pem"
          register: cacert_cert_result

        - name: "{{ __log_prefix_fetch }} Check if {{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__hostname_full }}.chain.pem exists"
          stat:
            path: "{{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__hostname_full }}.chain.pem"
          register: cacert_certbundle_result

        - name: "{{ __log_prefix_fetch }} Check if {{ deploy_cacerts__cacert_local_key_dir }}/{{ deploy_cacerts__hostname_full }}-key.pem exists"
          stat:
            path: "{{ deploy_cacerts__cacert_local_key_dir }}/{{ deploy_cacerts__hostname_full }}-key.pem"
          register: cacert_key_result

#    - name: "{{ __log_prefix_fetch }} Display deploy_cacerts__stepca_root_ca_fingerprint"
#      debug:
#        var: deploy_cacerts__stepca_root_ca_fingerprint

    ## ref: https://smallstep.com/docs/step-ca/getting-started#initialize-your-certificate-authority
    - name: "{{ __log_prefix_fetch }} Bootstrap step cli configuration"
      changed_when: no
      shell: "step ca bootstrap --force --ca-url {{ deploy_cacerts__stepca_host_url }} --fingerprint {{ deploy_cacerts__stepca_root_ca_fingerprint }}"

    - name: "{{ __log_prefix_fetch }} Fetch root cert/key from stepca to {{ deploy_cacerts__cacert_local_cert_dir }}"
      when: not __cacert_root_result.stat.exists
      shell: "step ca root {{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__pki_caroot_cert }}"

    - name: "{{ __log_prefix_fetch }} Validate root cert"
      when: deploy_cacerts__validate_certs|d(True)|bool
      block:

        - name: "{{ __log_prefix_fetch }} Display ansible_python_interpreter"
          debug:
            var: ansible_python_interpreter

        - name: "{{ __log_prefix_fetch }} Validate cacerts by querying {{ deploy_cacerts__stepca_host_url }}health"
    #      ignore_errors: yes
          uri:
            url: "{{ deploy_cacerts__stepca_host_url }}health"
            method: GET
            status_code: 200
            validate_certs: yes
            return_content: no
          register: __step_get_result

      rescue:
        - name: "{{ __log_prefix_fetch }} Fetch root cert/key from stepca and overwrite old/stale at {{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__pki_caroot_cert }}"
#          when: __step_get_result.status != 200
          shell: "step ca root -f {{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__pki_caroot_cert }}"

        - name: "trust_cert | Copy root cert to {{ __deploy_cacerts__trust_ca_cacert_dir }} for importing"
          copy_remotely:
            src: "{{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__pki_caroot_cert }}"
            dest: "{{ __deploy_cacerts__trust_ca_cacert_dir }}/{{ deploy_cacerts__ca_root_cn }}.{{ deploy_cacerts__trust_ca_cert_extension }}"

        - name: "trust_cert | update CA trust: {{ __deploy_cacerts__trust_ca_update_trust_cmd }}"
          command: '{{ __deploy_cacerts__trust_ca_update_trust_cmd }}'

    - name: "{{ __log_prefix_fetch }} Fetch host cert and key"
      when: deploy_cacerts__deploy_host_certs|d(True)|bool
      block:

        - name: Get firewalld service status
          ansible.builtin.systemd:
            name: "firewalld"
          register: __firewalld_service_state

        - name: temporarily permit traffic on port 80/tcp in order to perform stepca host verification
          when: __firewalld_service_state.status.ActiveState|d('')=='active'
          ansible.posix.firewalld:
            port: 80/tcp
            state: enabled

        - name: "{{ __log_prefix_fetch }} Deploy cert/key to {{ deploy_cacerts__cacert_local_cert_dir }}"
          when: not (cacert_cert_result.stat.exists and cacert_key_result.stat.exists)
          shell: >-
            step ca certificate {{ deploy_cacerts__hostname_full }} \
              {{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__hostname_full }}.pem \
              {{ deploy_cacerts__cacert_local_key_dir }}/{{ deploy_cacerts__hostname_full }}-key.pem \
              --provisioner {{ deploy_cacerts__ca_provisioner }}

      rescue:
        - name: "temporarily permit traffic on port {{ stepca_acme_http_challenge_proxy_port }}/tcp in order to perform stepca host verification"
          ansible.posix.firewalld:
            port: "{{ stepca_acme_http_challenge_proxy_port }}/tcp"
            state: enabled

        - name: "{{ __log_prefix_fetch }} Deploy cert/key to {{ deploy_cacerts__cacert_local_cert_dir }}"
          when: not (cacert_cert_result.stat.exists and cacert_key_result.stat.exists)
          shell: >-
            step ca certificate {{ deploy_cacerts__hostname_full }} \
              {{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__hostname_full }}.pem \
              {{ deploy_cacerts__cacert_local_key_dir }}/{{ deploy_cacerts__hostname_full }}-key.pem \
              --provisioner {{ deploy_cacerts__ca_provisioner }} \
              --http-listen :{{ stepca_acme_http_challenge_proxy_port }}

    - name: "{{ __log_prefix_fetch }} Create bundle"
      when: deploy_cacerts__create_cert_bundle|d(True)|bool
      block:

        - name: "{{ __log_prefix_fetch }} Create cert bundle from stepca to {{ deploy_cacerts__cacert_local_cert_dir }}"
          when: not (cacert_certbundle_result.stat.exists and cacert_key_result.stat.exists)
          shell: >-
            step certificate bundle \
              {{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__hostname_full }}.pem \
              {{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__pki_caroot_cert }} \
              {{ deploy_cacerts__cacert_local_cert_dir }}/{{ deploy_cacerts__hostname_full }}.chain.pem

## ssh-keygen -f "/root/.ssh/known_hosts" -R "{{ deploy_cacerts__keystore_host }}"
- name: "{{ __log_prefix_fetch }} Remove/Reset key from known_hosts"
  ansible.builtin.known_hosts:
    name: "{{ deploy_cacerts__keystore_host }}"
#    path: "{{ '~/.ssh/known_hosts' | expanduser }}"
    state: absent

- name: "{{ __log_prefix_fetch }} fetch intermediate certs"
  when: deploy_cacerts__deploy_intermediate_certs|d(True)|bool
#  become: no
  block:

    - name: "{{ __log_prefix_fetch }} Add intermediate certs to __cert_from_to_list"
      when: item.domainName in __deploy_cacerts__ca_fetch_domains_list
      set_fact:
        __cert_from_to_list: "{{ __cert_from_to_list|d([]) +
            [ { 'src': deploy_cacerts__keystore_cert_base_dir + '/' + item.domainName + '/' + item.commonName + '.pem',
                'dest': deploy_cacerts__cacert_local_cert_dir + '/' + item.commonName + '.pem' },
              { 'src': deploy_cacerts__keystore_cert_base_dir + '/' + item.domainName + '/' + item.commonName + '.chain.pem',
                'dest': deploy_cacerts__cacert_local_cert_dir + '/' + item.commonName + '.chain.pem' },
              { 'src': deploy_cacerts__keystore_cert_base_dir + '/' + item.domainName + '/' + item.commonName + '-key.pem',
                'dest': deploy_cacerts__cacert_local_key_dir + '/' + item.commonName + '-key.pem',
                'owner': 'root', 'group': 'root', 'mode': '0600' }
            ] }}"
      loop: "{{ __deploy_cacerts__ca_intermediate_cert_list }}"

    ## ref: https://unix.stackexchange.com/posts/175673/timeline
    - name: "{{ __log_prefix_fetch }} Add route certs to __cert_from_to_list"
      set_fact:
        __cert_from_to_list: "{{ __cert_from_to_list|d([]) +
            [ { 'src': deploy_cacerts__keystore_cert_base_dir + '/' + item.route + '/' + item.route + '.pem',
                'dest': deploy_cacerts__cacert_local_cert_dir + '/' + item.route + '.pem' },
              { 'src': deploy_cacerts__keystore_cert_base_dir + '/' + item.route + '/' + item.route + '.chain.pem',
                'dest': deploy_cacerts__cacert_local_cert_dir + '/' + item.route + '.chain.pem' },
              { 'src': deploy_cacerts__keystore_cert_base_dir + '/' + item.route + '/' + item.route + '-key.pem',
                'dest': deploy_cacerts__cacert_local_key_dir + '/' + item.route + '-key.pem',
                'owner': 'root', 'group': 'root', 'mode': '0600' }
             ] }}"
      loop: "{{ deploy_cacerts__ca_service_routes_list }}"

    - name: "{{ __log_prefix_fetch }} Display __cert_from_to_list"
      debug:
        var: __cert_from_to_list

    - name: "{{ __log_prefix_fetch }} Synchronize ca intermediate certs to {{ deploy_cacerts__cacert_local_cert_dir }}"
      ansible.builtin.include_tasks: slurp_from_to.yml
      loop_control:
        loop_var: __copy_from_to_info
      loop: "{{ __cert_from_to_list }}"

    - name: "{{ __log_prefix_fetch }} Remote copy service route keys to trust dir at {{ deploy_cacerts__ca_key_dir }}"
#      when: item.route in deploy_cacerts__ca_domains_hosted
#      become: yes
#      copy_remotely:
      copy:
        src: "{{ deploy_cacerts__cacert_local_key_dir }}/{{ item.route }}-key.pem"
        dest: "{{ deploy_cacerts__ca_key_dir }}/{{ item.route }}-key.pem"
        backup: yes
        remote_src: yes
        mode: "0600"
      loop: "{{ deploy_cacerts__ca_service_routes_list }}"

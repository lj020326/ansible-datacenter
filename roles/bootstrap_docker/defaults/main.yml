---

bootstrap_docker__actions_allowed:
  - install
  - setup-swarm

bootstrap_docker__actions:
  - install
  - setup-swarm

bootstrap_docker__config: {}
bootstrap_docker__edition: ce
bootstrap_docker__repo: docker
#bootstrap_docker__repo: rhsm
bootstrap_docker__channel: stable
bootstrap_docker__ee_version: 24.09

bootstrap_docker__rhsm_channel: Example_Docker_Community_Edition_CE_Docker_CE_Stable_RHEL{{ ansible_distribution_major_version }}

bootstrap_docker__deploy_registry_certs: true

# Service options.
bootstrap_docker__service_manage: true
bootstrap_docker__service_state: started
bootstrap_docker__service_enabled: true
bootstrap_docker__restart_handler_state: restarted
bootstrap_docker__service_started: true

#bootstrap_docker__daemon_flags:
#  - "-H unix://"
bootstrap_docker__daemon_flags:
  - -H unix:///var/run/docker.sock

################## swarm options #######################
#bootstrap_docker__swarm_leader_host: test123
bootstrap_docker__swarm_manager: false
bootstrap_docker__swarm_leader: false
bootstrap_docker__swarm_worker: false
bootstrap_docker__swarm_node: "{{
  (bootstrap_docker__swarm_manager
  or bootstrap_docker__swarm_leader
  or bootstrap_docker__swarm_worker) | bool
  }}"

bootstrap_docker__swarm_leave: false
#bootstrap_docker__swarm_adv_addr: "0.0.0.0:2377"
bootstrap_docker__swarm_adv_addr: "{{ ansible_default_ipv4.address }}"
bootstrap_docker__swarm_managers: []
#bootstrap_docker__swarm_remote_addrs: []

bootstrap_docker__swarm_remote_addrs: []
#bootstrap_docker__swarm_remote_addrs: |-
#  {% set remote_addresses = [] %}
#  {% for swarm_host in bootstrap_docker__swarm_managers %}
#  {%   set _ = remote_addresses.append(hostvars[swarm_host]['ansible_default_ipv4']['address']) %}
#  {% endfor %}
#  {{ remote_addresses }}

bootstrap_docker__swarm_state: present
bootstrap_docker__swarm_node_labels: []
#bootstrap_docker__swarm_node_labels:
#  label0: value0
#  label1: value1
#  label2: value2

bootstrap_docker__swarm_secrets: []
#bootstrap_docker__swarm_secrets:
#  - name: secret-name-0
#    value: secret-value-0
#    state: present
#  - name: secret-name-1
#    value: secret-value-1
#    state: absent

bootstrap_docker__features:
  buildkit: true

bootstrap_docker__options:
  api-cors-header: "{{ bootstrap_docker__api_cors_header | default(None) }}"
  authorization-plugins: "{{ bootstrap_docker__authorization_plugins | default(None) }}"
  bip: "{{ bootstrap_docker__bip | default(None) }}"
  bridge: "{{ bootstrap_docker__bridge | default(None) }}"
  cgroup-parent: "{{ bootstrap_docker__cgroup_parent | default(None) }}"
  cluster-store: "{{ bootstrap_docker__cluster_store | default(None) }}"
  cluster-store-opts: "{{ bootstrap_docker__cluster_store_opts | default(None) }}"
  cluster-advertise: "{{ bootstrap_docker__cluster_advertise | default(None) }}"
  debug: "{{ bootstrap_docker__debug | default(None) }}"
  default-gateway: "{{ bootstrap_docker__default_gateway | default(None) }}"
  default-gateway-v6: "{{ bootstrap_docker__default_gateway_v6 | default(None) }}"
  default-runtime: "{{ bootstrap_docker__default_runtime | default(None) }}"
  default-ulimits: "{{ bootstrap_docker__default_ulimits | default(None) }}"
  disable-legacy-registry: "{{ bootstrap_docker__disable_legacy_registry | default(None) }}"
  dns: "{{ bootstrap_docker__dns | default(None) }}"
  dns-opts: "{{ bootstrap_docker__dns_opts | default(None) }}"
  dns-search: "{{ bootstrap_docker__dns_search | default(None) }}"
  exec-opts: "{{ bootstrap_docker__exec_opts | default(None) }}"
  exec-root: "{{ bootstrap_docker__exec_root | default(None) }}"
  features: "{{ bootstrap_docker__features | default(None) }}"
  fixed-cidr: "{{ bootstrap_docker__fixed_cidr | default(None) }}"
  fixed-cidr-v6: "{{ bootstrap_docker__fixed_cidr_v6 | default(None) }}"
  graph: "{{ bootstrap_docker__graph | default(None) }}"
  group: "{{ bootstrap_docker__group | default(None) }}"
  hosts: "{{ bootstrap_docker__hosts | default(None) }}"
  icc: "{{ bootstrap_docker__icc | default(None) }}"
  insecure-registries: "{{ bootstrap_docker__insecure_registries | default(None) }}"
  ip: "{{ bootstrap_docker__ip | default(None) }}"
  iptables: "{{ bootstrap_docker__iptables | default(None) }}"
  ipv6: "{{ bootstrap_docker__ipv6 | default(None) }}"
  ip-forward: "{{ bootstrap_docker__ip_forward | default(None) }}"
  ip-masq: "{{ bootstrap_docker__ip_masq | default(None) }}"
  labels: "{{ bootstrap_docker__labels | default(None) }}"
  live-restore: "{{ bootstrap_docker__live_restore | default(None) }}"
  log-driver: "{{ bootstrap_docker__log_driver | default(None) }}"
  log-level: "{{ bootstrap_docker__log_level | default(None) }}"
  log-opts: "{{ bootstrap_docker__log_opts | default(None) }}"
  max-concurrent-downloads: "{{ bootstrap_docker__max_concurrent_downloads | default(None) }}"
  max-concurrent-uploads: "{{ bootstrap_docker__max_concurrent_uploads | default(None) }}"
  mtu: "{{ bootstrap_docker__mtu | default(None) }}"
  oom-score-adjust: "{{ bootstrap_docker__oom_score_adjust | default(None) }}"
  pidfile: "{{ bootstrap_docker__pidfile | default(None) }}"
  raw-logs: "{{ bootstrap_docker__raw_logs | default(None) }}"
  registry-mirrors: "{{ bootstrap_docker__registry_mirrors | default(None) }}"
  runtimes: "{{ bootstrap_docker__runtimes | default(None) }}"
  selinux-enabled: "{{ bootstrap_docker__selinux_enabled | default(None) }}"
  swarm-default-advertise-addr: "{{ bootstrap_docker__swarm_default_advertise_addr | default(None) }}"
  storage-driver: "{{ bootstrap_docker__storage_driver | default(None) }}"
  storage-opts: "{{ bootstrap_docker__storage_opts | default(None) }}"
  tls: "{{ bootstrap_docker__tls | default(None) }}"
  tlscacert: "{{ bootstrap_docker__tlscacert | default(None) }}"
  tlscert: "{{ bootstrap_docker__tlscert | default(None) }}"
  tlskey: "{{ bootstrap_docker__tlskey | default(None) }}"
  tlsverify: "{{ bootstrap_docker__tlsverify | default(None) }}"
  userland-proxy: "{{ bootstrap_docker__userland_proxy | default(None) }}"
  userns-remap: "{{ bootstrap_docker__userns_remap | default(None) }}"

################## LVM #######################
bootstrap_docker__setup_lvm: false
# THINPOOL
#   Default physical volume is left commented in order to fail if not given by the caller
#   avoiding disk disruption.
#   docker_pvname: "/dev/sdb"
bootstrap_docker__vgname: docker
bootstrap_docker__lvname: thinpool
bootstrap_docker__lvname_meta: "{{ bootstrap_docker__vgname }}meta"

# Docker LVM options.
bootstrap_docker__lvm_options:
  storage-driver: devicemapper
  storage-opts:
    - dm.thinpooldev=/dev/mapper/{{ bootstrap_docker__vgname }}-{{ bootstrap_docker__lvname }}
    - dm.use_deferred_removal=true
    - dm.use_deferred_deletion=true

# Docker Compose options.
bootstrap_docker__install_compose: true
bootstrap_docker__pip_executable: /usr/bin/pip3

bootstrap_docker__update_exist_compose_version: false
#bootstrap_docker__compose_version: "v2.11.1"
bootstrap_docker__compose_arch: "{{ ansible_architecture }}"
bootstrap_docker__compose_url_latest: "https://github.com/docker/compose/releases/latest"
bootstrap_docker__compose_url: "https://github.com/docker/compose/releases/download/{{ 
  __bootstrap_docker__compose_version }}/docker-compose-linux-{{ bootstrap_docker__compose_arch }}"
#bootstrap_docker__compose_path: /usr/local/bin/docker-compose
bootstrap_docker__compose_path: /usr/bin/docker-compose

################
bootstrap_docker__user_username: docker
bootstrap_docker__user_password: p4ssord!124
bootstrap_docker__user_group: "{{ bootstrap_docker__user_username }}"
bootstrap_docker__user_hash_seed: 49yigteiskjht5qmn234
bootstrap_docker__user_shell: /bin/bash
bootstrap_docker__user_sudo_access: false
bootstrap_docker__users:
  - "{{ bootstrap_docker__user_username }}"

bootstrap_docker__default_daemon_json: []
#bootstrap_docker__default_daemon_json: |
#  "log-driver": "journald"

bootstrap_docker__daemon_json: ""

bootstrap_docker__daemon_environment: []
bootstrap_docker__systemd_override: ""

bootstrap_docker__script_dir: /opt/scripts

bootstrap_docker__script_dirs:
  - path: "{{ bootstrap_docker__script_dir }}"
    recurse: true

bootstrap_docker__scripts:
  - src: scripts/mono_image_entrypoint.sh
  - src: scripts/validate_ssl_endpoint.sh
  - src: scripts/validate_registry_endpoint.sh
  - src: scripts/get_curl_ca_opts.sh
  - src: scripts/docker-cleanup-large-logfiles.sh

###########
## Following block moved to inventory as config with dedicated 'bootstrap_linux_cron' role implementation
#bootstrap_docker__enable_cron_jobs: true
#bootstrap_docker__cron_jobs_prune_flags: "af"
#bootstrap_docker__cron_jobs:
#  - name: "Docker disk clean up"
#    job: "docker system prune -{{ bootstrap_docker__cron_jobs_prune_flags }} 2>&1"
##    job: "docker system prune -{{ bootstrap_docker__cron_jobs_prune_flags }} > /dev/null 2>&1"
#    schedule: ["0", "0", "*", "*", "0"]
#    cron_file: "docker-disk-clean-up"
##    user: "{{ (bootstrap_docker__users | first) | d('root') }}"
#  - name: "Docker large log file clean up"
#    job: "{{ bootstrap_docker__script_dir }}/docker-cleanup-large-logfiles.sh -y 2>&1"
#    schedule: ["0", "0", "*", "*", "0"]
#    cron_file: "docker-large-logfile-clean-up"
##    user: "{{ (bootstrap_docker__users | first) | d('root') }}"

bootstrap_docker__pip_dependencies:
  - "python-setuptools"
  - "python{{ '3' if ansible_python.version.major == 3 else '' }}-pip"

bootstrap_docker__pip_virtualenv: /usr/local/lib/docker/virtualenv

###__bootstrap_docker_python_docker_interpreter_default: "/usr/bin/env python-docker"
##__bootstrap_docker_python_docker_interpreter_default: "/usr/local/bin/python-docker"
#__bootstrap_docker_python_docker_interpreter: "{{ bootstrap_docker_python_docker_interpreter d(__bootstrap_docker_python_docker_interpreter_default) }}"

bootstrap_docker__python_virtualenv_command: python3 -m venv
#bootstrap_docker__python_virtualenv_command: "{{ os_python3_interpreter }} -m venv"

bootstrap_docker__pip_docker_state: present
bootstrap_docker__pip_docker_compose_state: present
#bootstrap_docker__pip_docker_compose_state: "forcereinstall"

bootstrap_docker__packages:
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - docker-buildx-plugin
  - docker-compose-plugin

bootstrap_docker__additional_packages: []
bootstrap_docker__default_pip_packages:
  - name: requests
    state: "{{ bootstrap_docker__pip_docker_state }}"
  - name: jsondiff
    state: "{{ bootstrap_docker__pip_docker_state }}"
  - name: docker
    state: "{{ bootstrap_docker__pip_docker_state }}"
    virtual_env_state: "{{ bootstrap_docker__pip_docker_state }}"
#  - name: "docker-compose"
#    version: "{{ bootstrap_docker__compose_version | d() }}"
#    path: "/usr/local/bin/docker-compose"
#    src: "{{ bootstrap_docker__pip_virtualenv + '/bin/docker-compose' }}"
#    state: "{{ bootstrap_docker__pip_docker_compose_state }}"
#    virtual_env_state: "{{ bootstrap_docker__pip_docker_compose_state }}"
#bootstrap_docker__pip_packages: []

__bootstrap_docker__pip_packages: "{{ bootstrap_docker__pip_packages | d(bootstrap_docker__default_pip_packages) }}"

bootstrap_docker__user_groups:
  RedHat: &rhgroups
    - adm
    - docker
  CentOS: *rhgroups
  Fedora: *rhgroups
  Scientific: *rhgroups
  Debian: &debgroups
    - adm
    - cdrom
    - dip
    - plugdev
    - docker
  Ubuntu: *debgroups
bootstrap_docker__sudo_group:
  CentOS: &rhsudogroup wheel
  Fedora: *rhsudogroup
  Scientific: *rhsudogroup
  Debian: &debsudogroup sudo
  Ubuntu: *debsudogroup

__bootstrap_docker__log_prefix_deploy_config: Docker | Deploy Config |
__bootstrap_docker__log_prefix_compose: Docker | Docker Compose |
__bootstrap_docker__log_prefix_users: Docker | Users |
__bootstrap_docker__log_prefix_lvm_setup: Docker | Setup LVM |
__bootstrap_docker__log_prefix_leader: Docker | Configure swarm | LEADER |
__bootstrap_docker__log_prefix_leave: Docker | Configure swarm | LEAVE |
__bootstrap_docker__log_prefix_mgr: Docker | Configure swarm | MANAGER |
__bootstrap_docker__log_prefix_swarm: Docker | Configure swarm |
__bootstrap_docker__log_prefix_worker: Docker | Configure swarm | WORKER |

__bootstrap_docker__log_prefix_apt: Docker | CE | APT |
__bootstrap_docker__log_prefix_dnf: Docker | CE | DNF |
__bootstrap_docker__log_prefix_yum: Docker | CE | YUM |
__bootstrap_docker__log_prefix_yum_rhsm: Docker | CE | YUM-RHSM |
__bootstrap_docker__log_prefix_dnf_rhsm: Docker | CE | DNF-RHSM |

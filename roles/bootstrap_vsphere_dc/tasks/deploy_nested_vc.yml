---
- name: Check if vCenter already exists so install steps can be skipped
  ansible.builtin.uri:
    #    url: "https://{{ vsphere_deploy_dc_nested_vcenter.ip }}/ui/"
    url: https://{{ vsphere_deploy_dc_nested_vcenter.fqdn }}:5480/
    method: GET
    status_code: 200
    timeout: 2
    validate_certs: false
  ignore_errors: true
  register: vcenter_response

- name: Set vcenter_exists
  ansible.builtin.set_fact:
    vcenter_exists: "{{ vcenter_response.status == 200 }}"

- name: Fix permissions before delete
  when: not vcenter_exists
  ansible.builtin.command: chmod -R +w {{vsphere_deploy_dc_vcenter_install_tmp_dir}}/VCSA
  changed_when: false
  ignore_errors: true # noqa: ignore-errors

- name: Clean VCSA ISO Directory
  when: not vcenter_exists
  ansible.builtin.file:
    path: "{{ vsphere_deploy_dc_vcenter_install_tmp_dir }}/VCSA"
    state: absent

- name: Extract VCSA ISO image
  when: not vcenter_exists
  ansible.builtin.command: |
    xorriso -ecma119_map lowercase -osirrox on -indev {{vc_iso}} \
      -extract / {{vsphere_deploy_dc_vcenter_install_tmp_dir}}/VCSA
  changed_when: false

- name: Fix VCSA directory permissions
  when: not vcenter_exists
  ansible.builtin.command: "{{item}}"
  loop:
    - chmod -R 777 {{vsphere_deploy_dc_vcenter_install_tmp_dir}}/VCSA
  changed_when: false

- name: Create JSON template file for VCSA {{ deploy_version }} with embeded PSC
  ansible.builtin.template:
    src: embedded_vCSA_on_VC_{{ deploy_version }}.json.j2
    dest: "{{vsphere_deploy_dc_vcenter_install_tmp_dir}}/vCSA_on_ESXi.json"
    mode: "0644"

- name: Perform VC CLI Install
  when: not vcenter_exists
  ansible.builtin.command: |
    ./vcsa-deploy install --accept-eula --no-esx-ssl-verify \
      {{ vsphere_deploy_dc_vcenter_install_tmp_dir }}/vCSA_on_ESXi.json
  args:
    chdir: "{{vsphere_deploy_dc_vcenter_install_tmp_dir}}/VCSA/vcsa-cli-installer/lin64/"
  async: 3600
  poll: 0
  changed_when: false
  register: vcenter_result

- name: Remove Nested vcenter CDROM
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    validate_certs: false
    name: "{{ environment_tag }}-{{ item.key }}"
    cdrom:
      type: client
  with_dict: "{{ vsphere_deploy_dc_nested_hosts }}"

- name: Change nested_host hostnames
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ environment_tag }}-{{ item.key }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/esxcli
    vm_shell_args: system hostname set --fqdn={{ environment_tag }}-{{ item.key }}.{{ domain }}
    vm_shell_env:
      - PATH=/bin
      - VAR=test
    vm_shell_cwd: /tmp
  with_dict: "{{ vsphere_deploy_dc_nested_hosts }}"
  async: 7200
  poll: 0
  register: hname

- name: Result check for configuring hostname
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  loop: "{{ hname.results }}"
  retries: 10

- name: Set VLAN to Management portgroup
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ environment_tag }}-{{ item.key }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/esxcli
    vm_shell_args: "network vswitch standard portgroup set --portgroup-name='Management Network' --vlan-id={{ vsphere_deploy_dc_nested_clusters[item.value.nested_cluster].mgmt_vlan }}"
    vm_shell_env:
      - PATH=/bin
      - VAR=test
    vm_shell_cwd: /tmp
  with_dict: "{{ vsphere_deploy_dc_nested_hosts }}"
  async: 7200
  poll: 0
  register: hvlan

- name: Result check for setting VLAN
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  loop: "{{ hvlan.results }}"
  retries: 10

- name: Set vmk0 ip addresses
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ environment_tag }}-{{ item.key }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/esxcli
    vm_shell_args: network ip interface ipv4 set --interface-name=vmk0 --ipv4={{ item.value.ip }} --netmask={{ item.value.mask }} --type=static
    vm_shell_env:
      - PATH=/bin
      - VAR=test
    vm_shell_cwd: /tmp
  with_dict: "{{ vsphere_deploy_dc_nested_hosts }}"
  async: 7200
  poll: 0
  register: hip

- name: Result check for setting vmk0 ip addresses
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  loop: "{{ hip.results }}"
  retries: 10

- name: Set default gw
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.ip }}"
    username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ environment_tag }}-{{ item.key }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/esxcfg-route
    vm_shell_args: " -a default {{ item.value.gw }}"
    vm_shell_env:
      - PATH=/bin
      - VAR=test
    vm_shell_cwd: /tmp
  with_dict: "{{ vsphere_deploy_dc_nested_hosts }}"
  async: 7200
  poll: 0
  register: hgw

- name: Result check for setting default gw
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  loop: "{{ hgw.results }}"
  retries: 10

- name: Set search domain
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.ip }}"
    username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ environment_tag }}-{{ item.key }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/esxcli
    vm_shell_args: network ip dns search add --domain={{ domain}}
    vm_shell_env:
      - PATH=/bin
      - VAR=test
    vm_shell_cwd: /tmp
  with_dict: "{{ vsphere_deploy_dc_nested_hosts }}"
  async: 7200
  poll: 0
  register: hsd

- name: Result check for setting a search domain
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  loop: "{{ hsd.results }}"
  retries: 10

- name: Set a DNS Server
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.ip }}"
    username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ environment_tag }}-{{ item.key }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/esxcli
    vm_shell_args: network ip dns server add --server={{ dns1 }}
    vm_shell_env:
      - PATH=/bin
      - VAR=test
    vm_shell_cwd: /tmp
  with_dict: "{{ vsphere_deploy_dc_nested_hosts }}"
  async: 7200
  poll: 0
  register: hdns

- name: Disable SSH Warnings
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.ip }}"
    username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username }}"
    password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ environment_tag }}-{{ item.key }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/vim-cmd
    vm_shell_args: hostsvc/advopt/update UserVars.SuppressShellWarning long 1
    vm_shell_env:
      - PATH=/bin
      - VAR=test
    vm_shell_cwd: /tmp
  with_dict: "{{ vsphere_deploy_dc_nested_hosts }}"
  async: 7200
  poll: 0
  register: hwrn

- name: Result check for setting a DNS Server
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  loop: "{{ hdns.results }}"
  retries: 10

- name: Display information on deployment status
  when: not vcenter_exists
  ansible.builtin.debug:
    msg: >
      The vCenter deployment can take a long time.
      You can check progress at https://{{ vsphere_deploy_dc_nested_vcenter.ip }}:5480 after about 20 minutes.
      For detailed output browse to the most recent folder starting with vcsaCliInstaller 
      under {{ vsphere_deploy_dc_vcenter_install_tmp_dir }} and follow vcsa-cli-installer.log

- name: Result check for deployment of vCenter task
  when: not vcenter_exists
  ansible.builtin.async_status:
    jid: "{{ vcenter_result.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 240
  delay: 15

- name: Check the vSphere API is online # noqa: command-instead-of-module
  when: not vcenter_exists
  ansible.builtin.command: curl -k --silent -v https://{{ vsphere_deploy__nested_vcenter.ip }}/ui/
  register: result
  until: result.stdout.find("<title>vSphere Client</title>") != -1
  retries: 120
  delay: 5
  changed_when: false

- name: Wait 30 seconds for the vCenter to settle
  when: not vcenter_exists
  ansible.builtin.pause:
    seconds: "30"

- name: Delete the temporary JSON template file
  ansible.builtin.file:
    path: "{{vsphere_deploy_dc_vcenter_install_tmp_dir}}/vCSA_on_ESXi.json"
    state: absent

- name: Clean VCSA ISO Directory
  ansible.builtin.file:
    path: "{{vsphere_deploy_dc_vcenter_install_tmp_dir}}/VCSA/"
    state: absent

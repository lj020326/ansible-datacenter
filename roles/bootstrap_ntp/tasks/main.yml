---

- name: Init __ipaddr_version
  ansible.builtin.set_fact:
    __ipaddr_version: no-utils

- name: Get ansible.utils collection version information
  ansible.builtin.set_fact:
    __ansible_utils_version: "{{ lookup('community.general.collection_version', 'ansible.utils') }}"

- name: Display __ansible_utils_version
  ansible.builtin.debug:
    var: __ansible_utils_version

## ipaddr filter lookup is in ansible.utils collection as of version 2.5.0
## ref: https://docs.ansible.com/ansible/latest/collections/ansible/utils/ipaddr_filter.html
- name: Set __ipaddr_version to utils
  when:
    - __ansible_utils_version is defined
    - (__ansible_utils_version=='*' or __ansible_utils_version is version('2.5.0', '>='))
  ansible.builtin.set_fact:
    __ipaddr_version: utils

- name: Init {{ role_name }} vars with __ipaddr_version={{ __ipaddr_version }}
  ansible.builtin.include_tasks: init-vars-{{ __ipaddr_version }}.yml
#  ansible.builtin.include_tasks: "init-vars-{{ ansible_version.major }}.yml"

## ref: https://stackoverflow.com/questions/30328506/check-if-service-exists-with-ansible
- name: Populate service facts to determine if ntpd is installed
  ansible.builtin.service_facts:

- name: When chronyd is used, assert that the ntpd service is not installed/running
  when:
    - bootstrap_ntp__daemon == 'chronyd'
    - services | d([]) | intersect(['ntpd', 'ntpd.service']) | list | length>0
  block:
    - name: Ensure ntpd service is stopped and disabled
      ignore_errors: true # noqa: ignore-errors
      failed_when: false
      ansible.builtin.service:
        name: "{{ item }}"
        state: stopped
        enabled: false
      loop:
        - ntpd
        - ntpd.service

    - name: Ensure ntp package is uninstalled
      ansible.builtin.package:
        name: ntp
        state: absent

- name: Ensure ntp packages are installed.
  ansible.builtin.package:
    name: "{{ bootstrap_ntp__packages }}"
    state: present

- name: Ensure {{ bootstrap_ntp__tzdata_package }} package is installed (Linux).
  when: ansible_system == "Linux"
  ansible.builtin.package:
    name: "{{ bootstrap_ntp__tzdata_package }}"
    state: present

- name: Set timezone to {{ bootstrap_ntp__timezone }}.
  community.general.timezone:
    name: "{{ bootstrap_ntp__timezone }}"
  notify: restart cron

- name: Populate post-install service facts.
  ansible.builtin.service_facts:

- name: Disable systemd-timesyncd if it's running but ntp is enabled.
  when:
    - bootstrap_ntp__enabled | bool
    - services | d([]) | intersect(['systemd-timesyncd', 'systemd-timesyncd.service']) | list | length>0
    #    - '"systemd-timesyncd.service" in services'
    - services["systemd-timesyncd.service"]["status"] != "not-found"
  ansible.builtin.service:
    name: systemd-timesyncd.service
    enabled: false
    state: stopped

- name: Ensure {{ bootstrap_ntp__daemon }} is stopped and disabled as configured.
  when: not (bootstrap_ntp__enabled | bool)
  ignore_errors: true # noqa: ignore-errors
  ansible.builtin.service:
    name: "{{ bootstrap_ntp__daemon }}"
    state: stopped
    enabled: false

- name: Generate ntp configuration file.
  when: bootstrap_ntp__manage_config | bool
  ansible.builtin.template:
    src: "{{ bootstrap_ntp__config_file | basename }}.j2"
    dest: "{{ bootstrap_ntp__config_file }}"
    mode: "0644"
    backup: true
  notify: restart ntp

- name: Ensure {{ bootstrap_ntp__daemon }} is running and enabled as configured.
  when: bootstrap_ntp__enabled | bool
  ansible.builtin.service:
    name: "{{ bootstrap_ntp__daemon }}"
    state: restarted
    enabled: true

- name: Sync chronyc
  when:
    - bootstrap_ntp__enabled | bool
    - bootstrap_ntp__daemon == 'chronyd'
    - bootstrap_ntp__role_action in ['all', 'sync']
    - not (bootstrap_ntp__do_not_sync|bool)
  ansible.builtin.include_tasks: sync-chrony.yml

- name: Sync ntp
  when:
    - bootstrap_ntp__enabled | bool
    - bootstrap_ntp__daemon in ['ntp','ntpd']
    - bootstrap_ntp__role_action in ['all', 'sync']
    - not (bootstrap_ntp__do_not_sync|bool)
  ansible.builtin.include_tasks: sync-ntp.yml

- name: Test chronyc
  when:
    - bootstrap_ntp__enabled | bool
    - bootstrap_ntp__daemon == 'chronyd'
    - bootstrap_ntp__role_action in ['all', 'test']
  ansible.builtin.include_tasks: test-chrony.yml

- name: Test ntp
  when:
    - bootstrap_ntp__enabled | bool
    - bootstrap_ntp__daemon in ['ntp','ntpd']
    - bootstrap_ntp__role_action in ['all', 'test']
  ansible.builtin.include_tasks: test-ntp.yml

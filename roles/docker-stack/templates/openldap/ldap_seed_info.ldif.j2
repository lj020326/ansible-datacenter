#jinja2: trim_blocks: True, lstrip_blocks: True
{{ ansible_managed | comment }}

######################
## ldap content template inspired by
##  https://github.com/mrlesmithjr/ansible-openldap/blob/master/templates/etc/ldap/slapd.d/populate_content.ldif.j2
##

## LDAP System Users
{% for _uid,_user_config in __docker_stack__openldap__base_user_map.items() %}

dn: cn={{ _uid }},{{ __docker_stack__openldap__base_dn }}
changetype: add
    {% if _user_config.object_class_list|d([])|length > 0 %}
        {% for object_class in _user_config.object_class_list %}
objectClass: {{ object_class }}
        {% endfor %}
    {% else %}
objectClass: organizationalRole
objectClass: simpleSecurityObject
    {% endif %}
cn: {{ _uid }}
    {% if _user_config.user_password is defined %}
userPassword:: {{ _user_config.user_password }}
    {% endif %}
    {% if _user_config.ssha_password is defined %}
userPassword: {{ _user_config.ssha_password }}
    {% endif %}
description: {{ _user_config.description | d(_uid) }}
{% endfor %}

## LDAP Org Units (OUs)
{% if __docker_stack__openldap__domain_ou_map|d({})|dict2items|length>0 %}
    {% for ou,ou_config in __docker_stack__openldap__domain_ou_map.items() %}

        {% set _ou = ou_config.ou|d(ou) %}
        {% if ou_config.parent_ou is defined %}
            {% set _ou_dn = 'ou='+_ou+','+ou_config.parent_ou+','+__docker_stack__openldap__base_dn %}
        {% else %}
            {% set _ou_dn = 'ou='+_ou+','+__docker_stack__openldap__base_dn %}
        {% endif %}
dn: {{ _ou_dn }}
changetype: add
objectClass: top
objectClass: organizationalUnit
ou: {{ ou }}
    {% endfor %}
{% endif %}

## LDAP samba domains
{% for domain_name,domain_config in __docker_stack__openldap__samba_domain_map.items() %}

dn: sambaDomainName={{ domain_name }},{{ __docker_stack__openldap__base_dn }}
changetype: add
objectClass: sambaDomain
sambaDomainName: {{ domain_name }}
sambaSID: {{ domain_config.sid }}
sambaAlgorithmicRidBase: 1000
sambaForceLogoff: -1
sambaLockoutDuration: 30
sambaLockoutObservationWindow: 30
sambaLockoutThreshold: 0
sambaLogonToChgPwd: 0
sambaMaxPwdAge: -1
sambaMinPwdAge: 0
sambaMinPwdLength: 5
sambaNextUserRid: 1000
sambaPwdHistoryLength: 0
sambaRefuseMachinePwdChange: 0
{% endfor %}

## LDAP Domain Users
{% for _user_key,_user_config in __docker_stack__openldap__domain_user_map_combined.items() %}

    {% set _uid = _user_config.uid|d(_user_key) %}
dn: {{ _user_config.dn }}
changetype: add
    {% set _object_class_list = _user_config.object_class_list %}
    {% if _object_class_list|d([])|length > 0 %}
        {% for object_class in _object_class_list %}
objectClass: {{ object_class }}
        {% endfor %}
    {% endif %}
cn: {{ _user_config.cn | d(_uid) }}
    {% if _user_config.gecos is defined %}
gecos: {{ _user_config.gecos }}
    {% endif %}
    {% if _user_config.gid_number is defined %}
gidNumber: {{ _user_config.gid_number }}
    {% endif %}
homeDirectory: {{ _user_config.homedir | d('/home/' + _uid) }}
sn: {{ _user_config.sn | d(_uid) }}
uid: {{ _uid }}
    {% if _user_config.uid_number is defined %}
uidNumber: {{ _user_config.uid_number }}
    {% endif %}
    {% if _user_config.display_name is defined %}
displayName: {{ _user_config.display_name }}
    {% endif %}
    {% if _user_config.given_name is defined %}
givenName: {{ _user_config.given_name }}
    {% endif %}
    {% if _user_config.initials is defined %}
initials: {{ _user_config.initials }}
    {% endif %}
    {% if _user_config.login_shell is defined %}
loginShell: {{ _user_config.login_shell }}
    {% else %}
loginShell: /bin/bash
    {% endif %}
    {% if _user_config.mail is defined %}
mail: {{ _user_config.mail }}
    {% endif %}
    {% if _user_config.samba is defined %}
        {% set _samba_sid = _user_config.samba.sid %}
        {% set _samba_group_sid = _user_config.samba.primary_group_sid | d(_samba_group_sid_default) %}
sambaSID: {{ _samba_sid }}
        {% if _user_config.samba.primary_group_sid is defined %}
sambaPrimaryGroupSID: {{ _user_config.samba.primary_group_sid }}
        {% endif %}
        {% if _user_config.samba.nt_password is defined %}
sambaNTPassword: {{ _user_config.samba.nt_password }}
        {% endif %}
        {% if _user_config.samba.account_flags is defined %}
sambaAcctFlags: {{ _user_config.samba.account_flags }}
        {% else %}
sambaAcctFlags: [XU         ]
        {% endif %}
sambaDomainName: {{ __docker_stack__openldap__domain }}
        {% if _user_config.homedir|d('') != '/nonexistent' %}
sambaHomeDrive: H:
sambaHomePath: {{ __docker_stack__openldap__user_smb_profile_base }}\{{ _uid }}
sambaProfilePath: \\%L\profiles\{{ _uid }}
        {% endif %}
        {% if _user_config.samba.workstations is defined %}
sambaUserWorkstations: {{ _user_config.samba.workstations }}
        {% endif %}
    {% endif %}
    {% if _user_config.user_password is defined %}
userPassword:: {{ _user_config.user_password }}
    {% endif %}
    {% if _user_config.ssha_password is defined %}
userPassword: {{ _user_config.ssha_password }}
    {% endif %}
    {% if _user_config.ssh_public_key is defined %}
sshPublicKey: {{ _user_config.ssh_public_key }}
    {% endif %}
{% endfor %}

## LDAP Domain Groups
{% for _group_key,_group_config in __docker_stack__openldap__domain_group_map_combined.items() %}

    {% set _group_cn = _group_config.cn | d(_group_key) %}
dn: {{ _group_config.dn }}
changetype: add
    {% set _object_class_list = _group_config.object_class_list %}
    {% if _object_class_list|d([])|length > 0 %}
        {% for _object_class in _object_class_list %}
objectClass: {{ _object_class }}
        {% endfor %}
    {% endif %}
cn: {{ _group_cn }}
    {% if _group_config.gid_number is defined %}
gidNumber: {{ _group_config.gid_number }}
    {% endif %}
    {% if _group_config.description is defined %}
description: {{ _group_config.description }}
    {% endif %}
    {% if _group_config.display_name is defined %}
displayName: {{ _group_config.display_name }}
    {% endif %}
    {% if _group_config.sudo is defined %}
        {% for _sudo_key,_sudo_value in _group_config.sudo.items() %}
            {% if _sudo_key == 'sudoOptions' %}
                {% for _sudo_option in _sudo_value %}
sudoOption: {{ _sudo_option }}
                {% endfor %}
            {% else %}
{{ _sudo_key }}: {{ _sudo_value }}
            {% endif %}
        {% endfor %}
    {% endif %}
    {% if _group_config.memberURL is defined %}
memberURL: {{ _group_config.memberURL }}
    {% endif %}
    {% if _group_config.memberDnList|d([])|length > 0 %}
        {% for _uid in _group_config.memberDnList %}
member: uid={{ _uid }},{{ __docker_stack__openldap__user_base_dn }}
        {% endfor %}
    {% endif %}
    {% if _group_config.memberUidList|d([])|length > 0 %}
        {% for _uid in _group_config.memberUidList %}
memberUid: {{ _uid }}
        {% endfor %}
    {% endif %}
    {% if _group_config.samba is defined %}
        {% set _group_samba_sid = _group_config.samba.sid %}
sambaSID: {{ _group_samba_sid }}
sambaGroupType: {{ _group_config.samba.group_type | d(2) }}
        {% if _group_config.samba.users|d([])|length > 0 %}
            {% for _uid in _group_config.samba.users %}
                {% set _user_config = __docker_stack__openldap__domain_user_map_combined[_uid] %}
                {% set _user_samba_sid = _user_config.samba.sid %}
sambaSIDList: {{ _user_samba_sid }}
            {% endfor %}
        {% endif %}
        {% if _group_config.samba.groups|d([])|length > 0 %}
            {% for _gid in _group_config.samba.groups %}
                {% set _samba_group_config = __docker_stack__openldap__domain_group_map_combined[_gid] %}
                {% set _group_samba_sid = _samba_group_config.samba.sid %}
sambaSIDList: {{ _group_samba_sid }}
            {% endfor %}
        {% endif %}
    {% endif %}
{% endfor %}

## LDAP domain hosts
{% if __docker_stack__openldap__domain_host_map|d({})|dict2items|length>0 %}
    {% for _host_cn,_host_config in __docker_stack__openldap__domain_host_map.items() %}

dn: {{ _host_config.dn }}
changetype: add
        {% set _object_class_list = _host_config.object_class_list %}
        {% if _object_class_list|d([])|length > 0 %}
            {% for _object_class in _object_class_list %}
objectClass: {{ _object_class }}
            {% endfor %}
        {% endif %}
cn: {{ _host_cn }}
        {% if _host_config.gid_number is defined %}
gidNumber: {{ _host_config.gid_number }}
        {% endif %}
homeDirectory: /dev/null
uid: {{ _host_cn }}$
        {% if _host_config.uid_number is defined %}
uidNumber: {{ _host_config.uid_number }}
        {% endif %}
description: {{ _host_config.description | d(_host_cn) }}
displayName: {{ _host_config.display_name | d(_host_cn) }}
loginShell: /bin/false
        {% if _host_config.samba is defined %}
            {% if _host_config.samba.sid is defined %}
sambaSID: {{ _host_config.samba.sid }}
            {% endif %}
sambaAcctFlags: [W          ]
sambaDomainName: {{ __docker_stack__openldap__domain }}
            {% if _host_config.samba.primary_group_sid is defined %}
sambaPrimaryGroupSID: {{ _host_config.samba.primary_group_sid }}
            {% endif %}
            {% if _host_config.samba.nt_password is defined %}
sambaNTPassword: {{ _host_config.samba.nt_password }}
            {% endif %}
        {% endif %}
    {% endfor %}
{% endif %}

cn=lastGID,dc=johnson,dc=int
changetype: add
objectClass: top
objectClass: device
description: Records the last GID used to create a Posix group. This prevents the re-use of a GID from a deleted group.
serialNumber: 2000

cn=lastUID,dc=johnson,dc=int
changetype: add
objectClass: top
objectClass: device
description: Records the last UID used to create a Posix account. This prevents the re-use of a UID from a deleted account.
serialNumber: 2000

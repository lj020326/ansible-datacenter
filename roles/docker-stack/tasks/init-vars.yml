---

- name: "{{ __docker_stack__log_prefix__init_vars }} Display docker_stack__firewalld_enabled"
  ansible.builtin.debug:
    var: docker_stack__firewalld_enabled

- name: "{{ __docker_stack__log_prefix__init_vars }} Display docker_stack__action"
  ansible.builtin.debug:
    var: docker_stack__action

- name: "{{ __docker_stack__log_prefix__init_vars }} Assert docker_stack__action is in supported actions"
  assert:
    that: docker_stack__action in __docker_stack__supported_actions

- name: "{{ __docker_stack__log_prefix__init_vars }} Display docker_stack__swarm_mode"
  ansible.builtin.debug:
    var: docker_stack__swarm_mode

- name: "{{ __docker_stack__log_prefix__init_vars }} Display docker_stack__swarm_manager"
  ansible.builtin.debug:
    var: docker_stack__swarm_manager

- name: "{{ __docker_stack__log_prefix__init_vars }} Display docker_stack__environment"
  ansible.builtin.debug:
    var: docker_stack__environment

- name: "{{ __docker_stack__log_prefix__init_vars }} Assert either `docker_stack__enable_selfsigned_certs` OR `docker_stack__enable_cacerts` but not both"
  assert:
    that:
      - docker_stack__enable_selfsigned_certs or docker_stack__enable_cacerts
      - not (docker_stack__enable_selfsigned_certs and docker_stack__enable_cacerts)

- name: "{{ __docker_stack__log_prefix__init_vars }} Load OS distribution vars"
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "os_distribution/{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
    - "os_distribution/{{ ansible_distribution | lower }}.yml"
    - "os_distribution/{{ ansible_os_family | lower }}.yml"
    - "os_distribution/default.yml"

- name: "{{ __docker_stack__log_prefix__init_vars }} Set __docker_stack__ca_cert_bundle"
  ansible.builtin.set_fact:
    __docker_stack__ca_cert_bundle: "{{ docker_stack__ca_cert_bundle | d(__docker_stack__ca_cert_bundle_default) }}"
    __docker_stack__ca_java_keystore: "{{ docker_stack__ca_java_keystore | d(__docker_stack__ca_java_keystore_default) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack_* os vars"
  ansible.builtin.debug:
    msg:
      - "__docker_stack__ca_cert_bundle={{ __docker_stack__ca_cert_bundle }}"
      - "__docker_stack__ca_java_keystore={{ __docker_stack__ca_java_keystore }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Get docker group / user id"
  block:

    ## ref: https://docs.ansible.com/ansible/latest/modules/getent_module.html
    - name: "{{ __docker_stack__log_prefix__init_vars }} Get docker group / user info"
      getent:
        key: "{{ docker_stack__user_username }}"
        database: passwd

    - ansible.builtin.debug:
        var: getent_passwd

    - name: "{{ __docker_stack__log_prefix__init_vars }} Get docker group info"
      getent:
        database: group
        split: ':'
        key: docker
    - ansible.builtin.debug:
        var: getent_group

    - name: "{{ __docker_stack__log_prefix__init_vars }} Set docker user info facts"
      ansible.builtin.set_fact:
        docker_stack__user_uid: "{{ getent_passwd[docker_stack__user_username][1] }}"
        docker_stack__user_gid: "{{ getent_passwd[docker_stack__user_username][2] }}"
        docker_stack__user_home: "{{ getent_passwd[docker_stack__user_username][4] }}"
        docker_stack__docker_group_gid: "{{ getent_group['docker'][1] }}"

  rescue:
    - ansible.builtin.debug:
        msg: 'Docker user {{ docker_stack__user_username }} not found - add and try again, :-)'

    - name: "{{ __docker_stack__log_prefix__init_vars }} Add user(s) to docker group"
      ansible.builtin.user:
        name: "{{ docker_stack__user_username }}"
        groups: "docker"
        append: true
        gid: "{{ docker_stack__user_gid | d(omit) }}"
        uid: "{{ docker_stack__user_uid | d(omit) }}"

    - getent:
        key: "{{ docker_stack__user_username }}"
        database: passwd

    - name: "{{ __docker_stack__log_prefix__init_vars }} Set docker user info facts"
      ansible.builtin.set_fact:
        docker_stack__user_uid: "{{ getent_passwd[docker_stack__user_username][1] }}"
        docker_stack__user_gid: "{{ getent_passwd[docker_stack__user_username][2] }}"
        docker_stack__user_home: "{{ getent_passwd[docker_stack__user_username][4] }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display docker_stack__service_groups"
  ansible.builtin.debug:
     var: docker_stack__service_groups

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__service_groups_combined"
  ansible.builtin.set_fact:
    __docker_stack__service_groups_combined: "{{ docker_stack__service_groups|d([]) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Set __docker_stack__service_groups_list_var_prefix"
  ansible.builtin.set_fact:
    __docker_stack__service_groups_list_var_prefix: "docker_stack__service_groups__"

- name: "{{ __docker_stack__log_prefix__init_vars }} Set __docker_stack__service_groups_list_var_regex"
  ansible.builtin.set_fact:
    __docker_stack__service_groups_list_var_regex: "^{{ __docker_stack__service_groups_list_var_prefix }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Show variables with '{{ __docker_stack__service_groups_list_var_regex }}' prefix"
  ansible.builtin.debug:
    msg: "{{ lookup('varnames', __docker_stack__service_groups_list_var_regex, wantlist=True) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Coalesce lists from {{ __docker_stack__service_groups_list_var_prefix }}* vars into merged list"
  ansible.builtin.set_fact:
    __docker_stack__service_groups_combined: "{{ __docker_stack__service_groups_combined|d([]) + lookup('vars', item)|d([]) }}"
  loop: "{{ lookup('varnames', __docker_stack__service_groups_list_var_regex, wantlist=True) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__service_groups_combined"
  ansible.builtin.debug:
    var: __docker_stack__service_groups_combined

- name: "{{ __docker_stack__log_prefix__init_vars }} Set __docker_stack__service_groups_by_name"
  ansible.builtin.set_fact:
    __docker_stack__service_groups_by_name: "{{ __docker_stack__service_groups_by_name | d({})
      | combine({ ((item is mapping) | ternary( item.name, item)): {
            'source': item.source | d('role'),
            'name': ((item is mapping) | ternary( item.name, item))
            } } ) }}"
  loop: "{{ __docker_stack__service_groups_combined }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__service_groups_by_name"
  ansible.builtin.debug:
    var: __docker_stack__service_groups_by_name

- name: "{{ __docker_stack__log_prefix__init_vars }} Set __docker_stack__service_groups"
  ansible.builtin.set_fact:
    __docker_stack__service_groups: "{{ __docker_stack__service_groups | d([]) + [ item.value ] }}"
  loop: "{{ __docker_stack__service_groups_by_name | dict2items }}"
#  loop: "{{ __docker_stack__service_groups_combined }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__service_groups"
  ansible.builtin.debug:
     var: __docker_stack__service_groups

- name: "{{ __docker_stack__log_prefix__init_vars }} Display docker_stack__traefik_routing_method"
  ansible.builtin.debug:
     var: docker_stack__traefik_routing_method

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__proxy_configs"
  ansible.builtin.set_fact:
    __docker_stack__proxy_services: []
#    __docker_stack__proxy_services: "{{ docker_stack__proxy_services | d([]) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display docker_stack__proxy_services"
  ansible.builtin.debug:
     var: docker_stack__proxy_services

- name: "{{ __docker_stack__log_prefix__init_vars }} Set __docker_stack__proxy_services"
  ansible.builtin.set_fact:
    __docker_stack__proxy_services: "{{ __docker_stack__proxy_services|d([])
      + [ { 'source': item.source | d('role'),
            'name': ((item is mapping) | ternary( item.name, item))
          } ] }}"
  loop: "{{ docker_stack__proxy_services }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__proxy_services"
  ansible.builtin.debug:
     var: __docker_stack__proxy_services

- name: "{{ __docker_stack__log_prefix__init_vars }} Setup docker_stack__proxy_services"
  when: __docker_stack__proxy_services | d([]) | length>0
  block:

  - name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__proxy_services"
    ansible.builtin.debug:
       var: __docker_stack__proxy_services
#       verbosity: 2

  - name: "{{ __docker_stack__log_prefix__init_vars }} Set the app proxy services vars specific to traefik version"
    when: (role_path + '/vars/app-services/traefik/' + docker_stack__traefik_version + '/' + docker_stack__traefik_routing_method + '/docker_stack_proxy_' + item.name + '.yml') is file
    ansible.builtin.include_vars:  "app-services/traefik/{{ docker_stack__traefik_version }}/{{ docker_stack__traefik_routing_method }}/docker_stack_proxy_{{ item.name }}.yml"
    with_items: "{{ __docker_stack__proxy_services }}"

  - name: "{{ __docker_stack__log_prefix__init_vars }} Set the app proxy services vars"
    when: (role_path + '/vars/app-services/common/docker_stack_proxy_' + item.name + '.yml') is file
    ansible.builtin.include_vars:  "app-services/common/docker_stack_proxy_{{ item.name }}.yml"
    with_items: "{{ __docker_stack__proxy_services }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Set the traefik app services vars"
#  when: item.source|d('role') == 'role'
  when: (role_path + '/vars/app-services/traefik/' + docker_stack__traefik_version + '/' + docker_stack__traefik_routing_method + '/docker_stack_' + item.name + '.yml') is file
  ansible.builtin.include_vars:  "app-services/traefik/{{ docker_stack__traefik_version }}/{{ docker_stack__traefik_routing_method }}/docker_stack_{{ item.name }}.yml"
  loop: "{{ __docker_stack__service_groups }}"
  loop_control:
    label: "{{ item.name }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Set the common app services vars"
#  when: item.source|d('role') == 'role'
  when: (role_path + '/vars/app-services/common/docker_stack_' + item.name + '.yml') is file
  ansible.builtin.include_vars: "app-services/common/docker_stack_{{ item.name }}.yml"
  loop: "{{ __docker_stack__service_groups }}"
  loop_control:
    label: "{{ item.name }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display docker stack info"
  ansible.builtin.debug:
    msg:
      - "docker_stack__service_route_name={{ docker_stack__service_route_name }}"
      - "docker_stack__internal_root_domain={{ docker_stack__internal_root_domain }}"
      - "docker_stack__internal_domain={{ docker_stack__internal_domain }}"
      - "docker_stack__external_domain={{ docker_stack__external_domain }}"
      - "docker_stack__user_gid={{ docker_stack__user_gid }}"
      - "docker_stack__user_uid={{ docker_stack__user_uid }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__app_configs"
  ansible.builtin.set_fact:
    __docker_stack__app_configs: "{{ docker_stack__app_configs|d({}) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Combine app varname configs into __docker_stack__app_configs"
  ansible.builtin.set_fact:
    __docker_stack__app_configs: "{{ __docker_stack__app_configs|d({})
      | combine({ item.name: lookup('vars', q('varnames','^docker_stack__appspec__'+item.name.replace('-','_')+'$')| first | d('') )|d({}) }) }}"
  loop: "{{ __docker_stack__service_groups }}"

## NOTE: sensitive info - this var contains the secrets
- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__app_configs"
  ansible.builtin.debug:
     var: __docker_stack__app_configs
     verbosity: 1

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__proxy_services"
  ansible.builtin.debug:
    var: __docker_stack__proxy_services

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__proxy_configs"
  ansible.builtin.set_fact:
    __docker_stack__proxy_configs: "{{ docker_stack__proxy_configs|d({}) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Show variables with 'docker_stack__proxyspec__' prefix"
  ansible.builtin.debug:
    msg: "{{ lookup('varnames', '^__docker_stack__proxyspec__', wantlist=True) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Combine proxy varname configs into __docker_stack__proxy_configs"
  ansible.builtin.set_fact:
    __docker_stack__proxy_configs: "{{ __docker_stack__proxy_configs|d({})
      | combine({ item.name: lookup('vars', q('varnames','^__docker_stack__proxyspec__'+item.name.replace('-','_')+'$')| first | d('') )|d({}) }) }}"
  loop: "{{ __docker_stack__proxy_services|d([]) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__proxy_configs"
  ansible.builtin.debug:
     var: __docker_stack__proxy_configs
#     verbosity: 2

- name: "{{ __docker_stack__log_prefix__init_vars }} Set __docker_stack__proxy_service_configs"
  when: __docker_stack__proxy_configs[item.name].proxy_config | d([]) | length > 0
  ansible.builtin.set_fact:
    __docker_stack__proxy_service_configs: "{{ __docker_stack__proxy_service_configs|d({})
      | combine(__docker_stack__proxy_configs[item.name].proxy_config, recursive=True) }}"
  loop: "{{ __docker_stack__proxy_services }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__proxy_service_configs"
  ansible.builtin.debug:
     var: __docker_stack__proxy_service_configs
#     verbosity: 2

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__secrets"
  ansible.builtin.set_fact:
    __docker_stack__secrets: "{{ docker_stack__secrets|d([]) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Set __docker_stack__secrets"
  when: __docker_stack__app_configs[item.name].secrets | d([]) | length > 0
  ansible.builtin.set_fact:
    __docker_stack__secrets: "{{ __docker_stack__secrets|d([])
      + __docker_stack__app_configs[item.name].secrets }}"
  loop: "{{ __docker_stack__service_groups }}"
  loop_control:
    label: "{{ item.name }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__secrets"
  ansible.builtin.debug:
    var: __docker_stack__secrets | map(attribute='name') | list
#     var: __docker_stack__secrets
#     verbosity: 2

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__networks"
  ansible.builtin.set_fact:
    __docker_stack__networks: "{{ docker_stack__networks|d({}) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Add service networks to __docker_stack__networks"
  when:
    - __docker_stack__app_configs[item.name].networks is defined
    - __docker_stack__app_configs[item.name].networks | length > 0
  ansible.builtin.set_fact:
    __docker_stack__networks: "{{ __docker_stack__networks|d({})
      | combine(__docker_stack__app_configs[item.name].networks) }}"
  loop: "{{ __docker_stack__service_groups }}"
  loop_control:
    label: "{{ item.name }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__networks"
  ansible.builtin.debug:
     var: __docker_stack__networks
#     verbosity: 2

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__volumes fact"
  ansible.builtin.set_fact:
    __docker_stack__volumes: "{{ docker_stack__volumes|d({}) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Add service volumes to __docker_stack__volumes"
  when: __docker_stack__app_configs[item.name].volumes | d([]) | length > 0
  ansible.builtin.set_fact:
    __docker_stack__volumes: "{{ __docker_stack__volumes|d({})
      | combine(__docker_stack__app_configs[item.name].volumes) }}"
  loop: "{{ __docker_stack__service_groups }}"
  loop_control:
    label: "{{ item.name }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__volumes"
  ansible.builtin.debug:
     var: __docker_stack__volumes
#     verbosity: 2

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__app_config_dirs"
  ansible.builtin.set_fact:
    __docker_stack__app_config_dirs: "{{ docker_stack__config_dirs|d([]) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Add service config dirs to __docker_stack__app_config_dirs fact"
  when: __docker_stack__app_configs[item.name].dirs | d([]) | length > 0
  ansible.builtin.set_fact:
    __docker_stack__app_config_dirs: "{{ (__docker_stack__app_config_dirs|d([])
      + __docker_stack__app_configs[item.name].dirs) | unique }}"
  loop: "{{ __docker_stack__service_groups }}"
  loop_control:
    label: "{{ item.name }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__app_config_dirs"
  ansible.builtin.debug:
     var: __docker_stack__app_config_dirs
#     verbosity: 2

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__app_config_files"
  ansible.builtin.set_fact:
    __docker_stack__app_config_files: "{{ docker_stack__config_files|d([]) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Add service config files to __docker_stack__app_config_files"
  when: __docker_stack__app_configs[item.name].files | d([]) | length > 0
  ansible.builtin.set_fact:
    __docker_stack__app_config_files: "{{ (__docker_stack__app_config_files|d([])
      + __docker_stack__app_configs[item.name].files) | unique }}"
  loop: "{{ __docker_stack__service_groups }}"
  loop_control:
    label: "{{ item.name }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__app_config_files"
  ansible.builtin.debug:
     var: __docker_stack__app_config_files
#     verbosity: 2

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__app_config_tpls"
  ansible.builtin.set_fact:
    __docker_stack__app_config_tpls: "{{ docker_stack__config_tpls|d([]) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Add service templates to __docker_stack__app_config_tpls"
  when: __docker_stack__app_configs[item.name].templates | d([]) | length > 0
  ansible.builtin.set_fact:
    __docker_stack__app_config_tpls: "{{ (__docker_stack__app_config_tpls|d([])
      + __docker_stack__app_configs[item.name].templates) | unique }}"
  loop: "{{ __docker_stack__service_groups }}"
  loop_control:
    label: "{{ item.name }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__app_config_tpls"
  ansible.builtin.debug:
     var: __docker_stack__app_config_tpls
#     verbosity: 2

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__service_group_configs_tpl"
  ansible.builtin.set_fact:
    __docker_stack__service_group_configs_tpl: "{{ docker_stack__service_group_configs_tpl|d({}) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Add docker services to __docker_stack__service_group_configs_tpl fact"
  when: __docker_stack__app_configs[item.name].docker_services is defined
  ansible.builtin.set_fact:
    __docker_stack__service_group_configs_tpl: "{{ __docker_stack__service_group_configs_tpl|d({})
      | combine({item.name: __docker_stack__app_configs[item.name].docker_services}) }}"
  loop: "{{ __docker_stack__service_groups }}"
  loop_control:
    label: "{{ item.name }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__service_group_configs_tpl"
  ansible.builtin.debug:
     var: __docker_stack__service_group_configs_tpl
     verbosity: 1

- name: "{{ __docker_stack__log_prefix__init_vars }} Combine app varname configs into __docker_stack__app_services"
  ansible.builtin.set_fact:
    __docker_stack__app_services: "{{ _service_list|from_yaml }}"
  vars:
    _service_list: |-
      {% for service_group in __docker_stack__service_groups %}
      {% if __docker_stack__service_group_configs_tpl[service_group.name]|d([])|length > 0 %}
      {% for key, container in __docker_stack__service_group_configs_tpl[service_group.name].items() %}
      {% if (container.active | d(True)) %}
      - {{ container.service_name if container.service_name is defined else key }}
      {% endif %}
      {% endfor %}
      {% endif %}
      {% endfor %}

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__app_services"
  ansible.builtin.debug:
     var: __docker_stack__app_services
#     verbosity: 2

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__container_configs"
  ansible.builtin.set_fact:
    __docker_stack__container_configs: "{{ docker_stack__container_configs|d({}) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Add service container configs to __docker_stack__container_configs"
  when: __docker_stack__app_configs[item.name].container_configs | d([]) | length > 0
  ansible.builtin.set_fact:
    __docker_stack__container_configs: "{{ __docker_stack__container_configs|d({}) | combine({item.name: __docker_stack__app_configs[item.name].container_configs}) }}"
  loop: "{{ __docker_stack__service_groups }}"
  loop_control:
    label: "{{ item.name }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Init __docker_stack__container_config_list"
  ansible.builtin.set_fact:
    __docker_stack__container_config_list: "{{ docker_stack__container_config_list| d([]) }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Add service container configs to __docker_stack__container_config_list"
  when: item.key in __docker_stack__service_group_configs_tpl
  ansible.builtin.set_fact:
    __docker_stack__container_config_list: "{{ __docker_stack__container_config_list| d([]) + [ { 'container_name' : item.key } | combine(item.value) ] }}"
  loop: "{{ __docker_stack__container_configs | dict2items }}"

- name: "{{ __docker_stack__log_prefix__init_vars }} Display __docker_stack__container_config_list"
  ansible.builtin.debug:
     var: __docker_stack__container_config_list

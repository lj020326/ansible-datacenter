---

- name: "{{ __docker_stack__log_prefix__run_compose }} Init __docker_stack__compose_state to present"
  ansible.builtin.set_fact:
    __docker_stack__compose_state: present

- name: "{{ __docker_stack__log_prefix__run_compose }} Set __docker_stack__compose_state to absent"
  when: docker_stack__action == 'down'
  ansible.builtin.set_fact:
    __docker_stack__compose_state: absent

- name: "{{ __docker_stack__log_prefix__run_compose }} Set __docker_stack__compose_restarted"
  when: docker_stack__action == 'restart'
  ansible.builtin.set_fact:
    __docker_stack__compose_restarted: yes

- name: "{{ __docker_stack__log_prefix__run_compose }} Set __docker_stack__compose_stopped"
  when: docker_stack__action == 'stop'
  ansible.builtin.set_fact:
    __docker_stack__compose_stopped: yes

- name: "{{ __docker_stack__log_prefix__run_compose }} Login to docker docker-registry"
  when: docker_stack__registry_login | d(False)
  ansible.builtin.debug:
    msg:
    - "docker_stack__registry_login={{ docker_stack__registry_login }}"
    - "docker_stack__action={{ docker_stack__action }}"
    - "docker_stack__registry_endpoint={{ docker_stack__registry_endpoint }}"
    - "docker_stack__registry_username={{ docker_stack__registry_username }}"

- name: "{{ __docker_stack__log_prefix__run_compose }} Login to docker docker-registry"
  ignore_errors: yes
  when:
    - docker_stack__registry_login | bool
    - docker_stack__action in ['setup','start','restart','up']
  community.docker.docker_login:
    registry: "{{ docker_stack__registry_endpoint }}"
    username: "{{ docker_stack__registry_username }}"
    password: "{{ docker_stack__registry_password }}"
    tls_hostname: "{{ docker_stack__registry_endpoint | split(':') | first }}"
#    ca_cert: ""
    debug: yes
    tls: yes

- name: "{{ __docker_stack__log_prefix__run_compose }} Display compose args"
  ansible.builtin.debug:
    msg:
      - "__docker_stack__compose_state: {{ __docker_stack__compose_state }}"
      - "__docker_stack__compose_restarted: {{ __docker_stack__compose_restarted|d('') }}"
      - "__docker_stack__compose_stopped: {{ __docker_stack__compose_stopped|d('') }}"
      - "__docker_stack__service_groups: {{ __docker_stack__service_groups|d('') }}"
      - "__docker_stack__app_services: {{ __docker_stack__app_services }}"

- name: "{{ __docker_stack__log_prefix__run_compose }} Start the docker stack"
  block:
    ## run docker compose
    ## ref: https://stackoverflow.com/questions/44962282/how-to-write-an-ansible-playbook-with-docker-compose
    - name: "{{ __docker_stack__log_prefix__run_compose }} Run docker-compose in {{ docker_stack__dir }}"
      when: not docker_stack__swarm_mode|d(False)|bool
      community.docker.docker_compose:
        project_src: "{{ docker_stack__dir }}"
        remove_orphans: "{{ docker_stack__remove_orphans }}"
        state: "{{ __docker_stack__compose_state }}"
        restarted: "{{ __docker_stack__compose_restarted | d(omit) }}"
        stopped: "{{ __docker_stack__compose_stopped | d(omit) }}"
    #    services: "{{ __docker_stack__app_services | d(omit) }}"
      register: __compose_result
      retries: 4
      delay: 30
      until: __compose_result is not failed

    - name: "{{ __docker_stack__log_prefix__run_compose }} Deploy docker stack in {{ docker_stack__dir }}"
      when: docker_stack__swarm_mode|d(False)|bool
      community.docker.docker_stack:
        name: "{{ docker_stack__compose_stack_name }}"
        compose: "{{ docker_stack__compose_stack_compose_file }}"
        prune: "{{ docker_stack__compose_stack_prune }}"
        state: "{{ __docker_stack__compose_state }}"
        resolve_image: "{{ docker_stack__compose_stack_resolve_image }}"
        with_registry_auth: yes
      register: __compose_result
      retries: 4
      delay: 30
      until: __compose_result is not failed

  rescue:
    - name: "{{ __docker_stack__log_prefix__run_compose }} Display __compose_result"
      ansible.builtin.debug:
        var: __compose_result
        verbosity: 1

    - name: "{{ __docker_stack__log_prefix__run_compose }} Init __restart_docker"
      ansible.builtin.set_fact:
        __restart_docker: no

    - name: "{{ __docker_stack__log_prefix__run_compose }} Set __restart_docker"
      ansible.builtin.set_fact:
#        __restart_docker: "{{ (__compose_result.msg | regex_search("INVALID_ZONE .* docker")) }}"
        __restart_docker: "{{ (__compose_result.msg | regex_search('Failed to program NAT chain')) }}"

    - name: "{{ __docker_stack__log_prefix__run_compose }} Display __restart_docker"
      ansible.builtin.debug:
        var: __restart_docker

    - name: "{{ __docker_stack__log_prefix__run_compose }} Re-emit failure"
      when: not __restart_docker
      vars:
        failed_task:
          result: '{{ ansible_failed_result }}'
      ansible.builtin.fail:
        msg: '{{ failed_task }}'

    - name: "{{ __docker_stack__log_prefix__run_compose }} Handle docker service exception"
      when: __restart_docker
      block:
      - name: "{{ ____docker_stack__log_prefix__run_compose }} Restart docker daemon"
        ansible.builtin.include_tasks: restart-docker-daemon.yml

      ## run docker compose
      ## ref: https://stackoverflow.com/questions/44962282/how-to-write-an-ansible-playbook-with-docker-compose
      - name: "{{ __docker_stack__log_prefix__run_compose }} Retry to Run the services defined in docker-compose.yml"
        community.docker.docker_compose:
          project_src: "{{ docker_stack__dir }}"
          remove_orphans: "{{ docker_stack__remove_orphans }}"
          state: "{{ __docker_stack__compose_state }}"
          restarted: "{{ __docker_stack__compose_restarted | d(omit) }}"
          stopped: "{{ __docker_stack__compose_stopped | d(omit) }}"
      #    services: "{{ __docker_stack__app_services | d(omit) }}"
        register: __compose_result
        retries: 3
        delay: 20
        until: __compose_result is not failed

- name: "{{ __docker_stack__log_prefix__run_compose }} Display __compose_result"
  ansible.builtin.debug:
    var: __compose_result
    verbosity: 1

---

- set_fact:
    log_prefix_local: "run-compose-action |"

- name: "{{ log_prefix_local }} Init __docker_stack_compose_state to present"
  set_fact:
    __docker_stack_compose_state: present

- name: "{{ log_prefix_local }} Set __docker_stack_compose_state to absent"
  when: docker_stack_action == 'down'
  set_fact:
    __docker_stack_compose_state: absent

- name: "{{ log_prefix_local }} Set __docker_stack_compose_restarted"
  when: docker_stack_action == 'restart'
  set_fact:
    __docker_stack_compose_restarted: yes

- name: "{{ log_prefix_local }} Set __docker_stack_compose_stopped"
  when: docker_stack_action == 'stop'
  set_fact:
    __docker_stack_compose_stopped: yes

- name: "{{ log_prefix_local }} Login to docker docker-registry"
  ignore_errors: yes
  when:
    - docker_stack_registry_login | bool
    - docker_stack_action in ['setup','start','restart','up']
  community.docker.docker_login:
    registry: "{{ docker_stack_registry_endpoint }}"
    username: "{{ docker_stack_registry_username }}"
    password: "{{ docker_stack_registry_password }}"
    ca_cert: ""
    debug: yes
    tls: yes

## run docker compose
## ref: https://stackoverflow.com/questions/44962282/how-to-write-an-ansible-playbook-with-docker-compose
- name: "{{ log_prefix_local }} Run the services defined in docker-compose.yml"
  community.docker.docker_compose:
    project_src: "{{ docker_stack_dir }}"
    remove_orphans: "{{ docker_stack_remove_orphans }}"
    state: "{{ __docker_stack_compose_state }}"
    restarted: "{{ __docker_stack_compose_restarted | d(omit) }}"
    stopped: "{{ __docker_stack_compose_stopped | d(omit) }}"
    services: "{{ docker_stack_services | d(omit) }}"
  register: __compose_result
  retries: 5
  delay: 20
  until: __compose_result is not failed

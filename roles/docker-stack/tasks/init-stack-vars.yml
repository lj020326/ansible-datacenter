---

- set_fact:
    log_prefix_local: "init-stack-vars |"

- name: "{{ log_prefix_local }} Get docker group / user id"
  block:

    ## ref: https://docs.ansible.com/ansible/latest/modules/getent_module.html
    - name: "{{ log_prefix_local }} Get docker group / user info"
      getent:
        key: "{{ docker_user_username }}"
        database: passwd

    - debug:
        var: getent_passwd

    - name: Get docker group info
      getent:
        database: group
        split: ':'
        key: docker
    - debug:
        var: getent_group

    - name: "{{ log_prefix_local }} Set docker user info facts"
      set_fact:
#        docker_user_uid: "{{ getent_passwd[docker_user_username][1] }}"
#        docker_user_gid: "{{ getent_passwd[docker_user_username][2] }}"
        docker_user_home: "{{ getent_passwd[docker_user_username][4] }}"
        docker_group_gid: "{{ getent_group['docker'][1] }}"

  rescue:
    - debug:
        msg: 'Docker user {{ docker_user_username }} not found - add and try again, :-)'

    - name: "{{ log_prefix_local }} Add user(s) to docker group"
      user:
        name: "{{ docker_user_username }}"
        groups: "docker"
        append: true
        gid: "{{ docker_user_gid | d(omit) }}"
        uid: "{{ docker_user_uid | d(omit) }}"

    - getent:
        key: "{{ docker_user_username }}"
        database: passwd

    - name: "{{ log_prefix_local }} Set docker user info facts"
      set_fact:
#        docker_user_uid: "{{ getent_passwd[docker_user_username][1] }}"
#        docker_user_gid: "{{ getent_passwd[docker_user_username][2] }}"
        docker_user_home: "{{ getent_passwd[docker_user_username][4] }}"

- name: "{{ log_prefix_local }} Display __docker_stack_services"
  debug:
     var: __docker_stack_services

- name: "{{ log_prefix_local }} Set the app proxy services vars"
  include_vars:  "app-services/base/docker_stack_proxy_{{ item }}.yml"
  with_items: "{{ __docker_stack_proxy_services }}"

- name: "{{ log_prefix_local }} Set the app proxy services vars specific to traefik version"
  include_vars:  "app-services/{{ docker_stack_traefik_version }}/docker_stack_proxy_{{ item }}.yml"
  with_items: "{{ __docker_stack_proxy_services }}"

- name: "{{ log_prefix_local }} Set the app services vars"
  include_vars:  "app-services/base/docker_stack_{{ item }}.yml"
  with_items: "{{ __docker_stack_services }}"

- name: "{{ log_prefix_local }} Set the app services vars specific to traefik version"
  include_vars:  "app-services/{{ docker_stack_traefik_version }}/docker_stack_{{ item }}.yml"
  with_items: "{{ __docker_stack_services }}"

- name: "{{ log_prefix_local }} Display docker stack info"
  debug:
    msg:
      - "docker_stack_service_route_name={{ docker_stack_service_route_name }}"
      - "docker_stack_internal_domain={{ docker_stack_internal_domain }}"
      - "docker_stack_external_domain={{ docker_stack_external_domain }}"
      - "docker_user_gid={{ docker_user_gid }}"
      - "docker_user_uid={{ docker_user_uid }}"

- name: "{{ log_prefix_local }} Set docker_stack_app_configs fact | Combine app varname configs into one dict"
  set_fact:
    docker_stack_app_configs: "{{ docker_stack_app_configs|d({}) | combine({ item: lookup('vars', q('varnames','^docker_stack_appspec__'+item.replace('-','_')+'$')| first | d('') )|d({}) }) }}"
  loop: "{{ __docker_stack_services }}"

- name: "{{ log_prefix_local }} Set docker_stack_proxy_configs fact | Combine proxy varname configs into one dict"
  set_fact:
    docker_stack_proxy_configs: "{{ docker_stack_proxy_configs|d({}) | combine({ item: lookup('vars', q('varnames','^docker_stack_proxyspec__'+item.replace('-','_')+'$')| first | d('') )|d({}) }) }}"
  loop: "{{ __docker_stack_proxy_services }}"

#- name: "{{ log_prefix_local }} Display docker_stack_app_configs"
#  debug:
#     var: docker_stack_app_configs

- name: "{{ log_prefix_local }} Display docker_stack_proxy_configs"
  when: docker_stack_proxy_configs is defined
  debug:
     var: docker_stack_proxy_configs

- name: "{{ log_prefix_local }} Set docker_stack_proxy_service_configs fact"
  when:
    - docker_stack_proxy_configs[item].proxy_config is defined
    - docker_stack_proxy_configs[item].proxy_config | length > 0
  set_fact:
    docker_stack_proxy_service_configs: "{{ docker_stack_proxy_service_configs|d({}) | combine(docker_stack_proxy_configs[item].proxy_config, recursive=True) }}"
#    docker_stack_proxy_service_configs: "{{ docker_stack_proxy_service_configs|d({}) | combine(docker_stack_proxy_configs[item], recursive=True) }}"
  loop: "{{ __docker_stack_proxy_services }}"

- name: "{{ log_prefix_local }} Display docker_stack_proxy_service_configs"
  debug:
     var: docker_stack_proxy_service_configs

- name: "{{ log_prefix_local }} Set docker_stack_networks fact"
  when:
    - docker_stack_app_configs[item].networks is defined
    - docker_stack_app_configs[item].networks | length > 0
  set_fact:
    docker_stack_networks: "{{ docker_stack_networks|d({}) | combine(docker_stack_app_configs[item].networks) }}"
  with_items: "{{ __docker_stack_services }}"

- name: "{{ log_prefix_local }} Display docker_stack_networks"
  debug:
     var: docker_stack_networks

- name: "{{ log_prefix_local }} Set docker_stack_volumes fact"
  when:
    - docker_stack_app_configs[item].volumes is defined
    - docker_stack_app_configs[item].volumes | length > 0
  set_fact:
    docker_stack_volumes: "{{ docker_stack_volumes|d({}) | combine(docker_stack_app_configs[item].volumes) }}"
  with_items: "{{ __docker_stack_services }}"

- name: "{{ log_prefix_local }} Display docker_stack_volumes"
  debug:
     var: docker_stack_volumes

- name: "{{ log_prefix_local }} Set docker_stack_config_dirs fact"
  when:
    - docker_stack_app_configs[item].dirs is defined
    - docker_stack_app_configs[item].dirs | length > 0
  set_fact:
    docker_stack_config_dirs: "{{ (docker_stack_config_dirs|d([]) + docker_stack_app_configs[item].dirs) | unique }}"
  with_items: "{{ __docker_stack_services }}"

- name: "{{ log_prefix_local }} Display docker_stack_config_dirs"
  debug:
     var: docker_stack_config_dirs

- name: "{{ log_prefix_local }} Set docker_stack_config_files fact"
  when:
    - docker_stack_app_configs[item].files is defined
    - docker_stack_app_configs[item].files | length > 0
  set_fact:
    docker_stack_config_files: "{{ (docker_stack_config_files|d([]) + docker_stack_app_configs[item].files) | unique }}"
  with_items: "{{ __docker_stack_services }}"

- name: "{{ log_prefix_local }} Display docker_stack_config_files"
  debug:
     var: docker_stack_config_files

- name: "{{ log_prefix_local }} Set docker_stack_config_tpls fact"
  when:
    - docker_stack_app_configs[item].templates is defined
    - docker_stack_app_configs[item].templates | length > 0
  set_fact:
    docker_stack_config_tpls: "{{ (docker_stack_config_tpls|d([]) + docker_stack_app_configs[item].templates) | unique }}"
  with_items: "{{ __docker_stack_services }}"

- name: "{{ log_prefix_local }} Display docker_stack_config_tpls"
  debug:
     var: docker_stack_config_tpls

- name: "{{ log_prefix_local }} Set docker_stack_services_tpl fact"
  when:
    - docker_stack_app_configs[item].docker_services is defined
  set_fact:
    docker_stack_services_tpl: "{{ docker_stack_services_tpl|d({}) | combine({item: docker_stack_app_configs[item].docker_services}) }}"
  with_items: "{{ __docker_stack_services }}"

- name: "{{ log_prefix_local }} Display docker_stack_services_tpl"
  debug:
     var: docker_stack_services_tpl

- name: "{{ log_prefix_local }} Set docker_stack_container_configs fact"
  when:
    - docker_stack_app_configs[item].container_configs is defined
    - docker_stack_app_configs[item].container_configs | length > 0
  set_fact:
    docker_stack_container_configs: "{{ docker_stack_container_configs|d({}) | combine({item: docker_stack_app_configs[item].container_configs}) }}"
  with_items: "{{ __docker_stack_services }}"

- name: "{{ log_prefix_local }} Set docker_stack_container_config_list fact"
  set_fact:
    docker_stack_container_config_list: "{{ docker_stack_container_config_list| d([]) + [ { 'container_name' : item.key } | combine(item.value) ] }}"
  when: "item.key in docker_stack_services_tpl"
  loop: "{{ docker_stack_container_configs | dict2items }}"

- name: "{{ log_prefix_local }} Display docker_stack_container_config_list"
  debug:
     var: docker_stack_container_config_list

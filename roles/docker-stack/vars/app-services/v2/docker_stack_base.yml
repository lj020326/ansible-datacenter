---
#__docker_stack_appspecs__base_traefik_image: traefik:v2.3
__docker_stack_appspecs__base_traefik_image: traefik:picodon # the picodon tag refers to v2.3.x

__docker_stack_appspecs__base_traefik_auth_labels:
    ## Middlewares
    traefik.http.routers.traefik-rtr.middlewares: chain-oauth@file

__docker_stack_appspecs__base_traefik_labels_default:
  #autoheal: true
  traefik.enable: true
  # HTTP-to-HTTPS Redirect
  traefik.http.routers.http-catchall.entrypoints: http
  traefik.http.routers.http-catchall.rule: HostRegexp(`{host:.+}`)
  traefik.http.routers.http-catchall.middlewares: redirect-to-https
  traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
  # HTTP Routers
  traefik.http.routers.traefik-rtr.entrypoints: https
  traefik.http.routers.traefik-rtr.rule: Host(`traefik.{{ docker_stack_internal_domain }}`)
  ## Services - API
  traefik.http.routers.traefik-rtr.service: api@internal
#  ## Middlewares
#  traefik.http.routers.traefik-rtr.middlewares: chain-oauth@file
  ## Healthcheck/ping
  #traefik.http.routers.ping.rule: Host(`traefik.{{ docker_stack_internal_domain }}`) && Path(`/ping`)
  #traefik.http.routers.ping.tls: true
  #traefik.http.routers.ping.service: ping@internal

#__docker_stack_appspecs__base_traefik_labels: "{{ __docker_stack_appspecs__base_traefik_labels_default | combine(__docker_stack_appspecs__base_traefik_auth_labels if 'auth' in docker_stack_services else {}) }}"
__docker_stack_appspecs__base_traefik_labels: "{{ docker_stack_traefik__traefik_labels | d(__docker_stack_appspecs__base_traefik_labels_default) }}"

docker_stack_appspec_config_tpls__base:
  - { src: "traefik/config-traefik-v2.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/traefik.yml", backup: yes }
#  - { src: "traefik/rules/serviceTransport.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/serviceTransport.yml" }
  - { src: "traefik/rules/middlewares.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/middlewares.yml"}
  - { src: "traefik/rules/middlewares-chains.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/middlewares-chains.yml"}
  - { src: "traefik/rules/certs-traefik.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/certs-traefik.yml"}
  - { src: "traefik/rules/tls-opts.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/tls-opts.yml"}
  - { src: "traefik/rules/tls-opts-strict.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/tls-opts-strict.yml"}
#  - { src: 'traefik/rules/rules.yml.j2', dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/rules.yml"}
  - { src: "docker-gc-exclude.conf.j2", dest: "{{ __docker_stack_appspecs__base_stack_dir }}/docker-gc/docker-gc-exclude" }
  - { src: 'compose.env.j2', dest: "{{ __docker_stack_appspecs__base_stack_dir }}/.env" }
  - { src: 'docker-compose.yml.j2', dest: "{{ __docker_stack_appspecs__base_stack_dir }}/docker-compose.yml", backup: yes }

## ref: https://github.com/htpcBeginner/docker-traefik/blob/master/docker-compose-t2.yml
docker_stack_appspec_services__base:
  ######### FRONTENDS ##########
  # Traefik Reverse Proxy
  traefik:
    container_name: traefik
    image: "{{ __docker_stack_appspecs__base_traefik_image }}"
    restart: unless-stopped
    networks:
#      - default
      - "{{ docker_stack_traefik_proxy_network }}"
      - socket_proxy
#    depends_on:
#      - socket-proxy
#    security_opt:
#      - no-new-privileges:true
    #healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 5s
    #  retries: 3
    ports:
#      - "{{ __docker_stack_appspecs__base_traefik_http }}:80"
#      - "{{ __docker_stack_appspecs__base_traefik_https }}:443"
      - target: 80
        published: "{{ __docker_stack_appspecs__base_traefik_http }}"
        protocol: tcp
        mode: host
      - target: 443
        published: "{{ __docker_stack_appspecs__base_traefik_https }}"
        protocol: tcp
        mode: host
      # - target: 8080
      #   published: 8080
      #   protocol: tcp
      #   mode: host
      #- target: 8081
      #  published: 8082
      #  protocol: tcp
      #  mode: host
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
      CLOUDFLARE_EMAIL: "{{ cloudflare_email }}"
      CLOUDFLARE_API_KEY: "{{ cloudflare_apikey }}"
      CF_API_EMAIL: "{{ cloudflare_email }}"
      CF_API_KEY: "{{ cloudflare_apikey }}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ __docker_stack_appspecs__base_traefik_dir }}:/etc/traefik"
      - "{{ __docker_stack_appspecs__base_traefik_dir }}/certs:/certs"
      - "{{ __docker_stack_appspecs__base_stack_dir }}/shared:/shared"
    labels: "{{ __docker_stack_appspecs__base_traefik_labels }}"


  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: fluencelabs/docker-socket-proxy
    restart: always
    networks:
      - socket_proxy
#      - "{{ docker_stack_traefik_proxy_network }}"
    privileged: true
    ports:
      - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network.
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      LOG_LEVEL: debug # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      EVENTS: 1
      PING: 1
      VERSION: 1
      ## Revoked by Default
      # Security critical
      AUTH: 0
      SECRETS: 0
      POST: 1 # Watchtower
      DELETE: 1 # Watchtower
        # GET Optons
      BUILD: 0
      COMMIT: 0
      CONFIGS: 0
      CONTAINERS: 1 # Traefik, portainer, etc.
      DISTRIBUTION: 0
      EXEC: 0
      IMAGES: 1 # Portainer, Watchtower
      INFO: 1 # Portainer
      NETWORKS: 1 # Portainer, Watchtower
      NODES: 0
      PLUGINS: 0
      SERVICES: 1 # Portainer
      SESSION: 0
      SWARM: 0
      SYSTEM: 0
      TASKS: 1 # Portainer
      VOLUMES: 1 # Portainer
      # POST Options
      CONTAINERS_CREATE: 1 # WatchTower
      CONTAINERS_START: 1 # WatchTower
      CONTAINERS_UPDATE: 1 # WatchTower
      # DELETE Options
      CONTAINERS_DELETE: 1 # WatchTower
      IMAGES_DELETE: 1 # WatchTower

  ## Whoami - useful for debugging traefik config related issues
  whoami:
    image: "containous/whoami"
    container_name: "whoami"
    hostname: "whoami"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    labels:
      traefik.enable: true
      ## HTTP Routers
#      traefik.http.routers.whoami-rtr.entrypoints: https
#      traefik.http.routers.whoami-rtr.rule: Host(`whoami.{{ docker_stack_external_domain }}`)
      traefik.http.routers.whoami-rtr-int.entrypoints: https
#      traefik.http.routers.whoami-rtr-int.rule: Host(`whoami.{{ docker_stack_internal_domain }}`)
      traefik.http.routers.whoami-rtr-int.rule: Host(`whoami.{{ docker_stack_external_domain }}`,`whoami.{{ docker_stack_internal_domain }}`)
#      traefik.http.routers.whoami-rtr-int.service: whoami-svc
#      traefik.http.services.whoami-svc.loadbalancer.server.port: 80

  ######### DOCKER RELATED ##########
  # Watchtower - Automatic Update of Containers/Apps
  watchtower:
#    image: v2tec/watchtower
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    networks:
      - default
      - socket_proxy
    depends_on:
      - socket-proxy
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: "{{ timezone }}"
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 30 12 * * *" # Everyday at 12:30
#      WATCHTOWER_NOTIFICATIONS: shoutrrr
      WATCHTOWER_NOTIFICATIONS_LEVEL: info
#      WATCHTOWER_NOTIFICATION_URL: "telegram://{{ __docker_stack_appspecs__base_tgram_bot_token }}@telegram?channels={{ __docker_stack_appspecs__base_tgram_chat_id }}"
      DOCKER_HOST: tcp://socket-proxy:2375
#      DOCKER_API_VERSION: "1.40"

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    restart: unless-stopped
    networks:
      - socket_proxy
    depends_on:
      - socket-proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      ## https://github.com/clockworksoul/docker-gc-cron
      - "{{ __docker_stack_appspecs__base_stack_dir }}/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude"
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: "{{ timezone }}"
      DOCKER_HOST: tcp://socket-proxy:2375

  # Traefik Certs Dumper - Extract LetsEncrypt Certificates - Traefik2 Compatible
  certdumper:
    container_name: traefik_certdumper
    image: humenius/traefik-certs-dumper:latest
    network_mode: none
    security_opt:
      - no-new-privileges:true
    # command: --restart-containers container1,container2,container3
    user: "{{ docker_user_uid }}:{{ docker_user_gid }}"
    environment:
      DOMAIN: "{{ docker_stack_external_domain }}"
    volumes:
      - "{{ __docker_stack_appspecs__base_traefik_dir }}/acme:/traefik:ro"
      - "{{ __docker_stack_appspecs__base_cert_dump_dir }}:/output:rw"
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Only needed if restarting containers (use Docker Socket Proxy instead)

  # Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: "portainer/portainer-ce:latest"
    restart: unless-stopped
    # command: -H unix:///var/run/docker.sock # # Use Docker Socket Proxy instead for improved security
#    command: -H tcp://socket-proxy:2375 # appears to not work. Workaround was to create a new socket-proxy:2375 endpoint on portainer settings
    environment:
      TZ: "{{ timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
#      - socket_proxy
#    depends_on:
#      - socket-proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "{{ __docker_stack_appspecs__base_stack_dir }}/portainer/data:/data"
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.portainer-rtr.entrypoints: https
      traefik.http.routers.portainer-rtr.rule: Host(`portainer.{{ docker_stack_internal_domain }}`)
#      ## Middlewares
#      traefik.http.routers.portainer-rtr.middlewares: chain-no-auth@file # No Authentication
#      traefik.http.routers.portainer-rtr.middlewares: chain-authelia@file # Authelia
#      traefik.http.routers.portainer-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      ## HTTP Services
      traefik.http.routers.portainer-rtr.service: portainer-svc
      traefik.http.services.portainer-svc.loadbalancer.server.port: 9000


  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
      - socket_proxy
    depends_on:
      - socket-proxy
    security_opt:
      - no-new-privileges:true
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
      DOCKER_HOST: tcp://socket-proxy:2375
    # volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.dozzle-rtr.entrypoints: https
      traefik.http.routers.dozzle-rtr.rule: HostHeader(`dozzle.{{ docker_stack_internal_domain }}`)
      ## Middlewares
#      traefik.http.routers.dozzle-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.dozzle-rtr.service: dozzle-svc
      traefik.http.services.dozzle-svc.loadbalancer.server.port: 8080


---

docker_stack_appspec_services__auth:

  # Google OAuth - Single Sign On using OAuth 2.0
  # https://hub.docker.com/r/thomseddon/traefik-forward-auth
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    # image: thomseddon/traefik-forward-auth:2.1-arm # Use this image with Raspberry Pi
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # Allow apps to bypass OAuth. Radarr example below will bypass OAuth if API key is present in the request (eg. from NZB360 mobile app).
    # While this is one way, the recommended way is to bypass authentication using Traefik labels shown in some of the apps later.
    # command: --rule.radarr.action=allow --rule.radarr.rule="Headers(`X-Api-Key`, `$RADARR_API_KEY`)"
    # command: --rule.sabnzbd.action=allow --rule.sabnzbd.rule="HeadersRegexp(`X-Forwarded-Uri`, `$SABNZBD_API_KEY`)"
    environment:
      CLIENT_ID: "{{ __docker_stack_appspecs__auth_google_client_id }}"
      CLIENT_SECRET: "{{ __docker_stack_appspecs__auth_google_client_secret }}"
      SECRET: "{{ __docker_stack_appspecs__auth_oauth_secret }}"
      COOKIE_DOMAIN: "{{ docker_stack_internal_domain }}"
      INSECURE_COOKIE: "false"
      AUTH_HOST: "oauth.{{ docker_stack_internal_domain }}"
      URL_PATH: /_oauth
      WHITELIST: "{{ __docker_stack_appspecs__auth_whitelist | list | join(',') }}"
      LOG_LEVEL: warn
      LOG_FORMAT: text
      LIFETIME: 86400 # 1 day
      DEFAULT_ACTION: auth
      DEFAULT_PROVIDER: google
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.oauth-rtr.tls: true
      traefik.http.routers.oauth-rtr.entrypoints: https
      traefik.http.routers.oauth-rtr.rule: Host(`oauth.{{ docker_stack_external_domain }}`)
      ## Middlewares
      traefik.http.routers.oauth-rtr.middlewares: chain-oauth@file
      ## HTTP Services
      traefik.http.routers.oauth-rtr.service: oauth-svc
      traefik.http.services.oauth-svc.loadbalancer.server.port: 4181

  # Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
    image: authelia/authelia:latest
    restart: unless-stopped
    user: "{{ docker_user_uid }}:{{ docker_user_gid }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    # ports:
    #   - "9091:9091"
    volumes:
      - "{{ __docker_stack_appspecs__auth_stack_dir }}/authelia:/config"
    environment:
      TZ: "{{ timezone }}"
#      AUTHELIA_JWT_SECRET_FILE: /run/secrets/authelia_jwt_secret
#      AUTHELIA_SESSION_SECRET_FILE: /run/secrets/authelia_session_secret
#      AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE: /run/secrets/authelia_storage_mysql_password
#      AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /run/secrets/authelia_notifier_smtp_password
#      AUTHELIA_DUO_API_SECRET_KEY_FILE: /run/secrets/authelia_duo_api_secret_key
#    secrets:
#      - authelia_jwt_secret
#      - authelia_session_secret
#      - authelia_storage_mysql_password
#      - authelia_notifier_smtp_password
#      - authelia_duo_api_secret_key
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.authelia-rtr.entrypoints: https
      traefik.http.routers.authelia-rtr.rule: HostHeader(`authelia.{{ docker_stack_internal_domain }}`)
      traefik.http.routers.authelia-rtr.tls: true
      ## Middlewares
      traefik.http.routers.authelia-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.authelia-rtr.service: authelia-svc
      traefik.http.services.authelia-svc.loadbalancer.server.port: 9091


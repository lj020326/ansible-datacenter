---

docker_stack_appspec_services__diag:

  ## ref: https://docs.linuxserver.io/images/docker-wireshark
  ## ref: https://github.com/ffeldhaus/docker-wireshark
  wireshark:
    image: ghcr.io/linuxserver/wireshark
    container_name: wireshark
    cap_add:
      - NET_ADMIN
    network_mode: host
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
    volumes:
      - "{{ __docker_stack_appspecs__diag_stack_dir }}/wireshark/config:/config"
    ports:
      - 3000:3000 #optional
    restart: unless-stopped

  # SmokePing - Network latency Monitoring
  smokeping:
    image: linuxserver/smokeping:latest
    container_name: smokeping
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    #    ports:
    #     - "$SMOKEPING_PORT:80"
    volumes:
      - "{{ __docker_stack_appspecs__diag_stack_dir }}/smokeping/config:/config"
      - "{{ __docker_stack_appspecs__diag_stack_dir }}/smokeping/data:/data"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.smokeping-rtr.entrypoints: https
      traefik.http.routers.smokeping-rtr.rule: HostHeader(`smokeping.{{ docker_stack_internal_domain }}`)
      ## Middlewares
      traefik.http.routers.smokeping-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.smokeping-rtr.service: smokeping-svc
      traefik.http.services.smokeping-svc.loadbalancer.server.port: 80

  # Glances - System Information
  glances:
    image: nicolargo/glances:latest
    container_name: glances
    restart: unless-stopped
    privileged: true
    # network_mode: host
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
      - socket_proxy
    # depends_on:
    #   - socket-proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$GLANCES_PORT:61208"
    pid: host
    volumes:
      - "{{ __docker_stack_appspecs__diag_stack_dir }}/glances/glances.conf:/glances/conf/glances.conf" # Use this if you want to add a glances.conf file
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
    environment:
      # GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
      GLANCES_OPT: "-w"
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.glances-rtr.entrypoints: https
      traefik.http.routers.glances-rtr.rule: HostHeader(`glances.{{ docker_stack_internal_domain }}`)
      ## Middlewares
      traefik.http.routers.glances-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.glances-rtr.service: glances-svc
      traefik.http.services.glances-svc.loadbalancer.server.port: 61208


  # VSCode - VSCode Editing
  # Had to do chmod 775 vscode folder, start as root, and change user id
  vscode:
    image: codercom/code-server:latest
    container_name: vscode
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack_appspecs__diag_stack_dir }}/vscode:/home/coder"
      - "{{ __docker_stack_appspecs__diag_stack_dir }}:/home/coder/docker"
      - "{{ __docker_stack_appspecs__diag_stack_dir }}/shared:/server"
    environment:
      PASSWORD: $VSCODE_PASSWORD
      # Run as root first, create the directories, then change permissions to user:docker and 775. Disable run as root below.
      user: "{{ docker_user_uid }}:{{ docker_user_gid }}"
      # user: "0"
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.vscode-rtr.entrypoints: https
      traefik.http.routers.vscode-rtr.rule: HostHeader(`code.{{ docker_stack_internal_domain }}`)
      ## Middlewares
      traefik.http.routers.vscode-rtr.middlewares: chain-authelia@file
      ## HTTP Services
      traefik.http.routers.vscode-rtr.service: vscode-svc
      traefik.http.services.vscode-svc.loadbalancer.server.port: 8080

  # qDirStat - Directory Statistics
  qdirstat:
    image: jlesage/qdirstat:latest
    container_name: qdirstat
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$QDIRSTAT_PORT:5800"
    volumes:
      # Use this if you want to add a glances.conf file
      - "{{ __docker_stack_appspecs__diag_stack_dir }}/qdirstat/config:/config"
      - "{{ __docker_stack_appspecs__diag_storage_dir }}:/storage:ro"
      - "{{ __docker_stack_appspecs__diag_nas_dir }}:/nas"
    environment:
      USER_ID: "{{ docker_user_uid }}"
      GROUP_ID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
      UMASK: 002
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: $QDIRSTAT_VNC_PASSWD
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.qdirstat-rtr.entrypoints: https
      traefik.http.routers.qdirstat-rtr.rule: Host(`qdirstat.{{ docker_stack_internal_domain }}`)
      ## Middlewares
#      traefik.http.routers.qdirstat-rtr.middlewares: chain-oauth@file
      ## HTTP Services
      traefik.http.routers.qdirstat-rtr.service: qdirstat-svc
      traefik.http.services.qdirstat-svc.loadbalancer.server.port: 5800

  # Guacamole - Remote desktop, SSH, on Telnet on any HTML5 Browser
  # Create all databases and tables first
  guacamole:
    image: guacamole/guacamole:latest
    container_name: guacamole
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$GUACAMOLE_PORT:8080"
    environment:
      GUACD_HOSTNAME: guacd
      MYSQL_HOSTNAME: $DB_HOST
      MYSQL_PORT: $DB_PORT
      MYSQL_DATABASE_FILE: /run/secrets/guac_db_name
      MYSQL_USER_FILE: /run/secrets/guac_mysql_user
      MYSQL_PASSWORD_FILE: /run/secrets/guac_mysql_password
    secrets:
      - guac_db_name
      - guac_mysql_user
      - guac_mysql_password
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.guacamole-rtr.entrypoints: https
      traefik.http.routers.guacamole-rtr.rule: Host(`guac.{{ docker_stack_internal_domain }}`)
      ## Middlewares
      traefik.http.routers.guacamole-rtr.middlewares: chain-oauth@file,add-guacamole
      traefik.http.middlewares.add-guacamole.addPrefix.prefix: /guacamole
      ## HTTP Services
      traefik.http.routers.guacamole-rtr.service: guacamole-svc
      traefik.http.services.guacamole-svc.loadbalancer.server.port: 8080

  # Guacamole Daemon - Needed for Guacamole
  guacd:
    image: guacamole/guacd
    container_name: guacd
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true

  # StatPing - Status Page & Monitoring Server
  statping:
    image: hunterlong/statping:latest
    container_name: statping
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$STATPING_PORT:8080"
    volumes:
      - "{{ __docker_stack_appspecs__diag_stack_dir }}/statping:/app"
    environment:
      VIRTUAL_HOST: localhost
      VIRTUAL_PORT: 8080
      DB_CONN: postgres
      DB_HOST: postgres
      DB_USER: $STATPING_DB_USER
      DB_PASS: $STATPING_DB_PASS
      DB_DATABASE: $STATPING_DB
      IS_DOCKER: "true"
      DISABLE_LOGS: "false"
      NAME: StatPing
      DESCRIPTION: Monitor web services
    labels:
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.statping-rtr.entrypoints: https
      traefik.http.routers.statping-rtr.rule: Host(`statping.{{ docker_stack_internal_domain }}`)
      ## Middlewares
      traefik.http.routers.statping-rtr.middlewares: chain-no-auth@file
      ## HTTP Services
      traefik.http.routers.statping-rtr.service: statping-svc
      traefik.http.services.statping-svc.loadbalancer.server.port: 8080

  # SMTP to Telegram - Send SMTP Notifications as Telegram Message
  # Use case: https://github.com/htpcBeginner/docker-traefik/issues/78
  smtp_to_telegram:
    image: kostyaesmukov/smtp_to_telegram
    container_name: smtp_to_telegram
    restart: always
    networks:
      - default
    environment:
      TZ: $TZ
      ST_TELEGRAM_CHAT_IDS: $TGRAM_CHAT_ID
      ST_TELEGRAM_BOT_TOKEN: $TGRAM_BOT_TOKEN
      ST_TELEGRAM_MESSAGE_TEMPLATE: "{subject}\\n{body}"


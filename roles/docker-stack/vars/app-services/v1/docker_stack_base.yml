---

__docker_stack_appspecs__base_traefik_image: traefik:v1.7

docker_stack_appspec_config_tpls__base:
  - { src: "traefik/config-traefik-v1.toml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/traefik.toml", backup: yes }
  - { src: "traefik/rules/middlewares.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/middlewares.yml"}
  - { src: "traefik/rules/middlewares-chains.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/middlewares-chains.yml"}
  - { src: "traefik/rules/certs-traefik.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/certs-traefik.yml"}
  - { src: "traefik/rules/tls-opts.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/tls-opts.yml"}
#  - { src: 'traefik/rules/rules.yml.j2', dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/rules.yml"}
  - { src: "docker-gc-exclude.conf.j2", dest: "{{ __docker_stack_appspecs__base_stack_dir }}/docker-gc/docker-gc-exclude" }
  - { src: 'compose.env.j2', dest: "{{ __docker_stack_appspecs__base_stack_dir }}/.env" }
  - { src: 'docker-compose.yml.j2', dest: "{{ __docker_stack_appspecs__base_stack_dir }}/docker-compose.yml", backup: yes }

docker_stack_appspec_services__base:
  ######### FRONTENDS ##########
  # Traefik Reverse Proxy
  traefik:
    container_name: traefik
    image: "{{ __docker_stack_appspecs__base_traefik_image }}"
    restart: unless-stopped
    networks:
      - default
      - "{{ docker_stack_traefik_proxy_network }}"
#    depends_on:
#      - socket-proxy
#    security_opt:
#      - no-new-privileges:true
    #healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 5s
    #  retries: 3
    ports:
#      - "{{ __docker_stack_appspecs__base_traefik_http }}:80"
#      - "{{ __docker_stack_appspecs__base_traefik_https }}:443"
      - target: 80
        published: "{{ __docker_stack_appspecs__base_traefik_http }}"
        protocol: tcp
        mode: host
      - target: 443
        published: "{{ __docker_stack_appspecs__base_traefik_https }}"
        protocol: tcp
        mode: host
      # - target: 8080
      #   published: 8080
      #   protocol: tcp
      #   mode: host
      #- target: 8081
      #  published: 8082
      #  protocol: tcp
      #  mode: host
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
      CLOUDFLARE_EMAIL: "{{ cloudflare_email }}"
      CLOUDFLARE_API_KEY: "{{ cloudflare_apikey }}"
      CF_API_EMAIL: "{{ cloudflare_email }}"
      CF_API_KEY: "{{ cloudflare_apikey }}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ __docker_stack_appspecs__base_traefik_dir }}:/etc/traefik"
      - "{{ __docker_stack_appspecs__base_traefik_dir }}/certs:/certs"
      - "{{ __docker_stack_appspecs__base_stack_dir }}/shared:/shared"
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      - "traefik.backend=traefik"
#        - "traefik.frontend.rule=Host:traefik.{{ docker_stack_external_domain }},traefik.{{ docker_stack_internal_domain }}"
#        - "traefik.frontend.rule=Host:{{ docker_stack_external_domain }}; PathPrefixStrip: /traefik"
      - "traefik.frontend.rule=Host:traefik.{{ docker_stack_internal_domain }}"
      - "traefik.port=8080"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
#        - "traefik.frontend.headers.SSLHost={{ docker_stack_external_domain }}"
      - "traefik.frontend.headers.SSLHost=traefik.{{ docker_stack_internal_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
#      - "traefik.frontend.headers.frameDeny=true"
      - "traefik.frontend.headers.customFrameOptionsValue: allow-from https:{{ docker_stack_internal_domain }}"

  ## Whoami - useful for debugging traefik config related issues
  whoami:
    image: "containous/whoami"
    container_name: "whoami"
    hostname: "whoami"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.rule=Host:whoami.{{ docker_stack_internal_domain }},whoami.{{ docker_stack_external_domain }}"

  ######### DOCKER RELATED ##########
  # Watchtower - Automatic Update of Containers/Apps
  watchtower:
#    image: v2tec/watchtower
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
#    networks:
#      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: "{{ timezone }}"
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 30 12 * * *" # Everyday at 12:30
      WATCHTOWER_NOTIFICATIONS: shoutrrr
#      WATCHTOWER_NOTIFICATION_URL: "telegram://{{ __docker_stack_appspecs__base_tgram_bot_token }}@telegram?channels={{ __docker_stack_appspecs__base_tgram_chat_id }}"
      WATCHTOWER_NOTIFICATIONS_LEVEL: info
#      DOCKER_HOST: tcp://socket-proxy:2375
#      DOCKER_API_VERSION: "1.40"

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    container_name: docker-gc
    image: clockworksoul/docker-gc-cron:latest
    restart: unless-stopped
    network_mode: none
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      ## https://github.com/clockworksoul/docker-gc-cron
      - "{{ __docker_stack_appspecs__base_stack_dir }}/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude"
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: "{{ timezone }}"
#      DOCKER_HOST: tcp://socket-proxy:2375

  # Traefik Certs Dumper - Extract LetsEncrypt Certificates - Traefik2 Compatible
  certdumper:
    container_name: traefik_certdumper
    image: humenius/traefik-certs-dumper:latest
    network_mode: none
    security_opt:
      - no-new-privileges:true
    # command: --restart-containers container1,container2,container3
    user: "{{ docker_user_uid }}:{{ docker_user_gid }}"
    environment:
#      DOMAIN: "{{ docker_stack_internal_domain }}"
      DOMAIN: "{{ docker_stack_external_domain }}"
    volumes:
      - "{{ __docker_stack_appspecs__base_traefik_dir }}/acme:/traefik:ro"
      - "{{ __docker_stack_appspecs__base_stack_dir }}/shared/certs:/output:rw"
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Only needed if restarting containers (use Docker Socket Proxy instead)

  #Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: "portainer/portainer-ce:latest"
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    environment:
      TZ: "{{ timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "{{ docker_stack_dir }}/portainer/data:/data"
      - "{{ docker_stack_dir }}/shared:/shared"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=portainer"
      - "traefik.frontend.rule=Host:portainer.{{ docker_stack_internal_domain }}"
#        - "traefik.frontend.rule=Host:{{ docker_stack_external_domain }}; PathPrefixStrip: /portainer"
      - "traefik.port=9000"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
#      - "traefik.frontend.headers.SSLHost={{ docker_stack_external_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"


docker_stack_appspec__base:
  dirs: "{{ docker_stack_appspec_config_dirs__base | d([]) }}"
  files: "{{ docker_stack_appspec_config_files__base | d([]) }}"
  templates: "{{ docker_stack_appspec_config_tpls__base | d([]) }}"
  firewalld_services: "{{ docker_stack_firewalld_appspec_services__base | d([]) }}"
  firewalld_ports: "{{ docker_stack_firewalld_appspec_ports__base | d([]) }}"
  networks: "{{ docker_stack_appspec_networks__base | d({}) }}"
  volumes: "{{ docker_stack_appspec_volumes__base | d({}) }}"
  docker_services: "{{ docker_stack_appspec_services__base | d({}) }}"

---

docker_stack_appspec_services__media:
  ## Heimdall - unified Web interface
  ## ref: https://git.sogenius.io/hos/mediaflix/blob/master/docker-compose.yml
  heimdall:
#      image: "linuxserver/heimdall"
    image: "linuxserver/heimdall:latest"
    container_name: heimdall
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/heimdall:/config"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
#      ports:
#        - 80:80
#        - 443:443
#      mem_limit: 4096m
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.backend=heimdall"
      - "traefik.frontend.rule=Host:heimdall.{{ docker_stack_external_domain }},{{ docker_stack_external_domain }}"
      - "traefik.frontend.auth.basic.usersFile=/shared/.htpasswd"
      - "traefik.port=443"
      - "traefik.protocol=https"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost={{ docker_stack_external_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"

  ## internal
  heimdall-internal:
#      image: "linuxserver/heimdall"
    image: "linuxserver/heimdall:latest"
    container_name: heimdall-internal
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/heimdall-int:/config"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.backend=heimdall-internal"
      - "traefik.frontend.rule=Host:heimdall.{{ docker_stack_internal_domain }}"
      - "traefik.port=443"
      - "traefik.protocol=https"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"


#    ### Organizer - Unified HTPC/Home Server Web Interface
#    ## basic auth enabled
#    ## ref: https://github.com/containous/traefik/issues/3673
#    organizr:
#      container_name: organizr
#      restart: always
#      image: lsiocommunity/organizr
#      environment:
#        PUID: "{{ docker_user_uid }}"
#        PGID: "{{ docker_user_gid }}"
#        TZ: "{{ timezone }}"
#      networks:
#        - "{{ docker_stack_traefik_proxy_network }}"
#      volumes:
#        - {{ __docker_stack_appspecs__media_config_dir }}/organizr:/config
#        - {{ __docker_stack_appspecs__media_config_dir }}/shared:/shared
#      labels:
#        - "traefik.enable=true"
#        - "traefik.backend=organizr"
#        - "traefik.frontend.rule=Host:organizr.{{ docker_stack_internal_domain }}"
#  #      - "traefik.frontend.rule=Host:organizr.{{ docker_stack_external_domain }},organizr.{{ docker_stack_internal_domain }}"
#  #      - "traefik.frontend.rule=Host:{{ docker_stack_external_domain }}; PathPrefixStrip: /organizr"
#  #      - "traefik.frontend.auth.basic.usersFile=/shared/.htpasswd"
#        - "traefik.port=80"
#        - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
#        - "traefik.frontend.headers.SSLRedirect=true"
#        - "traefik.frontend.headers.STSSeconds=315360000"
#  #      - "traefik.frontend.headers.browserXSSFilter=true"
#        - "traefik.frontend.headers.contentTypeNosniff=true"
#  #      - "traefik.frontend.headers.forceSTSHeader=true"
#        - "traefik.frontend.headers.SSLHost={{ docker_stack_external_domain }}"
#        - "traefik.frontend.headers.STSIncludeSubdomains=true"
#        - "traefik.frontend.headers.STSPreload=true"
#        - "traefik.frontend.headers.frameDeny=true"

######### SMART HOME APPS ##########

#    ### Home Assistant - Smart Home Hub
#    homeassistant:
#      container_name: homeassistant
#      restart: always
#      image: homeassistant/home-assistant
#      devices:
#        - /dev/ttyUSB0:/dev/ttyUSB0
#        - /dev/ttyUSB1:/dev/ttyUSB1
#        - /dev/ttyACM0:/dev/ttyACM0
#      mem_limit: 300m
#      privileged: true
#      environment:
#        PUID: "{{ docker_user_uid }}"
#        PGID: "{{ docker_user_gid }}"
#        TZ: "{{ timezone }}"
#      networks:
#        - "{{ docker_stack_traefik_proxy_network }}"
#        - default
#      volumes:
#        - {{ __docker_stack_appspecs__media_config_dir }}/homeassistant:/config
#        - /etc/localtime:/etc/localtime:ro
#        - {{ __docker_stack_appspecs__media_config_dir }}/shared:/shared
#      labels:
#        - "traefik.enable=true"
#        - "traefik.backend=homeassistant"
#        - "traefik.frontend.rule=Host:hass.{{ docker_stack_external_domain }},hass.{{ docker_stack_internal_domain }}"
#        - "traefik.port=8123"
#        - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
#        - "traefik.frontend.headers.SSLRedirect=true"
#        - "traefik.frontend.headers.STSSeconds=315360000"
#        - "traefik.frontend.headers.browserXSSFilter=true"
#        - "traefik.frontend.headers.contentTypeNosniff=true"
#        - "traefik.frontend.headers.forceSTSHeader=true"
#        - "traefik.frontend.headers.SSLHost={{ docker_stack_external_domain }}"
#        - "traefik.frontend.headers.STSIncludeSubdomains=true"
#        - "traefik.frontend.headers.STSPreload=true"
#        - "traefik.frontend.headers.frameDeny=true"

  ######### DOWNLOADERS ##########

  ## TODO: replace this with separate openvpn container that can be used for transmission/sabnzbd/etc
  ## ref: see response #8 here:
  ##   https://plexguide.com/threads/howto-use-single-and-central-vpn-container-for-all-your-other-apps.2563/
  ## ref: https://github.com/bubuntux/nordvpn (no longer works with this traefik docker-compose config)
  ## ref: https://forum.openmediavault.org/index.php/Thread/22164-Running-containers-through-an-OpenVPN-container/
  ## ref: https://raw.githubusercontent.com/dperson/openvpn-client/master/docker-compose.yml
  ## ref: https://registry.hub.docker.com/r/bubuntux/nordvpn/tags
  ## ref: https://github.com/azinchen/nordvpn
  openvpn:
#      image: bubuntux/nordvpn:latest
    image: "azinchen/nordvpn:latest"
    container_name: openvpn
    cap_add:
      - net_admin
    dns:
      - 8.8.4.4
      - 8.8.8.8
    restart: unless-stopped
    devices:
      - /dev/net/tun
    networks:
      - vpn
    ports:
      - "{{ __docker_stack_appspecs__media_openvpn_http_port }}:80"
#        - "{{ __docker_stack_appspecs__media_bittorrent_port }}:9091"
      - "{{ __docker_stack_appspecs__media_sabnzbd_port }}:8080"
    environment:
      USER: "{{ __docker_stack_appspecs__media_openvpn_username }}"
      PASS: "{{ __docker_stack_appspecs__media_openvpn_password }}"
      TZ: "{{ timezone }}"
      COUNTRY: "United_States"
      CATEGORY: "P2P"
      NETWORK: "192.168.0.0/16"
#        PROTOCOL: "UDP"
      OPENVPN_OPTS: '--pull-filter ignore "ping-restart" --ping-exit 180'

  ## ref: https://plexguide.com/threads/howto-use-single-and-central-vpn-container-for-all-your-other-apps.2563/ (works)
  ## ref: https://github.com/gwmullin/docker_stuff/blob/master/docker-compose.yml
  ## ref: https://hub.docker.com/r/dperson/transmission/
  transmission:
#      image: dperson/transmission
#      image: "dperson/transmission"
    image: "dperson/transmission:latest"
    container_name: transmission
    depends_on:
      - openvpn
    restart: always
    environment:
      USERID: "{{ docker_user_uid }}"
      GROUPID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
      TRUSER: "{{ __docker_stack_appspecs__media_transmission_rpc_username }}"
      TRPASSWD: "{{ __docker_stack_appspecs__media_transmission_rpc_password }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
      - vpn
    ports:
      - "9091:9091"
    volumes:
      - "{{ __docker_stack_appspecs__media_downloads }}:/var/lib/transmission-daemon/downloads"
      - "{{ __docker_stack_appspecs__media_config_dir }}/transmission:/var/lib/transmission-daemon/info"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=transmission"
      - "traefik.frontend.rule=Host:transmission.{{ docker_stack_internal_domain }}"
      - "traefik.port=9091"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"

#    ## SABnzbd â€“ Usenet (NZB) Downloader
#    sabnzbd:
#      image: linuxserver/sabnzbd
#      container_name: sabnzbd
#      depends_on:
#        - openvpn
#      restart: always
#      environment:
#        PUID: "{{ docker_user_uid }}"
#        PGID: "{{ docker_user_gid }}"
#        TZ: "{{ timezone }}"
#      networks:
#        - "{{ docker_stack_traefik_proxy_network }}"
#        - vpn
#      volumes:
#        - "{{ __docker_stack_appspecs__media_config_dir }}/sabnzbd:/config"
##        - "{{ __docker_stack_appspecs__media_downloads_complete }}:/downloads"
#        - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
#        - "{{ __docker_stack_appspecs__media_downloads_incomplete }}:/incomplete-downloads"
#        - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
#      labels:
#        - "traefik.enable=true"
#        - "traefik.backend=sabnzbd"
#        - "traefik.frontend.rule=Host:sabnzbd.{{ docker_stack_internal_domain }}"
#        - "traefik.port=8080"
#        - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
#        - "traefik.frontend.headers.SSLRedirect=true"
#        - "traefik.frontend.headers.STSSeconds=315360000"
#        - "traefik.frontend.headers.browserXSSFilter=true"
#        - "traefik.frontend.headers.contentTypeNosniff=true"
#        - "traefik.frontend.headers.forceSTSHeader=true"
#        - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
#        - "traefik.frontend.headers.STSIncludeSubdomains=true"
#        - "traefik.frontend.headers.STSPreload=true"
#        - "traefik.frontend.headers.frameDeny=true"
#      healthcheck:
#        test: ["CMD", "curl", "-f", "http://localhost:8080"]
#        interval: 60s
#        timeout: 15s
#        retries: 3
#        start_period: 120s

#    nzbget:
#      image: linuxserver/nzbget
#      container_name: nzbget
#  #    volumes:
#  #      - /opt/appdata/nzbget/config:/config
#  #      - /opt/downloads:/downloads
#  #      - /mnt/disk1/downloads/complete:/downloads/complete
#  #    ports:
#  #      - 27020:6789
#      depends_on:
#        - openvpn
#      restart: always
#      environment:
#        PUID: "{{ docker_user_uid }}"
#        PGID: "{{ docker_user_gid }}"
#        TZ: "{{ timezone }}"
#      networks:
#        - "{{ docker_stack_traefik_proxy_network }}"
#        - vpn
#      volumes:
#        - {{ __docker_stack_appspecs__media_config_dir }}/sabnzbd:/config
#        - {{ __docker_stack_appspecs__media_downloads }}:/downloads
#        - {{ __docker_stack_appspecs__media_downloads_complete }}:/downloads/complete
#      labels:
#        - "traefik.enable=true"
#        - "traefik.backend=nzbget"
#        - "traefik.frontend.rule=Host:nzbget.{{ docker_stack_internal_domain }}"
#        - "traefik.port=6789"
#        - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
#        - "traefik.frontend.headers.SSLRedirect=true"
#        - "traefik.frontend.headers.STSSeconds=315360000"
#        - "traefik.frontend.headers.browserXSSFilter=true"
#        - "traefik.frontend.headers.contentTypeNosniff=true"
#        - "traefik.frontend.headers.forceSTSHeader=true"
#        - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
#        - "traefik.frontend.headers.STSIncludeSubdomains=true"
#        - "traefik.frontend.headers.STSPreload=true"
#        - "traefik.frontend.headers.frameDeny=true"

#  ######### PERSONAL VIDEO RECORDERS ##########
#    ## CouchPotato â€“ Movie Download and Management (Alternative)
#    couchpotato:
#      image: "linuxserver/couchpotato"
#      hostname: couchpotato
#      container_name: "couchpotato"
#      restart: "unless-stopped"
#      environment:
#        PUID: "{{ docker_user_uid }}"
#        PGID: "{{ docker_user_gid }}"
#        TZ: "{{ timezone }}"
#        UMASK_SET: "002"
#      networks:
#        - "{{ docker_stack_traefik_proxy_network }}"
#      volumes:
#        - "{{ __docker_stack_appspecs__media_config_dir }}/couchpotato:/config"
#        - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
#        - "{{ __docker_stack_appspecs__media_movies_path }}:/movies"
#        - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
#        - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
#      labels:
#        - "traefik.enable=true"
#        - "traefik.backend=couchpotato"
#        - "traefik.frontend.rule=Host:couchpotato.{{ docker_stack_internal_domain }}"
##        - "traefik.frontend.rule=Host:{{ docker_stack_external_domain }}; PathPrefix: /sabnzbd"
##        - "traefik.frontend.auth.basic.usersFile=/shared/.htpasswd"
#        - "traefik.port=5050"
#        - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
#        - "traefik.frontend.headers.SSLRedirect=true"
#        - "traefik.frontend.headers.STSSeconds=315360000"
#        - "traefik.frontend.headers.browserXSSFilter=true"
#        - "traefik.frontend.headers.contentTypeNosniff=true"
#        - "traefik.frontend.headers.forceSTSHeader=true"
#        - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
#        - "traefik.frontend.headers.STSIncludeSubdomains=true"
#        - "traefik.frontend.headers.STSPreload=true"
#        - "traefik.frontend.headers.frameDeny=true"

  # Sonarr â€“ TV Show Download and Management
  sonarr:
    hostname: sonarr
    image: "linuxserver/sonarr:5.14"
    container_name: "sonarr"
    depends_on:
      - transmission
#        - sabnzbd
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
      - vpn
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/sonarr:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
      - "{{ __docker_stack_appspecs__media_tv_path }}:/tv"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
#        - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
      - "{{ __docker_stack_appspecs__media_scripts_dir }}:/scripts"
      - "{{ ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=sonarr"
#        - "traefik.frontend.rule=Host:sonarr.{{ docker_stack_external_domain }},sonarr.{{ docker_stack_internal_domain }}"
      - "traefik.frontend.rule=Host:sonarr.{{ docker_stack_internal_domain }}"
      - "traefik.port=8989"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"

  # Radarr â€“ Movie Download and Management
  radarr:
#      image: "linuxserver/radarr"
#      image: "linuxserver/radarr:latest"
#      image: "linuxserver/radarr:version-3.0.0.3989"
    image: "linuxserver/radarr:nightly"
    container_name: "radarr"
    depends_on:
      - transmission
#        - sabnzbd
#      mem_limit: 500m
#      ports:
#        - "XXXX:7878"
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack_appspecs__media_config_dir }}/radarr:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
      - "{{ __docker_stack_appspecs__media_movies_path }}:/movies"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
#        - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
#        - "/etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro"
      - "{{ ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=radarr"
#        - "traefik.frontend.rule=Host:radarr.{{ docker_stack_external_domain }},radarr.{{ docker_stack_internal_domain }}"
      - "traefik.frontend.rule=Host:radarr.{{ docker_stack_internal_domain }}"
      - "traefik.port=7878"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"

  #LIDARR - Music Download and Management
  lidarr:
    image: "linuxserver/lidarr:latest"
#      image: "linuxserver/lidarr"
#      image: "linuxserver/lidarr:master"
#      image: "linuxserver/lidarr:preview"
    hostname: lidarr
    container_name: "lidarr"
    depends_on:
      - transmission
#        - sabnzbd
#      mem_limit: 300m
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack_appspecs__media_config_dir }}/lidarr:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
      - "{{ __docker_stack_appspecs__media_music_path }}:/music"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
#        - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
      - "{{ ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=lidarr"
#        - "traefik.frontend.rule=Host:lidarr.{{ docker_stack_external_domain }},lidarr.{{ docker_stack_internal_domain }}"
      - "traefik.frontend.rule=Host:lidarr.{{ docker_stack_internal_domain }}"
      - "traefik.port=8686"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"


  lazylibrarian:
#      image: "linuxserver/lazylibrarian"
    image: "linuxserver/lazylibrarian:latest"
    container_name: "lazylibrarian"
    depends_on:
      - transmission
#        - sabnzbd
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
      DOCKER_MODS: "linuxserver/calibre-web:calibre" #optional
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
#      ports:
#        - 5299:5299
    restart: unless-stopped
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/lazylibrarian:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
      - "{{ __docker_stack_appspecs__media_books_path }}:/books"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
#        - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=lazylibrarian"
      - "traefik.frontend.rule=Host:lazylibrarian.{{ docker_stack_internal_domain }}"
      - "traefik.port=5299"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"


  ######### Converter ##########

  # MakeMKV â€“ MakeMKV is a format converter, otherwise called "transcoder".
  #   It converts the video clips from proprietary (and usually encrypted) disc into a set of MKV files,
  #   preserving most information but not changing it in any way.
  #   The MKV format can store multiple video/audio tracks with all meta-information and preserve chapters.
  # ref: https://github.com/jlesage/docker-makemkv

  makemkv:
#      image: "jlesage/makemkv"
    image: "jlesage/makemkv:latest"
    hostname: makemkv
    container_name: "makemkv"
    restart: "unless-stopped"
    environment:
      USER_ID: "{{ docker_user_uid }}"
      GROUP_ID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
#        - "/docker/appdata/makemkv:/config:rw"
#        - "$HOME:/storage:ro"
#        - "$HOME/MakeMKV/output:/output:rw"
      - "{{ __docker_stack_appspecs__media_config_dir }}/makemkv:/config:rw"
      - "{{ __docker_stack_appspecs__media_downloads }}:/storage:ro"
      - "{{ __docker_stack_appspecs__media_path }}/makemkv/output:/output:rw"
#      devices:
#        - "/dev/sr0:/dev/sr0"
#        - "/dev/sg2:/dev/sg2"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=makemkv"
#              - "traefik.frontend.rule=Host:makemkv.{{ docker_stack_external_domain }},makemkv.{{ docker_stack_internal_domain }}"
      - "traefik.frontend.rule=Host:makemkv.{{ docker_stack_internal_domain }}"
      - "traefik.port=5800"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"

  ######### MEDIA SERVER APPS ##########

#    ## Ombi â€“ Accept Requests for your Media Server
#    ombi:
#      container_name: ombi
#      depends_on:
#        - transmission
#        - sabnzbd
#      restart: "unless-stopped"
#      image: linuxserver/ombi
##      mem_limit: 300m
#      environment:
#        PUID: "{{ docker_user_uid }}"
#        PGID: "{{ docker_user_gid }}"
#        TZ: "{{ timezone }}"
#      networks:
#        - "{{ docker_stack_traefik_proxy_network }}"
#      volumes:
#        - "{{ __docker_stack_appspecs__media_config_dir }}/ombi:/config"
#        - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
#      labels:
#        - "traefik.enable=true"
#        - "traefik.backend=ombi"
#        - "traefik.frontend.rule=Host:ombi.{{ docker_stack_internal_domain }}"
##        - "traefik.frontend.rule=Host:ombi.{{ docker_stack_external_domain }},ombi.{{ docker_stack_internal_domain }}"
#        - "traefik.port=3579"
#        - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
#        - "traefik.frontend.headers.SSLRedirect=true"
#        - "traefik.frontend.headers.STSSeconds=315360000"
#        - "traefik.frontend.headers.browserXSSFilter=true"
#        - "traefik.frontend.headers.contentTypeNosniff=true"
#        - "traefik.frontend.headers.forceSTSHeader=true"
#        - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
#        - "traefik.frontend.headers.STSIncludeSubdomains=true"
#        - "traefik.frontend.headers.STSPreload=true"
#        - "traefik.frontend.headers.frameDeny=true"

######### SEARCHERS ##########

  ### NZBHydra â€“ NZB Meta Search
  hydra:
    image: "linuxserver/nzbhydra2:latest"
    container_name: "hydra"
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/hydra:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=hydra"
      - "traefik.frontend.rule=Host:hydra.{{ docker_stack_internal_domain }}"
#        - "traefik.frontend.rule=Host:hydra.{{ docker_stack_external_domain }},hydra.{{ docker_stack_internal_domain }}"
#        - "traefik.frontend.rule=Host:{{ docker_stack_external_domain }}; PathPrefix: /hydra"
#        - "traefik.frontend.auth.basic.usersFile=/shared/.htpasswd"
#        - "traefik.port=5075"
      - "traefik.port=5076"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"

  ## Jackett â€“ Torrent Proxy
  jackett:
    image: "linuxserver/jackett:latest"
    container_name: "jackett"
    restart: "unless-stopped"
#    mem_limit: 300m
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack_appspecs__media_config_dir }}/jackett:/config"
      - "{{ __docker_stack_appspecs__media_downloads_watch }}:/downloads"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=jackett"
      - "traefik.frontend.rule=Host:jackett.{{ docker_stack_internal_domain }}"
#        - "traefik.frontend.rule=Host:jackett.{{ docker_stack_external_domain }},jackett.{{ docker_stack_internal_domain }}"
#        - "traefik.frontend.rule=Host:{{ docker_stack_external_domain }}; PathPrefix: /jackett"
#        - "traefik.frontend.auth.basic.usersFile=/shared/.htpasswd"
      - "traefik.port=9117"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost={{ docker_stack_internal_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"

#    ## lychee â€“ photo gallery software for the web that comes with powerful features to publish and manage your collection of pictures
#    lychee:
#      container_name: lychee
#      image: linuxserver/lychee
#      environment:
#        PUID: "{{ docker_user_uid }}"
#        PGID: "{{ docker_user_gid }}"
#        TZ: "{{ timezone }}"
#      restart: "unless-stopped"
#      networks:
#        - "{{ docker_stack_traefik_proxy_network }}"
#      volumes:
#        - "{{ __docker_stack_appspecs__media_config_dir }}/lychee:/config"
##        - "{{ __docker_stack_appspecs__media_path }}/pictures:/pictures"
#        - "{{ __docker_stack_appspecs__media_shared_data_dir }}/media/pictures:/pictures"
#        - "{{ __docker_stack_appspecs__media_path }}:/media"
#        - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
#      labels:
#        - "traefik.enable=true"
#        - "traefik.backend=lychee"
##        - "traefik.frontend.rule=Host:pix.{{ docker_stack_external_domain }},pix.{{ docker_stack_internal_domain }}"
#        - "traefik.frontend.rule=Host:pix.{{ docker_stack_internal_domain }}"
#        - "traefik.port=80"
##        - "traefik.port=443"
##        - "traefik.protocol=https"
#        - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
#        - "traefik.frontend.headers.SSLRedirect=true"
#        - "traefik.frontend.headers.STSSeconds=315360000"
#        - "traefik.frontend.headers.browserXSSFilter=true"
#        - "traefik.frontend.headers.contentTypeNosniff=true"
#        - "traefik.frontend.headers.forceSTSHeader=true"
##        - "traefik.frontend.headers.SSLHost={{ docker_stack_external_domain }}"
#        - "traefik.frontend.headers.STSIncludeSubdomains=true"
#        - "traefik.frontend.headers.STSPreload=true"
##        - "traefik.frontend.headers.frameDeny=true"

#    ## photoshow â€“ photo gallery software for the web that comes with powerful features to publish and manage your collection of pictures
#    photoshow:
#      container_name: photoshow
#      image: linuxserver/photoshow
#      depends_on:
#        - "mariadb"
#      environment:
#        PUID: "{{ docker_user_uid }}"
#        PGID: "{{ docker_user_gid }}"
#        TZ: "{{ timezone }}"
#      restart: "unless-stopped"
#      networks:
#        - "{{ docker_stack_traefik_proxy_network }}"
#      volumes:
#        - "{{ __docker_stack_appspecs__media_config_dir }}/photoshow:/config"
##        - "{{ __docker_stack_appspecs__media_config_dir }}/photoshow/data:/data"
##        - "{{ __docker_stack_appspecs__media_shared_data_dir }}/media/pictures:/galleries"
##        - "{{ __docker_stack_appspecs__media_path }}/pictures:/Pictures"
#        - "{{ __docker_stack_appspecs__media_nas_path }}/pictures:/Pictures"
#        - "{{ __docker_stack_appspecs__media_path }}/pictures:/Thumbs"
##        - "{{ __docker_stack_appspecs__media_shared_data_dir }}:/data"
##        - "{{ __docker_stack_appspecs__media_path }}:/media"
#        - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
#      labels:
#        - "traefik.enable=true"
#        - "traefik.backend=photoshow"
##        - "traefik.frontend.rule=Host:photoshow.{{ docker_stack_external_domain }},photoshow.{{ docker_stack_internal_domain }}"
#        - "traefik.frontend.rule=Host:photos.{{ docker_stack_internal_domain }}"
#        - "traefik.port=80"
##        - "traefik.port=443"
##        - "traefik.protocol=https"
#        - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
#        - "traefik.frontend.headers.SSLRedirect=true"
#        - "traefik.frontend.headers.STSSeconds=315360000"
#        - "traefik.frontend.headers.browserXSSFilter=true"
#        - "traefik.frontend.headers.contentTypeNosniff=true"
#        - "traefik.frontend.headers.forceSTSHeader=true"
##        - "traefik.frontend.headers.SSLHost={{ docker_stack_external_domain }}"
#        - "traefik.frontend.headers.STSIncludeSubdomains=true"
#        - "traefik.frontend.headers.STSPreload=true"
##        - "traefik.frontend.headers.frameDeny=true"


  ## NextCloud â€“ Your Own Cloud Storage
  nextcloud:
    container_name: nextcloud
    image: "linuxserver/nextcloud:latest"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ timezone }}"
    restart: "unless-stopped"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud:/config"
#        - "{{ docker_user_home }}/shared_data:/data"
      - "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud/data:/data"
#        - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
      - "{{ __docker_stack_appspecs__media_shared_data_dir }}:/shared"
      - "{{ __docker_stack_appspecs__media_path }}:/media"
      - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=nextcloud"
      - "traefik.frontend.rule=Host:nextcloud.{{ docker_stack_external_domain }},nextcloud.{{ docker_stack_internal_domain }}"
#        - "traefik.frontend.rule=Host:nextcloud.{{ docker_stack_internal_domain }}"
      - "traefik.port=443"
      - "traefik.protocol=https"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost={{ docker_stack_external_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
#        - "traefik.frontend.headers.frameDeny=true"

  ## Pydio â€“ Your Own Cloud Storage
  pydio:
    container_name: pydio
    hostname: pydio
#      image: "linuxserver/pydio"
    image: "linuxserver/pydio:latest"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
    restart: "unless-stopped"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack_appspecs__media_config_dir }}/pydio:/config"
#        - "{{ docker_user_home }}/shared_data:/data"
      - "{{ __docker_stack_appspecs__media_config_dir }}/pydio/data:/data"
#        - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
      - "{{ __docker_stack_appspecs__media_shared_data_dir }}:/shared"
      - "{{ __docker_stack_appspecs__media_path }}:/media"
      - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=pydio"
      - "traefik.frontend.rule=Host:pydio.{{ docker_stack_external_domain }},pydio.{{ docker_stack_internal_domain }}"
#        - "traefik.frontend.rule=Host:pydio.{{ docker_stack_internal_domain }}"
      - "traefik.port=443"
      - "traefik.protocol=https"
      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost={{ docker_stack_external_domain }}"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"
#      deploy:
#        mode: global
#        resources:
#          limits:
#            memory: 512M
#          reservations:
#            memory: 128M

#  app:
#    container_name: "geoip.app"
##    build: docker/php
#    image: {{ docker_stack_registry_endpoint }}/ip2geo:latest
#    restart: "unless-stopped"
#    networks:
#      - net
#    volumes:
#      - "/etc/localtime:/etc/localtime:ro"
##      - {{ docker_stack_dir }}/ip2geo:/var/www
#      - ip2geo:/var/www
#    labels:
#      - "traefik.enable=false"
#
#  geoip-nginx:
#    container_name: "geoip.nginx"
##    build: docker/nginx
#    image: {{ docker_stack_registry_endpoint }}/ip2geo-nginx:latest
#    restart: "unless-stopped"
#    networks:
#      - "{{ docker_stack_traefik_proxy_network }}"
#      - net
#    volumes:
#      - "/etc/localtime:/etc/localtime:ro"
#      - ip2geo:/var/www
##    volumes_from:
##      - app
#    ports:
#      - 8000:80
#    labels:
#      - "traefik.enable=true"
##      - "traefik.frontend.rule=Host:ip2location.{{ docker_stack_external_domain }},ip2location.{{ docker_stack_internal_domain }}"
#      - "traefik.frontend.rule=Host:ip2location.{{ docker_stack_internal_domain }}"
#      - "traefik.port=80"
#      - "traefik.protocol=http"
#      - "traefik.docker.network={{ docker_stack_traefik_proxy_network }}"


docker_stack_appspec__media:
  dirs: "{{ docker_stack_appspec_config_dirs__media | d([]) }}"
  files: "{{ docker_stack_appspec_config_files__media | d([]) }}"
  templates: "{{ docker_stack_appspec_config_tpls__media | d([]) }}"
  firewalld_services: "{{ docker_stack_firewalld_appspec_services__media | d([]) }}"
  firewalld_ports: "{{ docker_stack_firewalld_appspec_ports__media | d([]) }}"
  networks: "{{ docker_stack_appspec_networks__media | d({}) }}"
  volumes: "{{ docker_stack_appspec_volumes__media | d({}) }}"
  docker_services: "{{ docker_stack_appspec_services__media | d({}) }}"

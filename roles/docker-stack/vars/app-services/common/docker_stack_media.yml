---

__docker_stack_appspecs__media_plex_host: "{{ docker_stack_plex_host | d('media.example.int:32400') }}"
__docker_stack_appspecs__media_plex_host_url: "{{ docker_stack_plex_host_url | d('http://' + __docker_stack_appspecs__media_plex_host + '/') }}"
__docker_stack_appspecs__media_plex_host_ip: "{{ docker_stack_plex_host_ip | d('192.168.1.105') }}"
__docker_stack_appspecs__media_plex_host_port: "{{ docker_stack_plex_host_port | d('32400') }}"
__docker_stack_appspecs__media_plex_apikey: "{{ docker_stack_plex_apikey | d('apikey') }}"
__docker_stack_appspecs__media_plex_claim: "{{ docker_stack_plex_claim | d('claim-sdfasdfadgadfgdfgadfg') }}"

#__docker_stack_appspecs__media_openvpn_image: "{{ docker_stack_openvpn_image | d('bubuntux/nordvpn:latest') }}"
__docker_stack_appspecs__media_openvpn_image: "{{ docker_stack_openvpn_image | d('azinchen/nordvpn:latest') }}"
__docker_stack_appspecs__media_openvpn_network: "{{ docker_stack_openvpn_network | d('192.168.0.0/16') }}"

__docker_stack_appspecs__media_transmission_image: "{{ docker_stack_transmission_image | d('dperson/transmission:latest') }}"
__docker_stack_appspecs__media_qbittorrent_image: "{{ docker_stack_qbittorrent_image | d('ghcr.io/linuxserver/qbittorrent:latest') }}"

__docker_stack_appspecs__media_sonarr_image: "{{ docker_stack_sonarr_image | d('linuxserver/sonarr:latest') }}"
__docker_stack_appspecs__media_radarr_image: "{{ docker_stack_radarr_image | d('linuxserver/radarr:latest') }}"
__docker_stack_appspecs__media_lidarr_image: "{{ docker_stack_lidarr_image | d('linuxserver/lidarr:latest') }}"
__docker_stack_appspecs__media_bazarr_image: "{{ docker_stack_bazarr_image | d('linuxserver/bazarr:latest') }}"

########## MEDIA NODE CONFIGS ############
#__docker_stack_appspecs__media_create_folders: yes

## downloads and media directories
__docker_stack_appspecs__media_path: "{{ docker_stack_mediaserver_media_path | d('/srv/media') }}"
__docker_stack_appspecs__media_nas_path: "{{ docker_stack_mediaserver_nas_media_path | d('/srv/media') }}"

__docker_stack_appspecs__media_movies: movies
__docker_stack_appspecs__media_tv: tv_shows
__docker_stack_appspecs__media_music: music
#__docker_stack_appspecs__media_books: books
#__docker_stack_appspecs__media_books: books/lazylibrarian
#__docker_stack_appspecs__media_books: books/readarr
__docker_stack_appspecs__media_books: books
__docker_stack_appspecs__media_pictures: pictures

__docker_stack_appspecs__media_movies_path: "{{ __docker_stack_appspecs__media_nas_path }}/{{ __docker_stack_appspecs__media_movies }}"
__docker_stack_appspecs__media_tv_path: "{{ __docker_stack_appspecs__media_nas_path }}/{{ __docker_stack_appspecs__media_tv }}"
__docker_stack_appspecs__media_music_path: "{{ __docker_stack_appspecs__media_nas_path }}/{{ __docker_stack_appspecs__media_music }}"
__docker_stack_appspecs__media_books_path: "{{ __docker_stack_appspecs__media_nas_path }}/{{ __docker_stack_appspecs__media_books }}"
__docker_stack_appspecs__media_pictures_path: "{{ __docker_stack_appspecs__media_nas_path }}/{{ __docker_stack_appspecs__media_pictures }}"

__docker_stack_appspecs__media_downloads: "{{ __docker_stack_appspecs__media_path }}/downloads"
__docker_stack_appspecs__media_downloads_watch: "{{ __docker_stack_appspecs__media_downloads }}/watch"
__docker_stack_appspecs__media_downloads_complete: "{{ __docker_stack_appspecs__media_downloads }}/completed"
__docker_stack_appspecs__media_downloads_incomplete: "{{ __docker_stack_appspecs__media_downloads }}/incomplete"
__docker_stack_appspecs__media_config_dir: "{{ docker_stack_dir }}"
__docker_stack_appspecs__media_scripts_dir: "{{ __docker_stack_appspecs__media_config_dir }}/scripts"

__docker_stack_appspecs__media_shared_data_dir: "{{ docker_stack_mediaserver_shared_data_dir | d('/data') }}"

#__docker_stack_appspecs__media_shared_data: "{{ __docker_stack_appspecs__media_path }}/shared"

#app_source: "/var/lib/src"

#__docker_stack_appspecs__media_bittorrent_port: 9091
__docker_stack_appspecs__media_bittorrent_port: 8168
__docker_stack_appspecs__media_sabnzbd_port: "{{ docker_stack_sabnzbd_port | d('8080') }}"

__docker_stack_appspecs__media_emby_port: 8096
__docker_stack_appspecs__media_jellyfin_port: 8196

###
#media_server_fqdn: media.example.int

__docker_stack_appspecs__media_sickbeard_api_key: "{{ docker_stack_sickbeard_api_key | d('00000000000000000000000000000001') }}"
__docker_stack_appspecs__media_couchpotato_apikey: "{{ docker_stack_couchpotato_apikey | d('00000000000000000000000000000001') }}"
__docker_stack_appspecs__media_lidarr_apikey: "{{ docker_stack_lidarr_apikey | d('00000000000000000000000000000001') }}"
__docker_stack_appspecs__media_sonarr_apikey: "{{ docker_stack_sonarr_apikey | d('00000000000000000000000000000001') }}"
__docker_stack_appspecs__media_radarr_apikey: "{{ docker_stack_radarr_apikey | d('00000000000000000000000000000001') }}"

__docker_stack_appspecs__media_sabnzbd_apikey: "{{ docker_stack_sabnzbd_apikey | d('00000000000000000000000000000001') }}"
__docker_stack_appspecs__media_sabnzbd_nzbkey: "{{ docker_stack_sabnzbd_nzbkey | d('00000000000000000000000000000001') }}"
__docker_stack_appspecs__media_sabnzbd_rating_apikey: "{{ docker_stack_sabnzbd_rating_apikey | d('00000000000000000000000000000001') }}"

__docker_stack_appspecs__media_newznab_key: "{{ docker_stack_newznab_key | d('00000000000000000000000000000001') }}"

#__docker_stack_appspecs__media_sabnzbd_host: "{{ docker_stack_media_server_fqdn }}:{{ __docker_stack_appspecs__media_sabnzbd_port }}"
__docker_stack_appspecs__media_sabnzbd_host: "{{ docker_stack_sabnzbd_host | d('sabnzbd.' + docker_stack_internal_domain) }}"
__docker_stack_appspecs__media_sabnzbd_host_url: "https://{{ __docker_stack_appspecs__media_sabnzbd_host }}/"

__docker_stack_appspecs__media_email_from: "{{ docker_stack_email_from | d('admin@example.com') }}"
__docker_stack_appspecs__media_email_to: "{{ docker_stack_email_to | d('admin@example.com') }}"

__docker_stack_appspecs__media_smtp: "{{ docker_stack_smtp | d('mail.example.int') }}"

# Single or multiple news servers can be defined.
__docker_stack_appspecs__media_newsgroups_servers_default:
  - name: news.someserver.com
    options:
      name: news.someserver.com
      username: foo
      password: bar
      connections: 10
  - name: eu.news.someserver.com
    options:
      name: eu.news.someserver.com
      username: foo
      password: bar
      connections: 10

__docker_stack_appspecs__media_newsgroups_servers: "{{ docker_stack_newsgroups_servers | d(__docker_stack_appspecs__media_newsgroups_servers_default) }}"

__docker_stack_appspecs__media_couchpotato_password: "{{ docker_stack_couchpotato_password | d('password') }}"
__docker_stack_appspecs__media_vnc_password: "{{ docker_stack_vnc_passwd | d('password') }}"

#__docker_stack_appspecs__media_transmission_host: "{{ docker_stack_internal_domain }}:{{ __docker_stack_appspecs__media_bittorrent_port }}"
__docker_stack_appspecs__media_transmission_host: "transmission.{{ docker_stack_internal_domain }}"
__docker_stack_appspecs__media_transmission_host_url: "https://{{ __docker_stack_appspecs__media_transmission_host }}/"
__docker_stack_appspecs__media_transmission_host_url_with_port: "https://{{ __docker_stack_appspecs__media_transmission_host }}:443/"
__docker_stack_appspecs__media_transmission_rpc_username: "{{ docker_stack_transmission_rpc_username | d('transmission') }}"
__docker_stack_appspecs__media_transmission_rpc_password: "{{ docker_stack_transmission_rpc_password | d('password') }}"

__docker_stack_appspecs__media_openvpn_ip: "{{ docker_stack_openvpn_ip | d('8.8.8.8') }}"
__docker_stack_appspecs__media_openvpn_http_port: "{{ docker_stack_openvpn_http_port | d('8088') }}"
__docker_stack_appspecs__media_openvpn_port: "{{ docker_stack_openvpn_port | d(1194) }}"
__docker_stack_appspecs__media_openvpn_proto: "{{ docker_stack_openvpn_proto | d('udp') }}"

__docker_stack_appspecs__media_openvpn_username: "{{ docker_stack_openvpn_username | d('testuser') }}"
__docker_stack_appspecs__media_openvpn_password: "{{ docker_stack_openvpn_password | d('password') }}"

__docker_stack_appspecs__media_openvpn_certkey_default: |
  -----BEGIN OpenVPN Static key V1-----
  7ea403c98f786260b5d3d9d8e4e63c0e
  00000000000000000000000000000000
  00000000000000000000000000000000
  00000000000000000000000000000000
  00000000000000000000000000000000
  00000000000000000000000000000000
  -----END OpenVPN Static key V1-----

__docker_stack_appspecs__media_openvpn_certkey: "{{ docker_stack_openvpn_certkey | d(__docker_stack_appspecs__media_openvpn_certkey_default) }}"

### piwigo
#docker_piwigo_mysql_host: "db.example.int:3306"
#docker_piwigo_mysql_username: "piwigo"
#docker_piwigo_mysql_pwd: "password"


docker_stack_appspec_networks__media:
  vpn:
    external:
      name: vpn


docker_stack_appspec_config_dirs__media:
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/ip2geo", mode: "0644"}
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/heimdall" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/heimdall-int" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/openvpn" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/transmission" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/qbittorrent" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/sabnzbd" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/flaresolverr" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/prowlarr" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/jackett" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/sonarr" }
  ## ref: https://blog.linuxserver.io/2019/09/14/customizing-our-containers/
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/sonarr/custom-cont-init.d", owner: root, group: root }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/sonarr/certs" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/radarr" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/radarr/custom-cont-init.d", owner: root, group: root }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/radarr/certs" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/lidarr" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/lidarr/custom-cont-init.d", owner: root, group: root }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/lidarr/certs" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/bazarr" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/bazarr/custom-cont-init.d", owner: root, group: root }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/bazarr/certs" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/picard" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/airsonic" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/airsonic/config" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/airsonic/podcasts" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/airsonic/playlists" }
#  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/lazylibrarian" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/readarr" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/calibre" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/calibre-web" }

  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/embyms" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/jellyfin" }

  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/makemkv" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/mariadb" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/lychee" }
#    - { path: "{{ __docker_stack_appspecs__media_config_dir }}/piwigo" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/photoshow" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud/certs" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud/config" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud/data" }
#  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud/www/nextcloud/config" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/pydio" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/couchpotato" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/ombi" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/homeassistant" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/hydra" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/shared" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/thelounge"}
  ## converters
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/handbrake/config" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/handbrake/watch"}
  - { path: "{{ __docker_stack_appspecs__media_path }}/handbrake/output" }
  - { path: "{{ __docker_stack_appspecs__media_config_dir }}/mkvtoolnix/config" }
  ## app dirs:
  - { path: "{{ __docker_stack_appspecs__media_path }}" }
  - { path: "{{ __docker_stack_appspecs__media_tv_path }}" }
  - { path: "{{ __docker_stack_appspecs__media_movies_path }}" }
  - { path: "{{ __docker_stack_appspecs__media_music_path }}" }
  - { path: "{{ __docker_stack_appspecs__media_books_path }}" }
  - { path: "{{ __docker_stack_appspecs__media_pictures_path }}" }
  - { path: "{{ __docker_stack_appspecs__media_path }}/makemkv/output" }
  - { path: "{{ __docker_stack_appspecs__media_downloads }}" }
  - { path: "{{ __docker_stack_appspecs__media_downloads_watch }}" }
  - { path: "{{ __docker_stack_appspecs__media_downloads_complete }}" }
  - { path: "{{ __docker_stack_appspecs__media_downloads_complete }}/tv" }
  - { path: "{{ __docker_stack_appspecs__media_downloads_complete }}/movies" }
  - { path: "{{ __docker_stack_appspecs__media_downloads_complete }}/music" }
  - { path: "{{ __docker_stack_appspecs__media_downloads_complete }}/books" }
  - { path: "{{ __docker_stack_appspecs__media_downloads_incomplete }}" }
  - { path: "{{ __docker_stack_appspecs__media_downloads }}/wip_media" }
  - { path: "/opt/scripts" }


docker_stack_appspec_config_tpls__media:
#  - { src: 'media/config-nordvpn.ovpn.j2', dest: "{{ __docker_stack_appspecs__media_config_dir }}/openvpn/nordvpn.ovpn" }
  - { src: 'media/config-sabnzbd.ini.j2', dest: "{{ __docker_stack_appspecs__media_config_dir }}/sabnzbd/sabnzbd.ini" }
  - { src: 'media/config-couchpotato.ini.j2', dest: "{{ __docker_stack_appspecs__media_config_dir }}/couchpotato/config.ini" }
#    - { src: 'media/config-radarr.xml.j2', dest: "{{ __docker_stack_appspecs__media_config_dir }}/radarr/config.xml" }
#    - { src: 'media/config-sonarr.xml.j2', dest: "{{ __docker_stack_appspecs__media_config_dir }}/sonarr/config.xml" }
#    - { src: 'media/config-lidarr.xml.j2', dest: "{{ __docker_stack_appspecs__media_config_dir }}/lidarr/config.xml" }
#    - { src: 'media/config-lazylibrarian.xml.j2', dest: "{{ __docker_stack_appspecs__media_config_dir }}/lazylibrarian/config.xml" }
  - { src: 'media/config-transmission.json.j2', dest: "{{ __docker_stack_appspecs__media_config_dir }}/transmission/settings.json", force: yes }
#  - { src: 'media/config-nextcloud.php.j2', dest: "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud/www/nextcloud/config/config.php" }
  - { src: 'media/config-nextcloud.php.j2', dest: "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud/config/www/nextcloud/config/config.php" }
#    - { src: 'media/config-organizr-nginx-default.conf.j2', dest: "{{ __docker_stack_appspecs__media_config_dir }}/organizr/nginx/site-confs/default" }

docker_stack_appspec_config_files__media:
  - { src: 'files/mono_image/entrypoint.sh', dest: "/opt/scripts/mono-entrypoint.sh", mode: "0770" }
#  - { src: 'files/scripts/certs/validate_ssl_endpoint.sh', dest: "{{ __docker_stack_appspecs__media_config_dir }}/shared/validate_ssl_endpoint.sh" }
  - { src: 'files/ombi/docker/OmbiSettings.db', dest: "{{ __docker_stack_appspecs__media_config_dir }}/ombi/OmbiSettings.db"}
#    - { src: 'files/openvpn/nordvpn.udp.ovpn', dest: "{{ __docker_stack_appspecs__media_config_dir }}/openvpn/nordvpn.upd.ovpn"}
  - { src: 'files/prometheus/rules/swarm_node.rules.yml', dest: "{{ __docker_stack_appspecs__media_config_dir }}/prometheus/rules/swarm_node.rules.yml" }
  - { src: 'files/prometheus/rules/swarm_task.rules.yml', dest: "{{ __docker_stack_appspecs__media_config_dir }}/prometheus/rules/swarm_task.rules.yml" }
  - { src: "{{ docker_stack_internal_ssl_cert_dir }}/{{ docker_stack_internal_domain }}.chain.pem", dest: "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud/config/keys/cert.crt", remote_src: yes }
  - { src: "{{ docker_stack_internal_ssl_certkey_dir }}/{{ docker_stack_internal_domain }}-key.pem", dest: "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud/config/keys/cert.key", remote_src: yes }
#  - { src: "{{ docker_stack_internal_ssl_cert_dir }}/{{ docker_stack_internal_domain }}.chain.pem", dest: "{{ __docker_stack_appspecs__media_config_dir }}/sonarr/certs/{{ docker_stack_internal_domain }}.chain.cer", remote_src: yes }
#  - { src: "{{ docker_stack_internal_ssl_cert_dir }}/{{ docker_stack_internal_domain }}.chain.pem", dest: "{{ __docker_stack_appspecs__media_config_dir }}/radarr/certs/{{ docker_stack_internal_domain }}.chain.cer", remote_src: yes }
#  - { src: "{{ docker_stack_internal_ssl_cert_dir }}/{{ docker_stack_internal_domain }}.chain.pem", dest: "{{ __docker_stack_appspecs__media_config_dir }}/lidarr/certs/{{ docker_stack_internal_domain }}.chain.cer", remote_src: yes }
#  - { src: "{{ docker_stack_host_ca_bundle }}", dest: "{{ __docker_stack_appspecs__media_config_dir }}/sonarr/certs/ca-certificates.crt", remote_src: yes }
#  - { src: "{{ docker_stack_host_ca_bundle }}", dest: "{{ __docker_stack_appspecs__media_config_dir }}/radarr/certs/ca-certificates.crt", remote_src: yes }
#  - { src: "{{ docker_stack_host_ca_bundle }}", dest: "{{ __docker_stack_appspecs__media_config_dir }}/lidarr/certs/ca-certificates.crt", remote_src: yes }
#  - { src: "{{ docker_stack_host_ca_bundle }}", dest: "{{ __docker_stack_appspecs__media_config_dir }}/bazarr/certs/ca-certificates.crt", remote_src: yes }
  ## ref: https://www.linuxserver.io/blog/2019-09-14-customizing-our-containers
  - { src: 'files/mono_image/sync-cacerts.sh', dest: "{{ __docker_stack_appspecs__media_config_dir }}/sonarr/custom-cont-init.d/sync-cacerts.sh", owner: root, group: root, mode: "0770", backup: no }

docker_stack_firewalld_appspec_ports__media:
  - "{{ __docker_stack_appspecs__media_sabnzbd_port }}/tcp"
  - "{{ __docker_stack_appspecs__media_openvpn_http_port }}/tcp"
  - "{{ __docker_stack_appspecs__media_bittorrent_port }}/tcp"
  - "{{ __docker_stack_appspecs__media_emby_port }}/tcp"
  - "{{ __docker_stack_appspecs__media_jellyfin_port }}/tcp"

## ref: https://support.nmi.com/hc/en-gb/articles/360021544791-How-to-Check-If-the-Correct-Certificates-Are-Installed-on-Linux
#docker_stack_container_configs__media:
#  sonarr:
#    command: |
#      cert-sync {{ docker_stack_ca_cert_bundle }}
#  radarr:
#    command: |
#      cert-sync {{ docker_stack_ca_cert_bundle }}
#  lidarr:
#    command: |
#      cert-sync {{ docker_stack_ca_cert_bundle }}

#docker_stack_container_configs__media:
#  sonarr:
#    command: |
#      certmgr -add -c -v -m Trust /config/certs/{{ docker_stack_internal_domain }}.chain.cer
#      certmgr -list -c -m Trust
#  radarr:
#    command: |
#      certmgr -add -c -v -m Trust /config/certs/{{ docker_stack_internal_domain }}.chain.cer
#  lidarr:
#    command: |
#      certmgr -add -c -v -m Trust /config/certs/{{ docker_stack_internal_domain }}.chain.cer


docker_stack_appspec__media:
  dirs: "{{ docker_stack_appspec_config_dirs__media | d([]) }}"
  files: "{{ docker_stack_appspec_config_files__media | d([]) }}"
  templates: "{{ docker_stack_appspec_config_tpls__media | d([]) }}"
  firewalld_services: "{{ docker_stack_firewalld_appspec_services__media | d([]) }}"
  firewalld_ports: "{{ docker_stack_firewalld_appspec_ports__media | d([]) }}"
  networks: "{{ docker_stack_appspec_networks__media | d({}) }}"
  volumes: "{{ docker_stack_appspec_volumes__media | d({}) }}"
  docker_services: "{{ docker_stack_appspec_services__media | d({}) }}"





__docker_stack_appspecs__traefik_labels_media_heimdall: "{{ docker_stack_appspecs__traefik_labels_media_heimdall
  | d(__docker_stack_appspecs__traefik_labels_media_heimdall_default) }}"

__docker_stack_appspecs__traefik_labels_media_heimdall_int: "{{ docker_stack_appspecs__traefik_labels_media_heimdall_int
  | d(__docker_stack_appspecs__traefik_labels_media_heimdall_int_default) }}"

__docker_stack_appspecs__traefik_labels_media_transmission: "{{ docker_stack_appspecs__traefik_labels_media_transmission
  | d(__docker_stack_appspecs__traefik_labels_media_transmission_default) }}"

__docker_stack_appspecs__traefik_labels_media_qbittorrent: "{{ docker_stack_appspecs__traefik_labels_media_qbittorrent
  | d(__docker_stack_appspecs__traefik_labels_media_qbittorrent_default) }}"

__docker_stack_appspecs__traefik_labels_media_sabnzbd: "{{ docker_stack_appspecs__traefik_labels_media_sabnzbd
  | d(__docker_stack_appspecs__traefik_labels_media_sabnzbd_default) }}"

__docker_stack_appspecs__traefik_labels_media_sonarr: "{{ docker_stack_appspecs__traefik_labels_media_sonarr
  | d(__docker_stack_appspecs__traefik_labels_media_sonarr_default) }}"

__docker_stack_appspecs__traefik_labels_media_radarr: "{{ docker_stack_appspecs__traefik_labels_media_radarr
  | d(__docker_stack_appspecs__traefik_labels_media_radarr_default) }}"

__docker_stack_appspecs__traefik_labels_media_lidarr: "{{ docker_stack_appspecs__traefik_labels_media_lidarr
  | d(__docker_stack_appspecs__traefik_labels_media_lidarr_default) }}"

__docker_stack_appspecs__traefik_labels_media_bazarr: "{{ docker_stack_appspecs__traefik_labels_media_bazarr
  | d(__docker_stack_appspecs__traefik_labels_media_bazarr_default) }}"

__docker_stack_appspecs__traefik_labels_media_picard: "{{ docker_stack_appspecs__traefik_labels_media_picard
  | d(__docker_stack_appspecs__traefik_labels_media_picard_default) }}"

__docker_stack_appspecs__traefik_labels_media_readarr: "{{ docker_stack_appspecs__traefik_labels_media_readarr
  | d(__docker_stack_appspecs__traefik_labels_media_readarr_default) }}"

__docker_stack_appspecs__traefik_labels_media_lazylibrarian: "{{ docker_stack_appspecs__traefik_labels_media_lazylibrarian
  | d(__docker_stack_appspecs__traefik_labels_media_lazylibrarian_default) }}"

__docker_stack_appspecs__traefik_labels_media_calibreweb: "{{ docker_stack_appspecs__traefik_labels_media_calibreweb
  | d(__docker_stack_appspecs__traefik_labels_media_calibreweb_default) }}"

__docker_stack_appspecs__traefik_labels_media_calibre: "{{ docker_stack_appspecs__traefik_labels_media_calibre
  | d(__docker_stack_appspecs__traefik_labels_media_calibre_default) }}"

__docker_stack_appspecs__traefik_labels_media_airsonic: "{{ docker_stack_appspecs__traefik_labels_media_airsonic
  | d(__docker_stack_appspecs__traefik_labels_media_airsonic_default) }}"

__docker_stack_appspecs__traefik_labels_media_embyms: "{{ docker_stack_appspecs__traefik_labels_media_embyms
  | d(__docker_stack_appspecs__traefik_labels_media_embyms_default) }}"

__docker_stack_appspecs__traefik_labels_media_jellyfin: "{{ docker_stack_appspecs__traefik_labels_media_jellyfin
  | d(__docker_stack_appspecs__traefik_labels_media_jellyfin_default) }}"

__docker_stack_appspecs__traefik_labels_media_handbrake: "{{ docker_stack_appspecs__traefik_labels_media_handbrake
  | d(__docker_stack_appspecs__traefik_labels_media_handbrake_default) }}"

__docker_stack_appspecs__traefik_labels_media_mkvtoolnix: "{{ docker_stack_appspecs__traefik_labels_media_mkvtoolnix
  | d(__docker_stack_appspecs__traefik_labels_media_mkvtoolnix_default) }}"

__docker_stack_appspecs__traefik_labels_media_makemkv: "{{ docker_stack_appspecs__traefik_labels_media_makemkv
  | d(__docker_stack_appspecs__traefik_labels_media_makemkv_default) }}"

__docker_stack_appspecs__traefik_labels_media_flaresolverr: "{{ docker_stack_appspecs__traefik_labels_media_flaresolverr
  | d(__docker_stack_appspecs__traefik_labels_media_flaresolverr_default) }}"

__docker_stack_appspecs__traefik_labels_media_prowlarr: "{{ docker_stack_appspecs__traefik_labels_media_prowlarr
  | d(__docker_stack_appspecs__traefik_labels_media_prowlarr_default) }}"

__docker_stack_appspecs__traefik_labels_media_hydra: "{{ docker_stack_appspecs__traefik_labels_media_hydra
  | d(__docker_stack_appspecs__traefik_labels_media_hydra_default) }}"

__docker_stack_appspecs__traefik_labels_media_jackett: "{{ docker_stack_appspecs__traefik_labels_media_jackett
  | d(__docker_stack_appspecs__traefik_labels_media_jackett_default) }}"

__docker_stack_appspecs__traefik_labels_media_nextcloud: "{{ docker_stack_appspecs__traefik_labels_media_nextcloud
  | d(__docker_stack_appspecs__traefik_labels_media_nextcloud_default) }}"

__docker_stack_appspecs__traefik_labels_media_pydio: "{{ docker_stack_appspecs__traefik_labels_media_pydio
  | d(__docker_stack_appspecs__traefik_labels_media_pydio_default) }}"

__docker_stack_appspecs__traefik_labels_media_duplicati: "{{ docker_stack_appspecs__traefik_labels_media_duplicati
  | d(__docker_stack_appspecs__traefik_labels_media_duplicati_default) }}"

__docker_stack_appspecs__traefik_labels_media_thelounge: "{{ docker_stack_appspecs__traefik_labels_media_thelounge
  | d(__docker_stack_appspecs__traefik_labels_media_thelounge_default) }}"

docker_stack_appspec_services__media:

  ## Heimdall - unified Web interface
  ## ref: https://git.sogenius.io/hos/mediaflix/blob/master/docker-compose.yml
  heimdall:
    image: "linuxserver/heimdall:latest"
    container_name: heimdall
    environment:
      PUID: "{{ docker_stack_user_uid }}"
      PGID: "{{ docker_stack_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/heimdall:/config"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
#    ports:
#      - 80:80
#      - 443:443
#    mem_limit: 4096m
    restart: unless-stopped
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_heimdall }}"

  ## internal
  heimdall-internal:
    image: "linuxserver/heimdall:latest"
    container_name: heimdall-internal
    environment:
      PUID: "{{ docker_stack_user_uid }}"
      PGID: "{{ docker_stack_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/heimdall-int:/config"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
    restart: unless-stopped
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_heimdall_int }}"

  ######### DOWNLOADERS ##########

  ## TODO: replace this with separate openvpn container that can be used for transmission/sabnzbd/etc
  ## ref: see response #8 here:
  ##   https://plexguide.com/threads/howto-use-single-and-central-vpn-container-for-all-your-other-apps.2563/
  ## ref: https://github.com/bubuntux/nordvpn (no longer works with this traefik docker-compose config)
  ## ref: https://forum.openmediavault.org/index.php/Thread/22164-Running-containers-through-an-OpenVPN-container/
  ## ref: https://raw.githubusercontent.com/dperson/openvpn-client/master/docker-compose.yml
  ## ref: https://registry.hub.docker.com/r/bubuntux/nordvpn/tags
  ## ref: https://github.com/azinchen/nordvpn
  ## ref: https://github.com/htpcBeginner/docker-traefik/blob/c5b06477dc9d245ceb9caea5d702c2614fc7fece/docker-compose-t2-obsolete.yml
  ## ref: https://github.com/htpcBeginner/docker-traefik/blob/master/docker-compose-t2.yml
  ## ref: https://docs.linuxserver.io/images/docker-openvpn-as
  openvpn:
    image: "{{ __docker_stack_appspecs__media_openvpn_image }}"
    container_name: openvpn
    cap_add:
      - net_admin
    devices:
      - /dev/net/tun
    dns:
      - 8.8.4.4
      - 8.8.8.8
    restart: unless-stopped
    networks:
      - vpn
      - "{{ docker_stack_traefik_proxy_network }}"
    ports:
      - "{{ __docker_stack_appspecs__media_bittorrent_port }}:8168"
#      - "{{ __docker_stack_appspecs__media_openvpn_http_port }}:80"
##      - "{{ __docker_stack_appspecs__media_sabnzbd_port }}:8080"
#      - "{{ __docker_stack_appspecs__media_bittorrent_port }}:9091"
#      - "6881:6881"
#      - "6881:6881/udp"
    environment:
      USER: "{{ __docker_stack_appspecs__media_openvpn_username }}"
      PASS: "{{ __docker_stack_appspecs__media_openvpn_password }}"
      TZ: "{{ docker_stack_timezone }}"
      COUNTRY: "United_States"
      CATEGORY: "P2P"
      RANDOM_TOP: 10
      RECREATE_VPN_CRON: "5 */3 * * *"
      NETWORK: "{{ __docker_stack_appspecs__media_openvpn_network }}"
      OPENVPN_OPTS: '--pull-filter ignore "ping-restart" --ping-exit 180'

  ## ref: https://plexguide.com/threads/howto-use-single-and-central-vpn-container-for-all-your-other-apps.2563/ (works)
  ## ref: https://github.com/gwmullin/docker_stuff/blob/master/docker-compose.yml
  ## ref: https://hub.docker.com/r/dperson/transmission/
  ## ref: https://github.com/htpcBeginner/docker-traefik/blob/c5b06477dc9d245ceb9caea5d702c2614fc7fece/docker-compose-t2-obsolete.yml
  ## ref: https://github.com/htpcBeginner/docker-traefik/blob/master/docker-compose-t2.yml
  transmission:
    active: no
    image: "{{ __docker_stack_appspecs__media_transmission_image }}"
    container_name: transmission
    depends_on:
      - openvpn
    restart: always
    environment:
      USERID: "{{ docker_stack_user_uid }}"
      GROUPID: "{{ docker_stack_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
      TRUSER: "{{ __docker_stack_appspecs__media_transmission_rpc_username }}"
      TRPASSWD: "{{ __docker_stack_appspecs__media_transmission_rpc_password }}"
    network_mode: service:openvpn
#    networks:
#      - "{{ docker_stack_traefik_proxy_network }}"
#      - vpn
#    ports:
#      - "{{ __docker_stack_appspecs__media_bittorrent_port }}:9091"
    volumes:
      - "{{ __docker_stack_appspecs__media_downloads }}:/var/lib/transmission-daemon/downloads"
      - "{{ __docker_stack_appspecs__media_config_dir }}/transmission:/var/lib/transmission-daemon/info"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_transmission }}"

  ## ref: https://github.com/htpcBeginner/docker-traefik/blob/c5b06477dc9d245ceb9caea5d702c2614fc7fece/docker-compose-t2-obsolete.yml
  ## ref: https://github.com/htpcBeginner/docker-traefik/blob/master/docker-compose-t2.yml
  qbittorrent:
    image: "{{ __docker_stack_appspecs__media_qbittorrent_image }}"
    container_name: qbittorrent
    depends_on:
      - openvpn
    restart: always
    environment:
      PUID: "{{ docker_stack_user_uid }}"
      PGID: "{{ docker_stack_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
      WEBUI_PORT: 8168
    network_mode: service:openvpn
#    networks:
#      - "{{ docker_stack_traefik_proxy_network }}"
#      - vpn
#    ports:
#      - "{{ __docker_stack_appspecs__media_bittorrent_port }}:9091"
#      - "6881:6881"
#      - "6881:6881/udp"
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/qbittorrent:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_qbittorrent }}"

  ## SABnzbd – Usenet (NZB) Downloader
  sabnzbd:
    active: no
#    image: linuxserver/sabnzbd
    image: linuxserver/sabnzbd:latest
    container_name: sabnzbd
    depends_on:
      - openvpn
    restart: always
    environment:
      PUID: "{{ docker_stack_user_uid }}"
      PGID: "{{ docker_stack_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    network_mode: service:openvpn
#    networks:
#      - "{{ docker_stack_traefik_proxy_network }}"
#      - vpn
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/sabnzbd:/config"
##      - "{{ __docker_stack_appspecs__media_downloads_complete }}:/downloads"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
      - "{{ __docker_stack_appspecs__media_downloads_incomplete }}:/incomplete-downloads"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_sabnzbd }}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s


  # Sonarr – TV Show Download and Management
  ## load certs using custom entrypoint.sh
  ## ref: https://tyk.io/docs/frequently-asked-questions/add-custom-certificates-to-docker-images/
  sonarr:
    hostname: sonarr
    image: "{{ __docker_stack_appspecs__media_sonarr_image }}"
    container_name: "sonarr"
#    depends_on:
#      - transmission
#        - sabnzbd
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    entrypoint: /entrypoint.sh
    volumes:
      - "{{ docker_stack_script_dir }}/mono-entrypoint.sh:/entrypoint.sh"
      - "{{ __docker_stack_appspecs__media_config_dir }}/sonarr:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
      - "{{ __docker_stack_appspecs__media_tv_path }}:/tv"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
      - "{{ __docker_stack_appspecs__media_scripts_dir }}:/scripts"
      - "{{ docker_stack_ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_sonarr }}"

  # Radarr – Movie Download and Management
  radarr:
    image: "{{ __docker_stack_appspecs__media_radarr_image }}"
    container_name: "radarr"
#    depends_on:
#      - transmission
#        - sabnzbd
#      mem_limit: 500m
#      ports:
#        - "XXXX:7878"
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    ## ref: https://stackoverflow.com/questions/41299514/docker-compose-define-mount-for-bind-mount-and-managed-mount
    ## ref: https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation
    volumes:
#      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack_appspecs__media_config_dir }}/radarr:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
      - "{{ __docker_stack_appspecs__media_movies_path }}:/movies"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
      - "{{ docker_stack_ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_radarr }}"

  #LIDARR - Music Download and Management
  lidarr:
    image: "{{ __docker_stack_appspecs__media_lidarr_image }}"
    hostname: lidarr
    container_name: "lidarr"
#    depends_on:
#      - transmission
#        - sabnzbd
#      mem_limit: 300m
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
#      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack_appspecs__media_config_dir }}/lidarr:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
      - "{{ __docker_stack_appspecs__media_music_path }}:/music"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
      - "{{ docker_stack_ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_lidarr }}"

  # Bazarr - Subtitle Management
  bazarr:
    image: "{{ __docker_stack_appspecs__media_bazarr_image }}"
    container_name: bazarr
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$BAZARR_PORT:6767"
    volumes:
      - "{{ __docker_stack_appspecs__media_nas_path }}:/nas"
#      - type: bind
#        source: "{{ __docker_stack_appspecs__media_nas_path }}"
#        target: "/nas"
#        bind:
#          propagation: "rshared"
      - "{{ __docker_stack_appspecs__media_config_dir }}/bazarr:/config"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
      - "{{ docker_stack_ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_bazarr }}"

  # Picard - Music Library Tagging and Management
  picard:
    active: no
    image: mikenye/picard:latest
    container_name: picard
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$PICARD_PORT:5800"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - /dev/shm:/dev/shm
      - "{{ __docker_stack_appspecs__media_config_dir }}/picard:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}/wip_media:/wip_media"
      - "{{ __docker_stack_appspecs__media_music_path }}:/music"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
      - "{{ docker_stack_ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
#      - $USERDIR/Downloads/wip_media:/wip_media:rw
#      - $DOCKERDIR/picard:/config:rw
#      - /media/ds918/media/music:/music:rw
    environment:
      USER_ID: "{{ docker_user_uid }}"
      GROUP_ID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
      UMASK: 002
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_picard }}"

  readarr:
#      image: "linuxserver/readarr"
#    image: "ghcr.io/linuxserver/readarr:nightly"
    image: "linuxserver/readarr:nightly"
    container_name: "readarr"
#    depends_on:
#      - transmission
#        - sabnzbd
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
#      ports:
#        - 5299:5299
    restart: unless-stopped
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/readarr:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
      - "{{ __docker_stack_appspecs__media_books_path }}:/books"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
#        - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
      - "{{ docker_stack_ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_readarr }}"

  lazylibrarian:
#    active: no
#      image: "linuxserver/lazylibrarian"
    image: "linuxserver/lazylibrarian:latest"
    container_name: "lazylibrarian"
#    depends_on:
#      - transmission
#        - sabnzbd
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
      DOCKER_MODS: "linuxserver/calibre-web:calibre" #optional
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
#      ports:
#        - 5299:5299
    restart: unless-stopped
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/lazylibrarian:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
      - "{{ __docker_stack_appspecs__media_books_path }}/readarr:/books"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
#        - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
      - "{{ docker_stack_ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_lazylibrarian }}"


  # Calibre-web  – Ebooks and Management (Plex of Ebooks)
  calibre-web:
    active: no
    image: linuxserver/calibre-web
    container_name: calibre-web
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$CALIBRE_WEB_PORT:8083"
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/calibre-web:/config"
      # - /media/ds918/media/books:/books
      # - add path to calibre books folder
      #- $DOCKERDIR/calibre/books:/books:rw
      - "{{ __docker_stack_appspecs__media_books_path }}:/books"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
      # set the path to converter tool to /app/calibre/ebook-convert
      DOCKER_MODS: linuxserver/calibre-web:calibre
      UMASK: 002
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_calibreweb }}"

  # Calibre  – Ebooks and Management (Server)
  calibre:
    active: no
    image: linuxserver/calibre
    container_name: calibre
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$CALIBRE_PORT:8080" # Desktop GUI
    #  - "$CALIBRE_PORT:8081" # Webserver GUI
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/calibre:/config"
      #      - /media/ds918/media/books:/config/Calibre Library:rw
      #- $USERDIR/Downloads:/downloads:rw
      - "{{ __docker_stack_appspecs__media_books_path }}/calibre:/books"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
      # GUAC_USER: abc #Gucamole user optional
      #Guacamole password optional
      # GUAC_PASS: 900150983cd24fb0d6963f7d28e17f72
      UMASK_SET: 002 #optional
      # CLI_ARGS: #optional
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_calibre }}"

  # AirSonic - Music Server
  airsonic:
    active: no
    container_name: airsonic
    image: linuxserver/airsonic:latest
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$AIRSONIC_PORT:4040"
    volumes:
#       - /media:/nas:ro
#      - $DOCKERDIR/airsonic/podcasts:/podcasts
#      - $DOCKERDIR/airsonic/playlists:/playlists
#      - $DOCKERDIR/airsonic/config:/config
#      # - $DOCKERDIR/airsonic/config:/app/airsonic/config #Used to change log level for debugging
#      - "{{ __docker_stack_appspecs__media_nas_path }}:/nas:ro"
      - "{{ __docker_stack_appspecs__media_nas_path }}/music:/music"
      - "{{ __docker_stack_appspecs__media_config_dir }}/airsonic/config:/config"
      - "{{ __docker_stack_appspecs__media_config_dir }}/airsonic/podcasts:/podcasts"
      - "{{ __docker_stack_appspecs__media_config_dir }}/airsonic/playlists:/playlists"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      JAVA_OPTS: -Dserver.use-forward-headers=true
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_airsonic }}"

  # Emby - Media Server
  embyms:
    active: no
    image: emby/embyserver:latest
    container_name: embyms
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    devices:
      - /dev/dri:/dev/dri # for harware transcoding
    security_opt:
      - no-new-privileges:true
    ports:
      - "{{ __docker_stack_appspecs__media_emby_port }}:8096/tcp"
      - "8920:8920/tcp"
    volumes:
#      - /etc/localtime:/etc/localtime:ro
      - /dev/shm:/transcode
      - "{{ __docker_stack_appspecs__media_config_dir }}/embyms:/config"
      - "{{ __docker_stack_appspecs__media_nas_path }}:/nas"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
    environment:
      UID: "{{ docker_user_uid }}"
      GID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
      HOSTNAME: "emby"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_embyms }}"

  # Jellyfin - Media Server
  jellyfin:
    active: no
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    devices:
      - /dev/dri:/dev/dri # for harware transcoding
    security_opt:
      - no-new-privileges:true
    ports:
      - "{{ __docker_stack_appspecs__media_jellyfin_port }}:8096"
      - "8921:8920" # Changed to 8921 - conflict with Emby
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
      UMASK_SET: 022
    volumes:
      - /dev/shm:/ram_transcode
      - "{{ __docker_stack_appspecs__media_config_dir }}/jellyfin:/config"
      - "{{ __docker_stack_appspecs__media_nas_path }}:/nas"
#      # Run in ro mode while upgrading JF
#      - "{{ __docker_stack_appspecs__media_nas_path }}:/nas:ro"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_jellyfin }}"

  ######### Converters ##########

  # Handbrake - Video Conversion (Transcoding and compression)
  handbrake:
    active: no
    image: jlesage/handbrake:latest
    container_name: handbrake
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$HANDBRAKE_PORT:5800"
    volumes:
#      - $USERDIR/Downloads:/downloads:ro
#      - $DOCKERDIR/handbrake/config:/config:rw
#      - $DOCKERDIR/handbrake/watch:/watch:rw
#      - $USERDIR/Downloads/wip_media:/output:rw
      - "{{ __docker_stack_appspecs__media_config_dir }}/handbrake/config:/config:rw"
      - "{{ __docker_stack_appspecs__media_config_dir }}/handbrake/watch:/watch:rw"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads:ro"
      - "{{ __docker_stack_appspecs__media_path }}/handbrake/output:/output:rw"
    environment:
      USER_ID: "{{ docker_user_uid }}"
      GROUP_ID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
      UMASK: 002
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      AUTOMATED_CONVERSION_KEEP_SOURCE: 1
      VNC_PASSWORD: "{{ __docker_stack_appspecs__media_vnc_password }}"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_handbrake }}"


  # MKVToolNix - Video Editing (Remuxing - changing media container while keeping original source quality)
  mkvtoolnix:
    active: no
    image: jlesage/mkvtoolnix:latest
    container_name: mkvtoolnix
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$MKVTOOLNIX_PORT:5800"
    volumes:
#      - $USERDIR/Downloads:/downloads:rw
#      - $DOCKERDIR/mkvtoolnix/config:/config:rw
      - "{{ __docker_stack_appspecs__media_config_dir }}/mkvtoolnix/config:/config:rw"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads:rw"
    environment:
      USER_ID: "{{ docker_user_uid }}"
      GROUP_ID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
      UMASK: 002
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: "{{ __docker_stack_appspecs__media_vnc_password }}"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_mkvtoolnix }}"

  # MakeMKV – MakeMKV is a format converter, otherwise called "transcoder".
  #   It converts the video clips from proprietary (and usually encrypted) disc into a set of MKV files,
  #   preserving most information but not changing it in any way.
  #   The MKV format can store multiple video/audio tracks with all meta-information and preserve chapters.
  # ref: https://github.com/jlesage/docker-makemkv

  makemkv:
    active: no
    image: "jlesage/makemkv:latest"
    hostname: makemkv
    container_name: "makemkv"
    restart: "unless-stopped"
    environment:
      USER_ID: "{{ docker_user_uid }}"
      GROUP_ID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
#        - "/docker/appdata/makemkv:/config:rw"
#        - "$HOME:/storage:ro"
#        - "$HOME/MakeMKV/output:/output:rw"
      - "{{ __docker_stack_appspecs__media_config_dir }}/makemkv:/config:rw"
      - "{{ __docker_stack_appspecs__media_downloads }}:/storage:ro"
      - "{{ __docker_stack_appspecs__media_path }}/makemkv/output:/output:rw"
#      devices:
#        - "/dev/sr0:/dev/sr0"
#        - "/dev/sg2:/dev/sg2"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_makemkv }}"


######### SEARCHERS ##########
  ## flaresolverr – Torrent Proxy
  ## ref: https://github.com/FlareSolverr/FlareSolverr
  ## ref: https://gist.github.com/FaintGhost/dff7aa5d8ad490cb9b82cf677865aaa9
  flaresolverr:
#    image: "linuxserver/flaresolverr:latest"
    image: "ghcr.io/flaresolverr/flaresolverr:latest"
    container_name: "flaresolverr"
    restart: "unless-stopped"
    environment:
      TZ: "{{ docker_stack_timezone }}"
      LOG_LEVEL: "info"
      LOG_HTML: "false"
      CAPTCHA_SOLVER: "none"
    ports:
      - "8191:8191"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
#    volumes:
#      - "/etc/localtime:/etc/localtime:ro"
#      - "{{ __docker_stack_appspecs__media_config_dir }}/flaresolverr:/config"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_flaresolverr }}"

  ## prowlarr – Torrent Proxy
  ## ref: https://github.com/linuxserver/docker-prowlarr
  prowlarr:
#    image: "linuxserver/prowlarr:latest"
    image: "ghcr.io/linuxserver/prowlarr:develop"
    container_name: "prowlarr"
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack_appspecs__media_config_dir }}/prowlarr:/config"
      - "{{ __docker_stack_appspecs__media_downloads_watch }}:/downloads"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
      - "{{ docker_stack_ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_prowlarr }}"

  ### NZBHydra – NZB Meta Search
  hydra:
    active: no
    image: "linuxserver/nzbhydra2:latest"
    container_name: "hydra"
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/hydra:/config"
      - "{{ __docker_stack_appspecs__media_downloads }}:/downloads"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_hydra }}"

  ## Jackett – Torrent Proxy
  jackett:
    image: "linuxserver/jackett:latest"
    container_name: "jackett"
    restart: "unless-stopped"
#    mem_limit: 300m
#    ports:
#      - 9117:9117
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    depends_on:
      - openvpn
    network_mode: service:openvpn
#    networks:
#      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack_appspecs__media_config_dir }}/jackett:/config"
      - "{{ __docker_stack_appspecs__media_downloads_watch }}:/downloads"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_jackett }}"

  ## NextCloud – Your Own Cloud Storage
  nextcloud:
    container_name: nextcloud
    image: "linuxserver/nextcloud:latest"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    restart: "unless-stopped"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud/config:/config"
#        - "{{ docker_user_home }}/shared_data:/data"
      - "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud/data:/data"
#      - "{{ __docker_stack_appspecs__media_config_dir }}/nextcloud/certs:/etc/nginx/certs"
#        - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
      - "{{ __docker_stack_appspecs__media_shared_data_dir }}:/shared"
      - "{{ __docker_stack_appspecs__media_path }}:/media"
#      - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_nextcloud }}"

  ## Pydio – Your Own Cloud Storage
  pydio:
    active: no
    container_name: pydio
    hostname: pydio
#      image: "linuxserver/pydio"
    image: "linuxserver/pydio:latest"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
    restart: "unless-stopped"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack_appspecs__media_config_dir }}/pydio:/config"
#        - "{{ docker_user_home }}/shared_data:/data"
      - "{{ __docker_stack_appspecs__media_config_dir }}/pydio/data:/data"
#        - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/shared"
      - "{{ __docker_stack_appspecs__media_shared_data_dir }}:/shared"
      - "{{ __docker_stack_appspecs__media_path }}:/media"
#      - "{{ __docker_stack_appspecs__media_nas_path }}:/remote_media"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_pydio }}"

  ## ref: https://hub.docker.com/r/linuxserver/thelounge
  ## ref: https://dev.to/adamkdean/setup-your-own-persistent-web-irc-client-3678
  thelounge:
    active: no
    image: ghcr.io/linuxserver/thelounge
    container_name: thelounge
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/thelounge:/config"
    ports:
      - 9000:9000
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_thelounge }}"

  ############################# UTILITIES

  # Duplicati - Backup
  duplicati:
    active: no
    image: linuxserver/duplicati:latest
    container_name: duplicati
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$DUPLICATI_PORT:8200"
    volumes:
      - "{{ __docker_stack_appspecs__media_config_dir }}/duplicati:/config"
      - "{{ __docker_stack_appspecs__media_nas_path }}:/nas"
      - "{{ __docker_stack_appspecs__media_config_dir }}/shared:/userdir"
    environment:
      PUID: "{{ docker_user_uid }}"
      PGID: "{{ docker_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
      # CLI_ARGS: #optional
    labels: "{{ __docker_stack_appspecs__traefik_labels_media_duplicati }}"

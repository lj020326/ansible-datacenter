---

__docker_stack__media__plex_host: "{{ docker_stack__plex_host | d('media.example.int:32400') }}"
__docker_stack__media__plex_host_url: "{{ docker_stack__plex_host_url | d('http://' + __docker_stack__media__plex_host + '/') }}"
__docker_stack__media__plex_host_ip: "{{ docker_stack__plex_host_ip | d('192.168.1.105') }}"
__docker_stack__media__plex_host_port: "{{ docker_stack__plex_host_port | d('32400') }}"
__docker_stack__media__plex_apikey: "{{ docker_stack__plex_apikey | d('apikey') }}"
__docker_stack__media__plex_claim: "{{ docker_stack__plex_claim | d('claim-sdfasdfadgadfgdfgadfg') }}"

#__docker_stack__media__openvpn_image_default: "bubuntux/nordvpn:latest"
__docker_stack__media__openvpn_image_default: "azinchen/nordvpn:latest"
__docker_stack__media__openvpn_image: "{{ docker_stack__media__openvpn_image | d(__docker_stack__media__openvpn_image_default) }}"

__docker_stack__media__openvpn_network: "{{ docker_stack__openvpn_network | d('192.168.0.0/16') }}"

__docker_stack__media__transmission_image: "{{ docker_stack__media__transmission_image | d('dperson/transmission:latest') }}"
__docker_stack__media__qbittorrent_image: "{{ docker_stack__qbittorrent_image | d('ghcr.io/lscr.io/linuxserver/qbittorrent:latest') }}"

__docker_stack__media__sonarr_image: "{{ docker_stack__media__sonarr_image | d('lscr.io/linuxserver/sonarr:latest') }}"
__docker_stack__media__radarr_image: "{{ docker_stack__media__radarr_image | d('lscr.io/linuxserver/radarr:latest') }}"
__docker_stack__media__lidarr_image: "{{ docker_stack__media__lidarr_image | d('lscr.io/linuxserver/lidarr:latest') }}"
__docker_stack__media__bazarr_image: "{{ docker_stack__media__bazarr_image | d('lscr.io/linuxserver/bazarr:latest') }}"
#__docker_stack__media__readarr_image: "ghcr.io/lscr.io/linuxserver/readarr:nightly"
#__docker_stack__media__readarr_image: "{{ docker_stack__media__readarr_image | d('lscr.io/linuxserver/readarr:latest') }}"
__docker_stack__media__readarr_image: "{{ docker_stack__media__readarr_image | d('lscr.io/linuxserver/readarr:nightly') }}"
#__docker_stack__media__lazylibrarian_image: "lscr.io/linuxserver/lazylibrarian:latest"
__docker_stack__media__lazylibrarian_image: "{{ docker_stack__media__readarr_image | d('lscr.io/linuxserver/lazylibrarian:latest') }}"

#__docker_stack__media__prowlarr_image: "lscr.io/linuxserver/prowlarr:latest"
#__docker_stack__media__prowlarr_image: "ghcr.io/lscr.io/linuxserver/prowlarr:develop"
__docker_stack__media__prowlarr_image: "{{ docker_stack__media__prowlarr_image | d('lscr.io/linuxserver/prowlarr:latest') }}"

########## MEDIA NODE CONFIGS ############
#__docker_stack__media__create_folders: yes

## downloads and media directories
__docker_stack__media__path: "{{ docker_stack__media__media_path | d('/srv/media') }}"
__docker_stack__media__nas_path: "{{ docker_stack__media__nas_media_path | d('/srv/media') }}"

__docker_stack__media__movies: movies
__docker_stack__media__tv: tv_shows
__docker_stack__media__music: music
#__docker_stack__media__books: books
#__docker_stack__media__books: books/lazylibrarian
#__docker_stack__media__books: books/readarr
__docker_stack__media__books: books
__docker_stack__media__pictures: pictures

__docker_stack__media__movies_path: "{{ __docker_stack__media__nas_path }}/{{ __docker_stack__media__movies }}"
__docker_stack__media__tv_path: "{{ __docker_stack__media__nas_path }}/{{ __docker_stack__media__tv }}"
__docker_stack__media__music_path: "{{ __docker_stack__media__nas_path }}/{{ __docker_stack__media__music }}"
__docker_stack__media__books_path: "{{ __docker_stack__media__nas_path }}/{{ __docker_stack__media__books }}"
__docker_stack__media__pictures_path: "{{ __docker_stack__media__nas_path }}/{{ __docker_stack__media__pictures }}"

__docker_stack__media__downloads: "{{ __docker_stack__media__path }}/downloads"
__docker_stack__media__downloads_watch: "{{ __docker_stack__media__downloads }}/watch"
__docker_stack__media__downloads_complete: "{{ __docker_stack__media__downloads }}/completed"
__docker_stack__media__downloads_incomplete: "{{ __docker_stack__media__downloads }}/incomplete"
__docker_stack__media__config_dir: "{{ docker_stack__dir }}"
__docker_stack__media__scripts_dir: "{{ __docker_stack__media__config_dir }}/scripts"

__docker_stack__media__shared_data_dir: "{{ docker_stack__media__shared_data_dir | d('/data') }}"

#__docker_stack__media__shared_data: "{{ __docker_stack__media__path }}/shared"

#app_source: "/var/lib/src"

#__docker_stack__media__bittorrent_port: 9091
__docker_stack__media__bittorrent_port: 8168
__docker_stack__media__sabnzbd_port: "{{ docker_stack__media__sabnzbd_port | d('8080') }}"

__docker_stack__media__emby_port: 8096
__docker_stack__media__jellyfin_port: 8196

###
#media_server_fqdn: media.example.int

__docker_stack__media__sickbeard_api_key: "{{ docker_stack__media__sickbeard_api_key | d('00000000000000000000000000000001') }}"
__docker_stack__media__couchpotato_apikey: "{{ docker_stack__media__couchpotato_apikey | d('00000000000000000000000000000001') }}"
__docker_stack__media__lidarr_apikey: "{{ docker_stack__media__lidarr_apikey | d('00000000000000000000000000000001') }}"
__docker_stack__media__sonarr_apikey: "{{ docker_stack__media__sonarr_apikey | d('00000000000000000000000000000001') }}"
__docker_stack__media__radarr_apikey: "{{ docker_stack__media__radarr_apikey | d('00000000000000000000000000000001') }}"

__docker_stack__media__sabnzbd_apikey: "{{ docker_stack__media__sabnzbd_apikey | d('00000000000000000000000000000001') }}"
__docker_stack__media__sabnzbd_nzbkey: "{{ docker_stack__media__sabnzbd_nzbkey | d('00000000000000000000000000000001') }}"
__docker_stack__media__sabnzbd_rating_apikey: "{{ docker_stack__media__sabnzbd_rating_apikey | d('00000000000000000000000000000001') }}"

__docker_stack__media__newznab_key: "{{ docker_stack__media__newznab_key | d('00000000000000000000000000000001') }}"

#__docker_stack__media__sabnzbd_host: "{{ docker_stack__media_server_fqdn }}:{{ __docker_stack__media__sabnzbd_port }}"
__docker_stack__media__sabnzbd_host: "{{ docker_stack__media__sabnzbd_host | d('sabnzbd.' + docker_stack__internal_domain) }}"
__docker_stack__media__sabnzbd_host_url: "https://{{ __docker_stack__media__sabnzbd_host }}/"

__docker_stack__media__email_from: "{{ docker_stack__email_from | d('admin@example.com') }}"
__docker_stack__media__email_to: "{{ docker_stack__email_to | d('admin@example.com') }}"

__docker_stack__media__smtp: "{{ docker_stack__smtp | d('mail.example.int') }}"

# Single or multiple news servers can be defined.
__docker_stack__media__newsgroups_servers_default:
  - name: news.someserver.com
    options:
      name: news.someserver.com
      username: foo
      password: bar
      connections: 10
  - name: eu.news.someserver.com
    options:
      name: eu.news.someserver.com
      username: foo
      password: bar
      connections: 10

__docker_stack__media__newsgroups_servers: "{{ docker_stack__media__newsgroups_servers | d(__docker_stack__media__newsgroups_servers_default) }}"

__docker_stack__media__couchpotato_password: "{{ docker_stack__media__couchpotato_password | d('password') }}"
__docker_stack__media__vnc_password: "{{ docker_stack__vnc_passwd | d('password') }}"

#__docker_stack__media__transmission_host: "{{ docker_stack__internal_domain }}:{{ __docker_stack__media__bittorrent_port }}"
__docker_stack__media__transmission_host: "transmission.{{ docker_stack__internal_domain }}"
__docker_stack__media__transmission_host_url: "https://{{ __docker_stack__media__transmission_host }}/"
__docker_stack__media__transmission_host_url_with_port: "https://{{ __docker_stack__media__transmission_host }}:443/"
__docker_stack__media__transmission_rpc_username: "{{ docker_stack__media__transmission_rpc_username | d('transmission') }}"
__docker_stack__media__transmission_rpc_password: "{{ docker_stack__media__transmission_rpc_password | d('password') }}"

__docker_stack__media__openvpn_ip: "{{ docker_stack__openvpn_ip | d('8.8.8.8') }}"
__docker_stack__media__openvpn_http_port: "{{ docker_stack__openvpn_http_port | d('8088') }}"
__docker_stack__media__openvpn_port: "{{ docker_stack__openvpn_port | d(1194) }}"
__docker_stack__media__openvpn_proto: "{{ docker_stack__openvpn_proto | d('udp') }}"

__docker_stack__media__openvpn_username: "{{ docker_stack__openvpn_username | d('testuser') }}"
__docker_stack__media__openvpn_password: "{{ docker_stack__openvpn_password | d('password') }}"

__docker_stack__media__openvpn_certkey_default: |
  -----BEGIN OpenVPN Static key V1-----
  7ea403c98f786260b5d3d9d8e4e63c0e
  00000000000000000000000000000000
  00000000000000000000000000000000
  00000000000000000000000000000000
  00000000000000000000000000000000
  00000000000000000000000000000000
  -----END OpenVPN Static key V1-----

__docker_stack__media__openvpn_certkey: "{{ docker_stack__openvpn_certkey | d(__docker_stack__media__openvpn_certkey_default) }}"

### piwigo
#docker_piwigo_mysql_host: "db.example.int:3306"
#docker_piwigo_mysql_username: "piwigo"
#docker_piwigo_mysql_pwd: "password"


__docker_stack__media__networks:
  vpn:
    external:
      name: vpn


__docker_stack__media__config_dirs:
  - path: "{{ __docker_stack__media__config_dir }}/ip2geo"
    mode: "0644"
  - path: "{{ __docker_stack__media__config_dir }}/heimdall"
  - path: "{{ __docker_stack__media__config_dir }}/heimdall-int"
  - path: "{{ __docker_stack__media__config_dir }}/openvpn"
  - path: "{{ __docker_stack__media__config_dir }}/transmission"
  - path: "{{ __docker_stack__media__config_dir }}/qbittorrent"
  - path: "{{ __docker_stack__media__config_dir }}/sabnzbd"
  - path: "{{ __docker_stack__media__config_dir }}/flaresolverr"
  - path: "{{ __docker_stack__media__config_dir }}/prowlarr"
  - path: "{{ __docker_stack__media__config_dir }}/jackett"
  - path: "{{ __docker_stack__media__config_dir }}/sonarr"
  ## ref: https://blog.linuxserver.io/2019/09/14/customizing-our-containers/
#  - path: "{{ __docker_stack__media__config_dir }}/sonarr/custom-cont-init.d"
#    owner: root
#    group: root
  - path: "{{ __docker_stack__media__config_dir }}/sonarr/custom-cont-init.d"
  - path: "{{ __docker_stack__media__config_dir }}/sonarr/certs"
  - path: "{{ __docker_stack__media__config_dir }}/radarr"
#  - path: "{{ __docker_stack__media__config_dir }}/radarr/custom-cont-init.d"
#    owner: root
#    group: root
  - path: "{{ __docker_stack__media__config_dir }}/radarr/custom-cont-init.d"
  - path: "{{ __docker_stack__media__config_dir }}/radarr/certs"
  - path: "{{ __docker_stack__media__config_dir }}/lidarr"
#  - path: "{{ __docker_stack__media__config_dir }}/lidarr/custom-cont-init.d"
#    owner: root
#    group: root
  - path: "{{ __docker_stack__media__config_dir }}/lidarr/custom-cont-init.d"
  - path: "{{ __docker_stack__media__config_dir }}/lidarr/certs"
  - path: "{{ __docker_stack__media__config_dir }}/bazarr"
#  - path: "{{ __docker_stack__media__config_dir }}/bazarr/custom-cont-init.d"
#    owner: root
#    group: root
  - path: "{{ __docker_stack__media__config_dir }}/bazarr/custom-cont-init.d"
  - path: "{{ __docker_stack__media__config_dir }}/bazarr/certs"
  - path: "{{ __docker_stack__media__config_dir }}/picard"
  - path: "{{ __docker_stack__media__config_dir }}/airsonic"
  - path: "{{ __docker_stack__media__config_dir }}/airsonic/config"
  - path: "{{ __docker_stack__media__config_dir }}/airsonic/podcasts"
  - path: "{{ __docker_stack__media__config_dir }}/airsonic/playlists"
#  - { path: "{{ __docker_stack__media__config_dir }}/lazylibrarian" }
  - path: "{{ __docker_stack__media__config_dir }}/readarr"
  - path: "{{ __docker_stack__media__config_dir }}/calibre"
  - path: "{{ __docker_stack__media__config_dir }}/calibre-web"

  - path: "{{ __docker_stack__media__config_dir }}/embyms"
  - path: "{{ __docker_stack__media__config_dir }}/jellyfin"

  - path: "{{ __docker_stack__media__config_dir }}/makemkv"
  - path: "{{ __docker_stack__media__config_dir }}/mariadb"
  - path: "{{ __docker_stack__media__config_dir }}/lychee"
#    - { path: "{{ __docker_stack__media__config_dir }}/piwigo" }
  - path: "{{ __docker_stack__media__config_dir }}/photoshow"
  - path: "{{ __docker_stack__media__config_dir }}/nextcloud"
  - path: "{{ __docker_stack__media__config_dir }}/nextcloud/certs"
  - path: "{{ __docker_stack__media__config_dir }}/nextcloud/config"
  - path: "{{ __docker_stack__media__config_dir }}/nextcloud/config/keys"
  - path: "{{ __docker_stack__media__config_dir }}/nextcloud/config/apps"
  - path: "{{ __docker_stack__media__config_dir }}/nextcloud/config/www/nextcloud/config"
  - path: "{{ __docker_stack__media__config_dir }}/nextcloud/data"
  - path: "{{ __docker_stack__media__config_dir }}/pydio"
  - path: "{{ __docker_stack__media__config_dir }}/couchpotato"
  - path: "{{ __docker_stack__media__config_dir }}/ombi"
  - path: "{{ __docker_stack__media__config_dir }}/homeassistant"
  - path: "{{ __docker_stack__media__config_dir }}/hydra"
  - path: "{{ __docker_stack__media__config_dir }}/shared"
  - path: "{{ __docker_stack__media__config_dir}/thelounge"}
  ## converters
  - path: "{{ __docker_stack__media__config_dir }}/handbrake/config"
  - path: "{{ __docker_stack__media__config_dir}/handbrake/watch"}
  - path: "{{ __docker_stack__media__path }}/handbrake/output"
  - path: "{{ __docker_stack__media__config_dir }}/mkvtoolnix/config"
  ## app dirs:
  - path: "{{ __docker_stack__media__path }}"
  - path: "{{ __docker_stack__media__tv_path }}"
  - path: "{{ __docker_stack__media__movies_path }}"
  - path: "{{ __docker_stack__media__music_path }}"
  - path: "{{ __docker_stack__media__books_path }}"
  - path: "{{ __docker_stack__media__pictures_path }}"
  - path: "{{ __docker_stack__media__path }}/makemkv/output"
  - path: "{{ __docker_stack__media__downloads }}"
  - path: "{{ __docker_stack__media__downloads_watch }}"
  - path: "{{ __docker_stack__media__downloads_complete }}"
  - path: "{{ __docker_stack__media__downloads_complete }}/tv"
  - path: "{{ __docker_stack__media__downloads_complete }}/movies"
  - path: "{{ __docker_stack__media__downloads_complete }}/music"
  - path: "{{ __docker_stack__media__downloads_complete }}/books"
  - path: "{{ __docker_stack__media__downloads_incomplete }}"
  - path: "{{ __docker_stack__media__downloads }}/wip_media"
  - path: "/opt/scripts"


__docker_stack__media__config_tpls:
#  - src: 'media/config-nordvpn.ovpn.j2'
    dest: "{{ __docker_stack__media__config_dir }}/openvpn/nordvpn.ovpn"
  - src: 'media/config-sabnzbd.ini.j2'
    dest: "{{ __docker_stack__media__config_dir }}/sabnzbd/sabnzbd.ini"
  - src: 'media/config-couchpotato.ini.j2'
    dest: "{{ __docker_stack__media__config_dir }}/couchpotato/config.ini"
#  - src: 'media/config-radarr.xml.j2'
#    dest: "{{ __docker_stack__media__config_dir }}/radarr/config.xml"
#  - src: 'media/config-sonarr.xml.j2'
#    dest: "{{ __docker_stack__media__config_dir }}/sonarr/config.xml"
#  - src: 'media/config-lidarr.xml.j2'
#    dest: "{{ __docker_stack__media__config_dir }}/lidarr/config.xml"
#  - src: 'media/config-lazylibrarian.xml.j2'
#    dest: "{{ __docker_stack__media__config_dir }}/lazylibrarian/config.xml"
  - src: 'media/config-transmission.json.j2'
    dest: "{{ __docker_stack__media__config_dir }}/transmission/settings.json", force: yes
#  - src: 'media/config-nextcloud.php.j2'
#    dest: "{{ __docker_stack__media__config_dir }}/nextcloud/www/nextcloud/config/config.php"
#  - src: 'media/config-nextcloud.php.j2'
#    dest: "{{ __docker_stack__media__config_dir }}/nextcloud/config/www/nextcloud/config/config.php"
  ## ref: https://help.nextcloud.com/t/updates-between-multiple-major-versions-are-unsupported/7094/12
  - src: 'media/config-nextcloud.php.j2'
    dest: "{{ __docker_stack__media__config_dir }}/nextcloud/config/www/nextcloud/config/others.config.php"
#  - src: 'media/config-organizr-nginx-default.conf.j2'
#    dest: "{{ __docker_stack__media__config_dir }}/organizr/nginx/site-confs/default"

__docker_stack__media__config_files:
  - src: 'files/mono_image/entrypoint.sh'
    dest: "/opt/scripts/mono-entrypoint.sh"
    mode: "0770"
#  - src: 'files/scripts/certs/validate_ssl_endpoint.sh'
#    dest: "{{ __docker_stack__media__config_dir }}/shared/validate_ssl_endpoint.sh"
  - src: 'files/ombi/docker/OmbiSettings.db'
    dest: "{{ __docker_stack__media__config_dir}/ombi/OmbiSettings.db"}
#  - src: 'files/openvpn/nordvpn.udp.ovpn'
#    dest: "{{ __docker_stack__media__config_dir}/openvpn/nordvpn.upd.ovpn"}
  - src: 'files/prometheus/rules/swarm_node.rules.yml'
    dest: "{{ __docker_stack__media__config_dir }}/prometheus/rules/swarm_node.rules.yml"
  - src: 'files/prometheus/rules/swarm_task.rules.yml'
    dest: "{{ __docker_stack__media__config_dir }}/prometheus/rules/swarm_task.rules.yml"
  - src: "{{ docker_stack__internal_ssl_cert_dir }}/{{ docker_stack__internal_domain }}.chain.pem"
    dest: "{{ __docker_stack__media__config_dir }}/nextcloud/config/keys/cert.crt"
    remote_src: yes
  - src: "{{ docker_stack__internal_ssl_certkey_dir }}/{{ docker_stack__internal_domain }}-key.pem"
    dest: "{{ __docker_stack__media__config_dir }}/nextcloud/config/keys/cert.key"
    remote_src: yes
#  - src: "{{ docker_stack__internal_ssl_cert_dir }}/{{ docker_stack__internal_domain }}.chain.pem"
#    dest: "{{ __docker_stack__media__config_dir }}/sonarr/certs/{{ docker_stack__internal_domain }}.chain.cer"
#    remote_src: yes
#  - src: "{{ docker_stack__internal_ssl_cert_dir }}/{{ docker_stack__internal_domain }}.chain.pem"
#    dest: "{{ __docker_stack__media__config_dir }}/radarr/certs/{{ docker_stack__internal_domain }}.chain.cer"
#    remote_src: yes
#  - src: "{{ docker_stack__internal_ssl_cert_dir }}/{{ docker_stack__internal_domain }}.chain.pem"
#    dest: "{{ __docker_stack__media__config_dir }}/lidarr/certs/{{ docker_stack__internal_domain }}.chain.cer"
#    remote_src: yes
  ## ref: https://www.linuxserver.io/blog/2019-09-14-customizing-our-containers
  - src: 'files/mono_image/sync-cacerts.sh'
    dest: "{{ __docker_stack__media__config_dir }}/sonarr/custom-cont-init.d/sync-cacerts.sh"
    owner: root
    group: root
    mode: "0770"
    backup: no

__docker_stack__media__firewalld_ports:
  - "{{ __docker_stack__media__sabnzbd_port }}/tcp"
  - "{{ __docker_stack__media__openvpn_http_port }}/tcp"
  - "{{ __docker_stack__media__bittorrent_port }}/tcp"
  - "{{ __docker_stack__media__emby_port }}/tcp"
  - "{{ __docker_stack__media__jellyfin_port }}/tcp"

## ref: https://support.nmi.com/hc/en-gb/articles/360021544791-How-to-Check-If-the-Correct-Certificates-Are-Installed-on-Linux
#docker_stack__container_configs__media:
#  sonarr:
#    command: |
#      cert-sync {{ __docker_stack__ca_cert_bundle }}
#  radarr:
#    command: |
#      cert-sync {{ __docker_stack__ca_cert_bundle }}
#  lidarr:
#    command: |
#      cert-sync {{ __docker_stack__ca_cert_bundle }}

#docker_stack__container_configs__media:
#  sonarr:
#    command: |
#      certmgr -add -c -v -m Trust /config/certs/{{ docker_stack__internal_domain }}.chain.cer
#      certmgr -list -c -m Trust
#  radarr:
#    command: |
#      certmgr -add -c -v -m Trust /config/certs/{{ docker_stack__internal_domain }}.chain.cer
#  lidarr:
#    command: |
#      certmgr -add -c -v -m Trust /config/certs/{{ docker_stack__internal_domain }}.chain.cer


docker_stack__appspec__media:
  dirs: "{{ __docker_stack__media__config_dirs | d([]) }}"
  files: "{{ __docker_stack__media__config_files | d([]) }}"
  templates: "{{ __docker_stack__media__config_tpls | d([]) }}"
  firewalld_services: "{{ __docker_stack__media__firewalld_services | d([]) }}"
  firewalld_ports: "{{ __docker_stack__media__firewalld_ports | d([]) }}"
  networks: "{{ __docker_stack__media__networks | d({}) }}"
  volumes: "{{ __docker_stack__media__volumes | d({}) }}"
  docker_services: "{{ __docker_stack__media__services | d({}) }}"





__docker_stack__media_heimdall__traefik_labels: "{{ docker_stack__media_heimdall__traefik_labels
  | d(__docker_stack__media_heimdall__traefik_labels_default) }}"

__docker_stack__media_heimdall_int__traefik_labels: "{{ docker_stack__media_heimdall_int__traefik_labels
  | d(__docker_stack__media_heimdall_int__traefik_labels_default) }}"

__docker_stack__media_transmission__traefik_labels: "{{ docker_stack__media_transmission__traefik_labels
  | d(__docker_stack__media_transmission__traefik_labels_default) }}"

__docker_stack__media_qbittorrent__traefik_labels: "{{ docker_stack__media_qbittorrent__traefik_labels
  | d(__docker_stack__media_qbittorrent__traefik_labels_default) }}"

__docker_stack__media_sabnzbd__traefik_labels: "{{ docker_stack__media_sabnzbd__traefik_labels
  | d(__docker_stack__media_sabnzbd__traefik_labels_default) }}"

__docker_stack__media_sonarr__traefik_labels: "{{ docker_stack__media_sonarr__traefik_labels
  | d(__docker_stack__media_sonarr__traefik_labels_default) }}"

__docker_stack__media_radarr__traefik_labels: "{{ docker_stack__media_radarr__traefik_labels
  | d(__docker_stack__media_radarr__traefik_labels_default) }}"

__docker_stack__media_lidarr__traefik_labels: "{{ docker_stack__media_lidarr__traefik_labels
  | d(__docker_stack__media_lidarr__traefik_labels_default) }}"

__docker_stack__media_bazarr__traefik_labels: "{{ docker_stack__media_bazarr__traefik_labels
  | d(__docker_stack__media_bazarr__traefik_labels_default) }}"

__docker_stack__media_picard__traefik_labels: "{{ docker_stack__media_picard__traefik_labels
  | d(__docker_stack__media_picard__traefik_labels_default) }}"

__docker_stack__media_readarr__traefik_labels: "{{ docker_stack__media_readarr__traefik_labels
  | d(__docker_stack__media_readarr__traefik_labels_default) }}"

__docker_stack__media_lazylibrarian__traefik_labels: "{{ docker_stack__media_lazylibrarian__traefik_labels
  | d(__docker_stack__media_lazylibrarian__traefik_labels_default) }}"

__docker_stack__media_calibreweb__traefik_labels: "{{ docker_stack__media_calibreweb__traefik_labels
  | d(__docker_stack__media_calibreweb__traefik_labels_default) }}"

__docker_stack__media_calibre__traefik_labels: "{{ docker_stack__media_calibre__traefik_labels
  | d(__docker_stack__media_calibre__traefik_labels_default) }}"

__docker_stack__media_airsonic__traefik_labels: "{{ docker_stack__media_airsonic__traefik_labels
  | d(__docker_stack__media_airsonic__traefik_labels_default) }}"

__docker_stack__media_embyms__traefik_labels: "{{ docker_stack__media_embyms__traefik_labels
  | d(__docker_stack__media_embyms__traefik_labels_default) }}"

__docker_stack__media_jellyfin__traefik_labels: "{{ docker_stack__media_jellyfin__traefik_labels
  | d(__docker_stack__media_jellyfin__traefik_labels_default) }}"

__docker_stack__media_handbrake__traefik_labels: "{{ docker_stack__media_handbrake__traefik_labels
  | d(__docker_stack__media_handbrake__traefik_labels_default) }}"

__docker_stack__media_mkvtoolnix__traefik_labels: "{{ docker_stack__media_mkvtoolnix__traefik_labels
  | d(__docker_stack__media_mkvtoolnix__traefik_labels_default) }}"

__docker_stack__media_makemkv__traefik_labels: "{{ docker_stack__media_makemkv__traefik_labels
  | d(__docker_stack__media_makemkv__traefik_labels_default) }}"

__docker_stack__media_flaresolverr__traefik_labels: "{{ docker_stack__media_flaresolverr__traefik_labels
  | d(__docker_stack__media_flaresolverr__traefik_labels_default) }}"

__docker_stack__media_prowlarr__traefik_labels: "{{ docker_stack__media_prowlarr__traefik_labels
  | d(__docker_stack__media_prowlarr__traefik_labels_default) }}"

__docker_stack__media_hydra__traefik_labels: "{{ docker_stack__media_hydra__traefik_labels
  | d(__docker_stack__media_hydra__traefik_labels_default) }}"

__docker_stack__media_jackett__traefik_labels: "{{ docker_stack__media_jackett__traefik_labels
  | d(__docker_stack__media_jackett__traefik_labels_default) }}"

__docker_stack__media_nextcloud__traefik_labels: "{{ docker_stack__media_nextcloud__traefik_labels
  | d(__docker_stack__media_nextcloud__traefik_labels_default) }}"

#__docker_stack__media_nextcloud__image: lscr.io/linuxserver/nextcloud:latest
#__docker_stack__media_nextcloud__image: lscr.io/linuxserver/nextcloud:19.0.3-ls100
#__docker_stack__media_nextcloud__image: lscr.io/linuxserver/nextcloud:20.0.5-ls116
#__docker_stack__media_nextcloud__image: lscr.io/linuxserver/nextcloud:version-20.0.7
#__docker_stack__media_nextcloud__image: lscr.io/linuxserver/nextcloud:version-21.0.3
#__docker_stack__media_nextcloud__image: lscr.io/linuxserver/nextcloud:22.2.3
#__docker_stack__media_nextcloud__image: lscr.io/linuxserver/nextcloud:php8-version-23.0.4
__docker_stack__media_nextcloud__image: lscr.io/linuxserver/nextcloud:28.0.4

__docker_stack__media_pydio__traefik_labels: "{{ docker_stack__media_pydio__traefik_labels
  | d(__docker_stack__media_pydio__traefik_labels_default) }}"

__docker_stack__media_duplicati__traefik_labels: "{{ docker_stack__media_duplicati__traefik_labels
  | d(__docker_stack__media_duplicati__traefik_labels_default) }}"

__docker_stack__media_thelounge__traefik_labels: "{{ docker_stack__media_thelounge__traefik_labels
  | d(__docker_stack__media_thelounge__traefik_labels_default) }}"

__docker_stack__media__services:

  ## Heimdall - unified Web interface
  ## ref: https://git.sogenius.io/hos/mediaflix/blob/master/docker-compose.yml
  heimdall:
    image: "lscr.io/linuxserver/heimdall:latest"
    container_name: heimdall
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack__media__config_dir }}/heimdall:/config"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
#    ports:
#      - 80:80
#      - 443:443
#    mem_limit: 4096m
    restart: unless-stopped
    labels: "{{ __docker_stack__media_heimdall__traefik_labels }}"

  ## internal
  heimdall-internal:
    image: "lscr.io/linuxserver/heimdall:latest"
    container_name: heimdall-internal
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack__media__config_dir }}/heimdall-int:/config"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
    restart: unless-stopped
    labels: "{{ __docker_stack__media_heimdall_int__traefik_labels }}"

  ######### DOWNLOADERS ##########

  ## TODO: replace this with separate openvpn container that can be used for transmission/sabnzbd/etc
  ## ref: see response #8 here:
  ##   https://plexguide.com/threads/howto-use-single-and-central-vpn-container-for-all-your-other-apps.2563/
  ## ref: https://github.com/bubuntux/nordvpn (no longer works with this traefik docker-compose config)
  ## ref: https://forum.openmediavault.org/index.php/Thread/22164-Running-containers-through-an-OpenVPN-container/
  ## ref: https://raw.githubusercontent.com/dperson/openvpn-client/master/docker-compose.yml
  ## ref: https://registry.hub.docker.com/r/bubuntux/nordvpn/tags
  ## ref: https://github.com/azinchen/nordvpn
  ## ref: https://github.com/htpcBeginner/docker-traefik/blob/c5b06477dc9d245ceb9caea5d702c2614fc7fece/docker-compose-t2-obsolete.yml
  ## ref: https://github.com/htpcBeginner/docker-traefik/blob/master/docker-compose-t2.yml
  ## ref: https://docs.linuxserver.io/images/docker-openvpn-as
  openvpn:
    image: "{{ __docker_stack__media__openvpn_image }}"
    container_name: openvpn
    cap_add:
      - net_admin
    devices:
      - /dev/net/tun
    dns:
      - 8.8.4.4
      - 8.8.8.8
    restart: unless-stopped
    networks:
      - vpn
      - "{{ docker_stack__traefik_proxy_network }}"
    ports:
      - "{{ __docker_stack__media__bittorrent_port }}:8168"
#      - "{{ __docker_stack__media__openvpn_http_port }}:80"
##      - "{{ __docker_stack__media__sabnzbd_port }}:8080"
#      - "{{ __docker_stack__media__bittorrent_port }}:9091"
#      - "6881:6881"
#      - "6881:6881/udp"
    environment:
      USER: "{{ __docker_stack__media__openvpn_username }}"
      PASS: "{{ __docker_stack__media__openvpn_password }}"
      TZ: "{{ docker_stack__timezone }}"
      COUNTRY: "United_States"
      CATEGORY: "P2P"
      RANDOM_TOP: 10
      RECREATE_VPN_CRON: "5 */3 * * *"
      NETWORK: "{{ __docker_stack__media__openvpn_network }}"
      OPENVPN_OPTS: '--pull-filter ignore "ping-restart" --ping-exit 180'

  ## ref: https://plexguide.com/threads/howto-use-single-and-central-vpn-container-for-all-your-other-apps.2563/ (works)
  ## ref: https://github.com/gwmullin/docker_stuff/blob/master/docker-compose.yml
  ## ref: https://hub.docker.com/r/dperson/transmission/
  ## ref: https://github.com/htpcBeginner/docker-traefik/blob/c5b06477dc9d245ceb9caea5d702c2614fc7fece/docker-compose-t2-obsolete.yml
  ## ref: https://github.com/htpcBeginner/docker-traefik/blob/master/docker-compose-t2.yml
  transmission:
    active: no
    image: "{{ __docker_stack__media__transmission_image }}"
    container_name: transmission
    depends_on:
      - openvpn
    restart: always
    environment:
      USERID: "{{ docker_stack__user_uid }}"
      GROUPID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
      TRUSER: "{{ __docker_stack__media__transmission_rpc_username }}"
      TRPASSWD: "{{ __docker_stack__media__transmission_rpc_password }}"
    network_mode: service:openvpn
#    networks:
#      - "{{ docker_stack__traefik_proxy_network }}"
#      - vpn
#    ports:
#      - "{{ __docker_stack__media__bittorrent_port }}:9091"
    volumes:
      - "{{ __docker_stack__media__downloads }}:/var/lib/transmission-daemon/downloads"
      - "{{ __docker_stack__media__config_dir }}/transmission:/var/lib/transmission-daemon/info"
      - "{{ __docker_stack__media__downloads }}:/downloads"
    labels: "{{ __docker_stack__media_transmission__traefik_labels }}"

  ## ref: https://github.com/htpcBeginner/docker-traefik/blob/c5b06477dc9d245ceb9caea5d702c2614fc7fece/docker-compose-t2-obsolete.yml
  ## ref: https://github.com/htpcBeginner/docker-traefik/blob/master/docker-compose-t2.yml
  qbittorrent:
    image: "{{ __docker_stack__media__qbittorrent_image }}"
    container_name: qbittorrent
    depends_on:
      - openvpn
    restart: always
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
      WEBUI_PORT: 8168
    network_mode: service:openvpn
#    networks:
#      - "{{ docker_stack__traefik_proxy_network }}"
#      - vpn
#    ports:
#      - "{{ __docker_stack__media__bittorrent_port }}:9091"
#      - "6881:6881"
#      - "6881:6881/udp"
    volumes:
      - "{{ __docker_stack__media__config_dir }}/qbittorrent:/config"
      - "{{ __docker_stack__media__downloads }}:/downloads"
    labels: "{{ __docker_stack__media_qbittorrent__traefik_labels }}"

  ## SABnzbd – Usenet (NZB) Downloader
  sabnzbd:
    active: no
#    image: lscr.io/linuxserver/sabnzbd
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    depends_on:
      - openvpn
    restart: always
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    network_mode: service:openvpn
#    networks:
#      - "{{ docker_stack__traefik_proxy_network }}"
#      - vpn
    volumes:
      - "{{ __docker_stack__media__config_dir }}/sabnzbd:/config"
##      - "{{ __docker_stack__media__downloads_complete }}:/downloads"
      - "{{ __docker_stack__media__downloads }}:/downloads"
      - "{{ __docker_stack__media__downloads_incomplete }}:/incomplete-downloads"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
    labels: "{{ __docker_stack__media_sabnzbd__traefik_labels }}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s


  # Sonarr – TV Show Download and Management
  ## load certs using custom entrypoint.sh
  ## ref: https://tyk.io/docs/frequently-asked-questions/add-custom-certificates-to-docker-images/
  sonarr:
    hostname: sonarr
    image: "{{ __docker_stack__media__sonarr_image }}"
    container_name: "sonarr"
#    depends_on:
#      - transmission
#        - sabnzbd
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    entrypoint: /entrypoint.sh
    volumes:
      - "{{ docker_stack__script_dir }}/mono-entrypoint.sh:/entrypoint.sh"
      - "{{ __docker_stack__media__config_dir }}/sonarr:/config"
      - "{{ __docker_stack__media__downloads }}:/downloads"
      - "{{ __docker_stack__media__tv_path }}:/tv"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
      - "{{ __docker_stack__media__scripts_dir }}:/scripts"
      - "{{ __docker_stack__ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels: "{{ __docker_stack__media_sonarr__traefik_labels }}"

  # Radarr – Movie Download and Management
  radarr:
    image: "{{ __docker_stack__media__radarr_image }}"
    container_name: "radarr"
#    depends_on:
#      - transmission
#        - sabnzbd
#      mem_limit: 500m
#      ports:
#        - "XXXX:7878"
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    ## ref: https://stackoverflow.com/questions/41299514/docker-compose-define-mount-for-bind-mount-and-managed-mount
    ## ref: https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation
    volumes:
#      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack__media__config_dir }}/radarr:/config"
      - "{{ __docker_stack__media__downloads }}:/downloads"
      - "{{ __docker_stack__media__movies_path }}:/movies"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
      - "{{ __docker_stack__ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels: "{{ __docker_stack__media_radarr__traefik_labels }}"

  #LIDARR - Music Download and Management
  lidarr:
    image: "{{ __docker_stack__media__lidarr_image }}"
    hostname: lidarr
    container_name: "lidarr"
#    depends_on:
#      - transmission
#        - sabnzbd
#      mem_limit: 300m
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    volumes:
#      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack__media__config_dir }}/lidarr:/config"
      - "{{ __docker_stack__media__downloads }}:/downloads"
      - "{{ __docker_stack__media__music_path }}:/music"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
      - "{{ __docker_stack__ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels: "{{ __docker_stack__media_lidarr__traefik_labels }}"

  # Bazarr - Subtitle Management
  bazarr:
    image: "{{ __docker_stack__media__bazarr_image }}"
    container_name: bazarr
    restart: unless-stopped
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$BAZARR_PORT:6767"
    volumes:
      - "{{ __docker_stack__media__nas_path }}:/nas"
#      - type: bind
#        source: "{{ __docker_stack__media__nas_path }}"
#        target: "/nas"
#        bind:
#          propagation: "rshared"
      - "{{ __docker_stack__media__config_dir }}/bazarr:/config"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
      - "{{ __docker_stack__ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    labels: "{{ __docker_stack__media_bazarr__traefik_labels }}"

  # Picard - Music Library Tagging and Management
  picard:
    active: no
    image: mikenye/picard:latest
    container_name: picard
    restart: unless-stopped
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$PICARD_PORT:5800"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - /dev/shm:/dev/shm
      - "{{ __docker_stack__media__config_dir }}/picard:/config"
      - "{{ __docker_stack__media__downloads }}/wip_media:/wip_media"
      - "{{ __docker_stack__media__music_path }}:/music"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
      - "{{ __docker_stack__ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
#      - $USERDIR/Downloads/wip_media:/wip_media:rw
#      - $DOCKERDIR/picard:/config:rw
#      - /media/ds918/media/music:/music:rw
    environment:
      USER_ID: "{{ docker_stack__user_uid }}"
      GROUP_ID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
      UMASK: 002
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
    labels: "{{ __docker_stack__media_picard__traefik_labels }}"

  readarr:
    image: "{{ __docker_stack__media__readarr_image }}"
    container_name: "readarr"
#    depends_on:
#      - transmission
#        - sabnzbd
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
#      ports:
#        - 5299:5299
    restart: unless-stopped
    volumes:
      - "{{ __docker_stack__media__config_dir }}/readarr:/config"
      - "{{ __docker_stack__media__downloads }}:/downloads"
      - "{{ __docker_stack__media__books_path }}:/books"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
#        - "{{ __docker_stack__media__nas_path }}:/remote_media"
      - "{{ __docker_stack__ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels: "{{ __docker_stack__media_readarr__traefik_labels }}"

  lazylibrarian:
#    active: no
    image: "{{ __docker_stack__media__lazylibrarian_image }}"
    container_name: "lazylibrarian"
#    depends_on:
#      - transmission
#        - sabnzbd
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
      DOCKER_MODS: "lscr.io/linuxserver/calibre-web:calibre" #optional
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
#      ports:
#        - 5299:5299
    restart: unless-stopped
    volumes:
      - "{{ __docker_stack__media__config_dir }}/lazylibrarian:/config"
      - "{{ __docker_stack__media__downloads }}:/downloads"
      - "{{ __docker_stack__media__books_path }}/readarr:/books"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
#        - "{{ __docker_stack__media__nas_path }}:/remote_media"
      - "{{ __docker_stack__ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels: "{{ __docker_stack__media_lazylibrarian__traefik_labels }}"


  # Calibre-web  – Ebooks and Management (Plex of Ebooks)
  calibre-web:
    active: no
    image: lscr.io/linuxserver/calibre-web
    container_name: calibre-web
    restart: unless-stopped
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$CALIBRE_WEB_PORT:8083"
    volumes:
      - "{{ __docker_stack__media__config_dir }}/calibre-web:/config"
      # - /media/ds918/media/books:/books
      # - add path to calibre books folder
      #- $DOCKERDIR/calibre/books:/books:rw
      - "{{ __docker_stack__media__books_path }}:/books"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
      # set the path to converter tool to /app/calibre/ebook-convert
      DOCKER_MODS: lscr.io/linuxserver/calibre-web:calibre
      UMASK: 002
    labels: "{{ __docker_stack__media_calibreweb__traefik_labels }}"

  # Calibre  – Ebooks and Management (Server)
  calibre:
    active: no
    image: lscr.io/linuxserver/calibre
    container_name: calibre
    restart: unless-stopped
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$CALIBRE_PORT:8080" # Desktop GUI
    #  - "$CALIBRE_PORT:8081" # Webserver GUI
    volumes:
      - "{{ __docker_stack__media__config_dir }}/calibre:/config"
      #      - /media/ds918/media/books:/config/Calibre Library:rw
      #- $USERDIR/Downloads:/downloads:rw
      - "{{ __docker_stack__media__books_path }}/calibre:/books"
      - "{{ __docker_stack__media__downloads }}:/downloads"
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
      # GUAC_USER: abc #Gucamole user optional
      #Guacamole password optional
      # GUAC_PASS: 900150983cd24fb0d6963f7d28e17f72
      UMASK_SET: 002 #optional
      # CLI_ARGS: #optional
    labels: "{{ __docker_stack__media_calibre__traefik_labels }}"

  # AirSonic - Music Server
  airsonic:
    active: no
    container_name: airsonic
    image: lscr.io/linuxserver/airsonic:latest
    restart: unless-stopped
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$AIRSONIC_PORT:4040"
    volumes:
#       - /media:/nas:ro
#      - $DOCKERDIR/airsonic/podcasts:/podcasts
#      - $DOCKERDIR/airsonic/playlists:/playlists
#      - $DOCKERDIR/airsonic/config:/config
#      # - $DOCKERDIR/airsonic/config:/app/airsonic/config #Used to change log level for debugging
#      - "{{ __docker_stack__media__nas_path }}:/nas:ro"
      - "{{ __docker_stack__media__nas_path }}/music:/music"
      - "{{ __docker_stack__media__config_dir }}/airsonic/config:/config"
      - "{{ __docker_stack__media__config_dir }}/airsonic/podcasts:/podcasts"
      - "{{ __docker_stack__media__config_dir }}/airsonic/playlists:/playlists"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      JAVA_OPTS: -Dserver.use-forward-headers=true
    labels: "{{ __docker_stack__media_airsonic__traefik_labels }}"

  # Emby - Media Server
  embyms:
    active: no
    image: emby/embyserver:latest
    container_name: embyms
    restart: unless-stopped
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    devices:
      - /dev/dri:/dev/dri # for harware transcoding
    security_opt:
      - no-new-privileges:true
    ports:
      - "{{ __docker_stack__media__emby_port }}:8096/tcp"
      - "8920:8920/tcp"
    volumes:
#      - /etc/localtime:/etc/localtime:ro
      - /dev/shm:/transcode
      - "{{ __docker_stack__media__config_dir }}/embyms:/config"
      - "{{ __docker_stack__media__nas_path }}:/nas"
      - "{{ __docker_stack__media__downloads }}:/downloads"
    environment:
      UID: "{{ docker_stack__user_uid }}"
      GID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
      HOSTNAME: "emby"
    labels: "{{ __docker_stack__media_embyms__traefik_labels }}"

  # Jellyfin - Media Server
  jellyfin:
    active: no
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    devices:
      - /dev/dri:/dev/dri # for harware transcoding
    security_opt:
      - no-new-privileges:true
    ports:
      - "{{ __docker_stack__media__jellyfin_port }}:8096"
      - "8921:8920" # Changed to 8921 - conflict with Emby
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
      UMASK_SET: 022
    volumes:
      - /dev/shm:/ram_transcode
      - "{{ __docker_stack__media__config_dir }}/jellyfin:/config"
      - "{{ __docker_stack__media__nas_path }}:/nas"
#      # Run in ro mode while upgrading JF
#      - "{{ __docker_stack__media__nas_path }}:/nas:ro"
    labels: "{{ __docker_stack__media_jellyfin__traefik_labels }}"

  ######### Converters ##########

  # Handbrake - Video Conversion (Transcoding and compression)
  handbrake:
    active: no
    image: jlesage/handbrake:latest
    container_name: handbrake
    restart: unless-stopped
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$HANDBRAKE_PORT:5800"
    volumes:
#      - $USERDIR/Downloads:/downloads:ro
#      - $DOCKERDIR/handbrake/config:/config:rw
#      - $DOCKERDIR/handbrake/watch:/watch:rw
#      - $USERDIR/Downloads/wip_media:/output:rw
      - "{{ __docker_stack__media__config_dir }}/handbrake/config:/config:rw"
      - "{{ __docker_stack__media__config_dir }}/handbrake/watch:/watch:rw"
      - "{{ __docker_stack__media__downloads }}:/downloads:ro"
      - "{{ __docker_stack__media__path }}/handbrake/output:/output:rw"
    environment:
      USER_ID: "{{ docker_stack__user_uid }}"
      GROUP_ID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
      UMASK: 002
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      AUTOMATED_CONVERSION_KEEP_SOURCE: 1
      VNC_PASSWORD: "{{ __docker_stack__media__vnc_password }}"
    labels: "{{ __docker_stack__media_handbrake__traefik_labels }}"


  # MKVToolNix - Video Editing (Remuxing - changing media container while keeping original source quality)
  mkvtoolnix:
    active: no
    image: jlesage/mkvtoolnix:latest
    container_name: mkvtoolnix
    restart: unless-stopped
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - "$MKVTOOLNIX_PORT:5800"
    volumes:
#      - $USERDIR/Downloads:/downloads:rw
#      - $DOCKERDIR/mkvtoolnix/config:/config:rw
      - "{{ __docker_stack__media__config_dir }}/mkvtoolnix/config:/config:rw"
      - "{{ __docker_stack__media__downloads }}:/downloads:rw"
    environment:
      USER_ID: "{{ docker_stack__user_uid }}"
      GROUP_ID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
      UMASK: 002
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: "{{ __docker_stack__media__vnc_password }}"
    labels: "{{ __docker_stack__media_mkvtoolnix__traefik_labels }}"

  # MakeMKV – MakeMKV is a format converter, otherwise called "transcoder".
  #   It converts the video clips from proprietary (and usually encrypted) disc into a set of MKV files,
  #   preserving most information but not changing it in any way.
  #   The MKV format can store multiple video/audio tracks with all meta-information and preserve chapters.
  # ref: https://github.com/jlesage/docker-makemkv

  makemkv:
    active: no
    image: "jlesage/makemkv:latest"
    hostname: makemkv
    container_name: "makemkv"
    restart: "unless-stopped"
    environment:
      USER_ID: "{{ docker_stack__user_uid }}"
      GROUP_ID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    volumes:
#        - "/docker/appdata/makemkv:/config:rw"
#        - "$HOME:/storage:ro"
#        - "$HOME/MakeMKV/output:/output:rw"
      - "{{ __docker_stack__media__config_dir }}/makemkv:/config:rw"
      - "{{ __docker_stack__media__downloads }}:/storage:ro"
      - "{{ __docker_stack__media__path }}/makemkv/output:/output:rw"
#      devices:
#        - "/dev/sr0:/dev/sr0"
#        - "/dev/sg2:/dev/sg2"
    labels: "{{ __docker_stack__media_makemkv__traefik_labels }}"


######### SEARCHERS ##########
  ## flaresolverr – Torrent Proxy
  ## ref: https://github.com/FlareSolverr/FlareSolverr
  ## ref: https://gist.github.com/FaintGhost/dff7aa5d8ad490cb9b82cf677865aaa9
  flaresolverr:
#    image: "lscr.io/linuxserver/flaresolverr:latest"
    image: "ghcr.io/flaresolverr/flaresolverr:latest"
    container_name: "flaresolverr"
    restart: "unless-stopped"
    environment:
      TZ: "{{ docker_stack__timezone }}"
      LOG_LEVEL: "info"
      LOG_HTML: "false"
      CAPTCHA_SOLVER: "none"
    ports:
      - "8191:8191"
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
#    volumes:
#      - "/etc/localtime:/etc/localtime:ro"
#      - "{{ __docker_stack__media__config_dir }}/flaresolverr:/config"
    labels: "{{ __docker_stack__media_flaresolverr__traefik_labels }}"

  ## prowlarr – Torrent Proxy
  ## ref: https://github.com/lscr.io/linuxserver/docker-prowlarr
  prowlarr:
    image: "{{ __docker_stack__media__prowlarr_image }}"
    container_name: "prowlarr"
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack__media__config_dir }}/prowlarr:/config"
      - "{{ __docker_stack__media__downloads_watch }}:/downloads"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
      - "{{ __docker_stack__ca_cert_bundle }}:/etc/ssl/certs/ca-certificates.crt:ro"
    labels: "{{ __docker_stack__media_prowlarr__traefik_labels }}"

  ### NZBHydra – NZB Meta Search
  hydra:
    active: no
    image: "lscr.io/linuxserver/nzbhydra2:latest"
    container_name: "hydra"
    restart: "unless-stopped"
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack__media__config_dir }}/hydra:/config"
      - "{{ __docker_stack__media__downloads }}:/downloads"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
    labels: "{{ __docker_stack__media_hydra__traefik_labels }}"

  ## Jackett – Torrent Proxy
  jackett:
    image: "lscr.io/linuxserver/jackett:latest"
    container_name: "jackett"
    restart: "unless-stopped"
#    mem_limit: 300m
#    ports:
#      - 9117:9117
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    depends_on:
      - openvpn
    network_mode: service:openvpn
#    networks:
#      - "{{ docker_stack__traefik_proxy_network }}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack__media__config_dir }}/jackett:/config"
      - "{{ __docker_stack__media__downloads_watch }}:/downloads"
      - "{{ __docker_stack__media__config_dir }}/shared:/shared"
    labels: "{{ __docker_stack__media_jackett__traefik_labels }}"

  ## NextCloud – Your Own Cloud Storage
  nextcloud:
    container_name: nextcloud
    image: "{{ __docker_stack__media_nextcloud__image }}"
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    restart: "unless-stopped"
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    volumes:
      - "{{ __docker_stack__media__config_dir }}/nextcloud/config:/config"
#        - "{{ docker_stack__user_home }}/shared_data:/data"
      - "{{ __docker_stack__media__config_dir }}/nextcloud/data:/data"
#      - "{{ __docker_stack__media__config_dir }}/nextcloud/certs:/etc/nginx/certs"
#        - "{{ __docker_stack__media__config_dir }}/shared:/shared"
      - "{{ __docker_stack__media__shared_data_dir }}:/shared"
      - "{{ __docker_stack__media__path }}:/media"
#      - "{{ __docker_stack__media__nas_path }}:/remote_media"
    labels: "{{ __docker_stack__media_nextcloud__traefik_labels }}"

  ## Pydio – Your Own Cloud Storage
  pydio:
    active: no
    container_name: pydio
    hostname: pydio
#      image: "lscr.io/linuxserver/pydio"
    image: "lscr.io/linuxserver/pydio:latest"
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
    restart: "unless-stopped"
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ __docker_stack__media__config_dir }}/pydio:/config"
#        - "{{ docker_stack__user_home }}/shared_data:/data"
      - "{{ __docker_stack__media__config_dir }}/pydio/data:/data"
#        - "{{ __docker_stack__media__config_dir }}/shared:/shared"
      - "{{ __docker_stack__media__shared_data_dir }}:/shared"
      - "{{ __docker_stack__media__path }}:/media"
#      - "{{ __docker_stack__media__nas_path }}:/remote_media"
    labels: "{{ __docker_stack__media_pydio__traefik_labels }}"

  ## ref: https://hub.docker.com/r/lscr.io/linuxserver/thelounge
  ## ref: https://dev.to/adamkdean/setup-your-own-persistent-web-irc-client-3678
  thelounge:
    active: no
    image: ghcr.io/lscr.io/linuxserver/thelounge
    container_name: thelounge
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
    volumes:
      - "{{ __docker_stack__media__config_dir }}/thelounge:/config"
    ports:
      - 9000:9000
    restart: unless-stopped
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    labels: "{{ __docker_stack__media_thelounge__traefik_labels }}"

  ############################# UTILITIES

  # Duplicati - Backup
  duplicati:
    active: no
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    restart: unless-stopped
    networks:
      - "{{ docker_stack__traefik_proxy_network }}"
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$DUPLICATI_PORT:8200"
    volumes:
      - "{{ __docker_stack__media__config_dir }}/duplicati:/config"
      - "{{ __docker_stack__media__nas_path }}:/nas"
      - "{{ __docker_stack__media__config_dir }}/shared:/userdir"
    environment:
      PUID: "{{ docker_stack__user_uid }}"
      PGID: "{{ docker_stack__user_gid }}"
      TZ: "{{ docker_stack__timezone }}"
      # CLI_ARGS: #optional
    labels: "{{ __docker_stack__media_duplicati__traefik_labels }}"

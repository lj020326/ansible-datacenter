---

__docker_stack_appspecs__base_stack_dir: "{{ docker_stack_dir | d('/home/user/docker-dirs') }}"

__docker_stack_appspecs__base_traefik_certresolver_enable_qa: "{{ docker_stack_traefik_certprovider_qa | d(False) | bool }}"

__docker_stack_appspecs__base_traefik_certresolver: "{{ 'letsencrypt-qa' if __docker_stack_appspecs__base_traefik_certresolver_enable_qa else 'letsencrypt' }}"

__docker_stack_appspecs__base_traefik_certresolver_acme_file_qa: "acme-qa.json"
__docker_stack_appspecs__base_traefik_certresolver_acme_file_prod: "acme.json"
__docker_stack_appspecs__base_traefik_certresolver_acme_file: "{{ __docker_stack_appspecs__base_traefik_certresolver_acme_file_qa if __docker_stack_appspecs__base_traefik_certresolver_enable_qa else __docker_stack_appspecs__base_traefik_certresolver_acme_file_prod }}"

__docker_stack_appspecs__base_traefik_version: "{{ docker_stack_traefik_version | d('v2') }}"

__docker_stack_appspecs__base_traefik_dirs:
  v1: "{{ __docker_stack_appspecs__base_stack_dir }}/traefik1"
  v2: "{{ __docker_stack_appspecs__base_stack_dir }}/traefik2"

__docker_stack_appspecs__base_traefik_dir: "{{ __docker_stack_appspecs__base_traefik_dirs[__docker_stack_appspecs__base_traefik_version] }}"

__docker_stack_appspecs__base_traefik_http: "{{ docker_stack_traefik_http | d('80') }}"
__docker_stack_appspecs__base_traefik_https: "{{ docker_stack_traefik_https | d('443') }}"
__docker_stack_appspecs__base_traefik_https_suffix: "{{ ':' + __docker_stack_appspecs__base_traefik_https|string if __docker_stack_appspecs__base_traefik_https != '443' else '' }}"

__docker_stack_appspecs__base_cert_dump_dir_default: "{{ __docker_stack_appspecs__base_stack_dir }}/shared/certs"
__docker_stack_appspecs__base_cert_dump_dir: "{{ docker_stack_external_ssl_cert_dir | d(__docker_stack_appspecs__base_cert_dump_dir_default) }}"

__docker_stack_appspecs__base_cacert_files:
  - src: "{{ docker_stack_internal_ssl_cert_dir }}/{{ docker_stack_ssl_internal_cert_file }}"
    dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/certs/{{ docker_stack_ssl_internal_cert_file }}"
  - src: "{{ docker_stack_internal_ssl_certkey_dir }}/{{ docker_stack_ssl_internal_privatekey_file }}"
    dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/certs/{{ docker_stack_ssl_internal_privatekey_file }}"
    mode: "0600"
#  - src: "{{ docker_stack_internal_ssl_cert_dir }}/{{ docker_stack_ssl_internal_root_cacert_file }}"
#    dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/certs/{{ docker_stack_ssl_internal_root_cacert_file }}"
#  - src: "{{ docker_stack_internal_ssl_cert_dir }}/{{ docker_stack_ssl_internal_cacert_file }}"
#    dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/certs/{{ docker_stack_ssl_internal_cacert_file }}"

#__docker_stack_appspecs__base_traefik_image: traefik:v2.3
#__docker_stack_appspecs__base_traefik_image: traefik:latest
__docker_stack_appspecs__base_traefik_image: traefik:v2.9.6

__docker_stack_appspecs__base_traefik_auth_labels:
    ## Middlewares
    traefik.http.routers.traefik-rtr.middlewares: chain-oauth@file

docker_stack_appspec_config_tpls__base:
  - { src: "traefik/config-traefik-v2.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/traefik.yml", backup: yes }
#  - { src: "traefik/rules/serviceTransport.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/serviceTransport.yml" }
  - { src: "traefik/rules/middlewares.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/middlewares.yml"}
  - { src: "traefik/rules/middlewares-chains.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/middlewares-chains.yml"}
  - { src: "traefik/rules/certs-traefik.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/certs-traefik.yml"}
  - { src: "traefik/rules/tls-opts.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/tls-opts.yml"}
  - { src: "traefik/rules/tls-opts-strict.yml.j2", dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/tls-opts-strict.yml"}
#  - { src: 'traefik/rules/rules.yml.j2', dest: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules/rules.yml"}
  - { src: "docker-gc-exclude.conf.j2", dest: "{{ __docker_stack_appspecs__base_stack_dir }}/docker-gc/docker-gc-exclude" }

docker_stack_appspec_config_dirs__base:
  - { path: "{{ __docker_stack_appspecs__base_stack_dir }}" }
  - { path: "{{ __docker_stack_appspecs__base_traefik_dir }}" }
  - { path: "{{ __docker_stack_appspecs__base_traefik_dir }}/rules" }
  - { path: "{{ __docker_stack_appspecs__base_traefik_dir }}/certs" }
  - { path: "{{ __docker_stack_appspecs__base_traefik_dir }}/acme" }
  - { path: "{{ __docker_stack_appspecs__base_stack_dir }}/shared" }
  - { path: "{{ __docker_stack_appspecs__base_stack_dir }}/shared/certs" }
  - { path: "{{ __docker_stack_appspecs__base_stack_dir }}/docker-gc" }
  - { path: "{{ __docker_stack_appspecs__base_stack_dir }}/portainer" }

docker_stack_firewalld_appspec_ports__base:
  - "{{ __docker_stack_appspecs__base_traefik_http }}/tcp"
  - "{{ __docker_stack_appspecs__base_traefik_https }}/tcp"

docker_stack_traefik_proxy_network_info: |
  {{ { docker_stack_traefik_proxy_network: { 'external': true } } }}

docker_stack_appspec_networks__base_default:
#  internal:
#    external: false
#    attachable: true

#  t2_proxy:
#    ipv4_address: 192.168.90.254 # You can specify a static IP
#    external: true

#  t2_proxy:
#    external: true

#  traefik_proxy:
#    name: "{{ docker_stack_traefik_proxy_network }}"
#    external: true

  default:
    driver: bridge

  ## ref: https://github.com/stefanprodan/swarmprom/blob/master/docker-compose.traefik.yml
  net:
#    driver: overlay
    external: false
    attachable: true

  socket_proxy:
    external: true

#docker_stack_appspec_networks__base: "{{ docker_stack_appspec_networks__base_default | combine( { docker_stack_traefik_proxy_network: { 'external': true } } ) }}"
docker_stack_appspec_networks__base: "{{ docker_stack_appspec_networks__base_default | combine( docker_stack_traefik_proxy_network_info ) }}"

docker_stack_appspec_volumes__base: {}

docker_stack_appspec__base:
  dirs: "{{ docker_stack_appspec_config_dirs__base | d([]) }}"
  files: "{{ docker_stack_appspec_config_files__base | d([]) }}"
  templates: "{{ docker_stack_appspec_config_tpls__base | d([]) }}"
  firewalld_services: "{{ docker_stack_firewalld_appspec_services__base | d([]) }}"
  firewalld_ports: "{{ docker_stack_firewalld_appspec_ports__base | d([]) }}"
  networks: "{{ docker_stack_appspec_networks__base | d({}) }}"
  volumes: "{{ docker_stack_appspec_volumes__base | d({}) }}"
  docker_services: "{{ docker_stack_appspec_services__base | d({}) }}"

__docker_stack_appspecs__traefik_labels_traefik: "{{ docker_stack_traefik__traefik_labels | d(__docker_stack_appspecs__traefik_labels_traefik_default) }}"
__docker_stack_appspecs__traefik_labels_whoami: "{{ docker_stack_appspecs__traefik_labels_whoami | d(__docker_stack_appspecs__traefik_labels_whoami_default) }}"
__docker_stack_appspecs__traefik_labels_portainer: "{{ docker_stack_appspecs__traefik_labels_portainer | d(__docker_stack_appspecs__traefik_labels_portainer_default) }}"
__docker_stack_appspecs__traefik_labels_dozzle: "{{ docker_stack_appspecs__traefik_labels_dozzle | d(__docker_stack_appspecs__traefik_labels_dozzle_default) }}"

## ref: https://github.com/htpcBeginner/docker-traefik/blob/master/docker-compose-t2.yml
docker_stack_appspec_services__base:
  ######### FRONTENDS ##########
  # Traefik Reverse Proxy
  traefik:
    container_name: traefik
    image: "{{ __docker_stack_appspecs__base_traefik_image }}"
    restart: unless-stopped
    networks:
#      - default
      - "{{ docker_stack_traefik_proxy_network }}"
      - socket_proxy
#    depends_on:
#      - socket-proxy
#    security_opt:
#      - no-new-privileges:true
    #healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 5s
    #  retries: 3
    ports:
      - target: 80
        published: "{{ __docker_stack_appspecs__base_traefik_http }}"
        protocol: tcp
        mode: host
      - target: 443
        published: "{{ __docker_stack_appspecs__base_traefik_https }}"
        protocol: tcp
        mode: host
      # - target: 8080
      #   published: 8080
      #   protocol: tcp
      #   mode: host
      #- target: 8081
      #  published: 8082
      #  protocol: tcp
      #  mode: host
    environment:
      PUID: "{{ docker_stack_user_uid }}"
      PGID: "{{ docker_stack_user_gid }}"
      TZ: "{{ docker_stack_timezone }}"
      CLOUDFLARE_EMAIL: "{{ docker_stack_cloudflare_email }}"
      CLOUDFLARE_API_KEY: "{{ docker_stack_cloudflare_apikey }}"
      CF_API_EMAIL: "{{ docker_stack_cloudflare_email }}"
      CF_API_KEY: "{{ docker_stack_cloudflare_apikey }}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ __docker_stack_appspecs__base_traefik_dir }}:/etc/traefik"
      - "{{ __docker_stack_appspecs__base_traefik_dir }}/certs:/certs"
      - "{{ __docker_stack_appspecs__base_stack_dir }}/shared:/shared"
    labels: "{{ __docker_stack_appspecs__traefik_labels_traefik }}"

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: fluencelabs/docker-socket-proxy
    restart: always
    networks:
      - socket_proxy
#      - "{{ docker_stack_traefik_proxy_network }}"
    privileged: true
    ports:
      - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network.
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      LOG_LEVEL: debug # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      EVENTS: 1
      PING: 1
      VERSION: 1
      ## Revoked by Default
      # Security critical
      AUTH: 0
      SECRETS: 0
      POST: 1 # Watchtower
      DELETE: 1 # Watchtower
        # GET Optons
      BUILD: 0
      COMMIT: 0
      CONFIGS: 0
      CONTAINERS: 1 # Traefik, portainer, etc.
      DISTRIBUTION: 0
      EXEC: 0
      IMAGES: 1 # Portainer, Watchtower
      INFO: 1 # Portainer
      NETWORKS: 1 # Portainer, Watchtower
      NODES: 0
      PLUGINS: 0
      SERVICES: 1 # Portainer
      SESSION: 0
      SWARM: 0
      SYSTEM: 0
      TASKS: 1 # Portainer
      VOLUMES: 1 # Portainer
      # POST Options
      CONTAINERS_CREATE: 1 # WatchTower
      CONTAINERS_START: 1 # WatchTower
      CONTAINERS_UPDATE: 1 # WatchTower
      # DELETE Options
      CONTAINERS_DELETE: 1 # WatchTower
      IMAGES_DELETE: 1 # WatchTower

  ## Whoami - useful for debugging traefik config related issues
  whoami:
    image: "containous/whoami"
    container_name: "whoami"
    hostname: "whoami"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
    labels: "{{ __docker_stack_appspecs__traefik_labels_whoami }}"

  ######### DOCKER RELATED ##########
  # Watchtower - Automatic Update of Containers/Apps
  watchtower:
#    image: v2tec/watchtower
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    networks:
      - default
      - socket_proxy
    depends_on:
      - socket-proxy
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: "{{ docker_stack_timezone }}"
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 30 12 * * *" # Everyday at 12:30
#      WATCHTOWER_NOTIFICATIONS: shoutrrr
      WATCHTOWER_NOTIFICATIONS_LEVEL: info
#      WATCHTOWER_NOTIFICATION_URL: "telegram://{{ __docker_stack_appspecs__base_tgram_bot_token }}@telegram?channels={{ __docker_stack_appspecs__base_tgram_chat_id }}"
      DOCKER_HOST: tcp://socket-proxy:2375
#      DOCKER_API_VERSION: "1.40"

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    restart: unless-stopped
    networks:
      - socket_proxy
    depends_on:
      - socket-proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      ## https://github.com/clockworksoul/docker-gc-cron
      - "{{ __docker_stack_appspecs__base_stack_dir }}/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude"
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: "{{ docker_stack_timezone }}"
      DOCKER_HOST: tcp://socket-proxy:2375

  # Traefik Certs Dumper - Extract LetsEncrypt Certificates - Traefik2 Compatible
  certdumper:
    container_name: traefik_certdumper
    image: humenius/traefik-certs-dumper:latest
    network_mode: none
    security_opt:
      - no-new-privileges:true
    # command: --restart-containers container1,container2,container3
    user: "{{ docker_stack_user_uid }}:{{ docker_stack_user_gid }}"
    environment:
      DOMAIN: "{{ docker_stack_external_domain }}"
    volumes:
      - "{{ __docker_stack_appspecs__base_traefik_dir }}/acme:/traefik:ro"
      - "{{ __docker_stack_appspecs__base_cert_dump_dir }}:/output:rw"
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Only needed if restarting containers (use Docker Socket Proxy instead)

  # Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: "portainer/portainer-ce:latest"
    restart: unless-stopped
    # command: -H unix:///var/run/docker.sock # # Use Docker Socket Proxy instead for improved security
#    command: -H tcp://socket-proxy:2375 # appears to not work. Workaround was to create a new socket-proxy:2375 endpoint on portainer settings
    environment:
      TZ: "{{ docker_stack_timezone }}"
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
#      - socket_proxy
#    depends_on:
#      - socket-proxy
#    ports:
#     - target: 9000
#       published: 9010
#       protocol: tcp
#       mode: host
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "{{ __docker_stack_appspecs__base_stack_dir }}/portainer/data:/data"
    labels: "{{ __docker_stack_appspecs__traefik_labels_portainer }}"

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    networks:
      - "{{ docker_stack_traefik_proxy_network }}"
      - socket_proxy
    depends_on:
      - socket-proxy
    security_opt:
      - no-new-privileges:true
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
      DOCKER_HOST: tcp://socket-proxy:2375
#    ports:
#     - target: 8080
#       published: 8080
#       protocol: tcp
#       mode: host
#     volumes:
#      - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
    labels: "{{ __docker_stack_appspecs__traefik_labels_dozzle }}"

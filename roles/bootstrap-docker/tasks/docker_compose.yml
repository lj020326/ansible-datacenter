---

- set_fact:
    __log_prefix_local: "Docker | Docker Compose |"

- name: "{{ __log_prefix_local }} Install docker-compose package from package manager {{ ansible_pkg_mgr }}"
  when: bootstrap_docker__compose_package is defined
  package:
    state: present
    name: "{{ bootstrap_docker__compose_package }}"

- name: "{{ __log_prefix_local }} Check current docker-compose version."
  command: "{{ bootstrap_docker__compose_path }} --version"
  register: __bootstrap_docker__compose_version
  check_mode: false
  changed_when: false
  failed_when: false

- name: "{{ __log_prefix_local }} Set __bootstrap_docker__compose_current_version"
  set_fact:
    __bootstrap_docker__compose_current_version: "{{ __bootstrap_docker__compose_version.stdout | regex_search('(\\d+(\\.\\d+)+)') }}"
  when: >
    __bootstrap_docker__compose_version.stdout is defined
    and (__bootstrap_docker__compose_version.stdout | length > 0)

- name: "{{ __log_prefix_local }} Init __bootstrap_docker__compose_version"
  set_fact:
    __bootstrap_docker__compose_version: "{{ bootstrap_docker__compose_version | d('') }}"

- name: "{{ __log_prefix_local }} Get __bootstrap_docker__compose_version"
  when: bootstrap_docker__compose_version is not defined
  run_once: yes
  block:

    - name: "{{ __log_prefix_local }} Set __compose_latest_version_result"
      uri:
        url: "{{ bootstrap_docker__compose_url_latest }}"
      register: __compose_latest_version_result

    - name: "{{ __log_prefix_local }} Display __compose_latest_version_result"
      debug:
        var: __compose_latest_version_result
        verbosity: 2

    - name: "{{ __log_prefix_local }} Set __docker_compose_latest_version_url"
      set_fact:
        __docker_compose_latest_version_url: "{{ __compose_latest_version_result.url }}"

    - name: "{{ __log_prefix_local }} Display __docker_compose_latest_version_url"
      debug:
        var: __docker_compose_latest_version_url

    - name: "{{ __log_prefix_local }} Set __docker_compose_latest_version"
      set_fact:
        __docker_compose_latest_version: "{{ __docker_compose_latest_version_url | regex_replace('.*tag\\/(.*)', '\\1') }}"

    - name: "{{ __log_prefix_local }} Display __docker_compose_latest_version"
      debug:
        var: __docker_compose_latest_version

    - name: "{{ __log_prefix_local }} Display __docker_compose_latest_version"
      debug:
        var: __docker_compose_latest_version

    - name: "{{ __log_prefix_local }} Set __bootstrap_docker__compose_version"
      set_fact:
        __bootstrap_docker__compose_version: "{{ bootstrap_docker__compose_version | d(__docker_compose_latest_version) }}"

- name: "{{ __log_prefix_local }} Init __replace_docker_compose"
  set_fact:
    __replace_docker_compose: no

- name: "{{ __log_prefix_local }} Set __replace_docker_compose"
  when: >
    __bootstrap_docker__compose_current_version is not defined
    or (__bootstrap_docker__compose_current_version | length == 0)
  set_fact:
    __replace_docker_compose: yes

- name: "{{ __log_prefix_local }} Set __replace_docker_compose"
  when:
    - bootstrap_docker__compose_version is defined
    - bootstrap_docker__update_exist_compose_version|d(False)|bool
    - (__bootstrap_docker__compose_version | regex_replace('v', '')) not in __bootstrap_docker__compose_current_version
  set_fact:
    __replace_docker_compose: yes

- name: "{{ __log_prefix_local }} Replace existing docker-compose"
  when: __replace_docker_compose|bool
  block:

    - name: "{{ __log_prefix_local }} Delete existing docker-compose version if it's different."
      file:
        path: "{{ bootstrap_docker__compose_path }}"
        state: absent

    - name: "{{ __log_prefix_local }} Install Docker Compose"
      get_url:
        url: "{{ bootstrap_docker__compose_url }}"
        dest: "{{ bootstrap_docker__compose_path }}"
        mode: "0755"

#########
## Docker virtualenv for ansible docker-compose automation
#########
- name: "{{ __log_prefix_local }} pip self-update {{ bootstrap_docker__pip_executable }}"
  pip:
    name: pip
    state: latest
    executable: "{{ bootstrap_docker__pip_executable }}"

- name: "{{ __log_prefix_local }} Install Python docker packages"
  pip:
    name: >
      {{ item.name }}{% if item.version|d() %}=={{ item.version }}{% endif %}
    state: "{{ item.state | d('present') }}"
    extra_args: "--user"
    executable: "{{ bootstrap_docker__pip_executable }}"
  loop: "{{ __bootstrap_docker__pip_packages }}"
  when: item.name | d()

- name: "{{ __log_prefix_local }} pip self-update"
  pip:
    name: pip
    state: latest
    virtualenv: "{{ bootstrap_docker__pip_virtualenv }}"
    virtualenv_command: "{{ bootstrap_docker__python_virtualenv_command }}"

## Unable to find pip in the virtualenv (python 3.10)
## https://github.com/ansible/ansible/issues/77604
- name: "{{ __log_prefix_local }} Install Python docker packages into docker-python virtualenv"
  pip:
    name: >
      {{ item.name }}{% if item.version|d('')|length>0 %}=={{ item.version }}{% endif %}
    state: "{{ item.virtualenv_state | d('present') }}"
    virtualenv: "{{ bootstrap_docker__pip_virtualenv }}"
    virtualenv_command: "{{ bootstrap_docker__python_virtualenv_command }}"
  loop: "{{ __bootstrap_docker__pip_packages }}"
  when: item.name | d()
  environment:
    SETUPTOOLS_USE_DISTUTILS: stdlib

- name: "{{ __log_prefix_local }} Symlink Docker Python binary to {{ bootstrap_docker_python_docker_interpreter }}"
  file:
    path: "{{ bootstrap_docker_python_docker_interpreter }}"
    src: "{{ bootstrap_docker__pip_virtualenv }}/bin/python"
    state: link

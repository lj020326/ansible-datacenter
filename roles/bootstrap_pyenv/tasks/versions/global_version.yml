---
- name: Get current global version
  ansible.builtin.command: >-
    {{ pyenv_bin_path }} global
  args:
    executable: "{{ pyenv_install_shell | default(omit) }}"
  register: pyenv_global_version
  changed_when: false

- name: Set pyenv_global_active fact
  ansible.builtin.set_fact:
    pyenv_global_active: "{{ pyenv_global_version.stdout_lines | join(' ') | trim() }}"

- name: Check if 'system' version is available
  when: "'system' in pyenv_global"
  ansible.builtin.command: >-
    {{ pyenv_bin_path }} versions
  args:
    executable: "{{ pyenv_install_shell | default(omit) }}"
  register: pyenv_versions
  changed_when: false
  failed_when: false

- name: Remove 'system' from pyenv_global
  when: "'system' in pyenv_global and 'system' not in pyenv_versions.stdout"
  ansible.builtin.set_fact:
    pyenv_global: "{{ pyenv_global | replace('system', '') | trim() }}"

- name: Set pyenv global version to '{{ pyenv_global }}'
  when:
    - pyenv_global is defined
    - pyenv_global_active != pyenv_global
  changed_when: false
  ansible.builtin.shell: >-
    {{ pyenv_bin_path }} global {{ pyenv_global }} &&
    {{ pyenv_bin_path }} rehash
  args:
    executable: "{{ pyenv_install_shell | default(omit) }}"

---
- name: Set global version if not provided
  ansible.builtin.set_fact:
    awx_version: "{{ lookup('file', playbook_dir + '/../VERSION') }}"
  when: awx_version is not defined

- name: Verify awx-logos directory exists for official install
  stat:
    path: "../../awx-logos"
#  delegate_to: localhost
  register: logosdir
  failed_when: logosdir.stat.isdir is not defined or not logosdir.stat.isdir
  when: awx_official|default(false)|bool

- name: Copy logos for inclusion in sdist
  ansible.builtin.copy:
    src: "../../awx-logos/awx/ui/client/assets"
    dest: "../awx/ui/client/"
#  delegate_to: localhost
  when: awx_official|default(false)|bool

- name: Set sdist file name
  ansible.builtin.set_fact:
    awx_sdist_file: "awx-{{ awx_version }}.tar.gz"

- name: AWX Distribution
  ansible.builtin.debug:
    msg: "{{ awx_sdist_file }}"

- name: Stat distribution file
  stat:
    path: "../dist/{{ awx_sdist_file }}"
#  delegate_to: localhost
  register: sdist

- name: Clean distribution
  ansible.builtin.shell: make clean
  args:
    chdir: ..
  ignore_errors: true
  when: not sdist.stat.exists
#  delegate_to: localhost

- name: Build sdist builder image
  docker_image:
    build:
      path: "{{ role_path }}/files"
      dockerfile: Dockerfile.sdist
      pull: false
      args:
        http_proxy: "{{ awx_http_proxy | default('') }}"
        https_proxy: "{{ awx_https_proxy | default('') }}"
        no_proxy: "{{ awx_no_proxy | default('') }}"
    name: awx_sdist_builder
    tag: "{{ awx_version }}"
    source: 'build'
    force_source: true
#  delegate_to: localhost
  when: awx_use_container_for_build|default(true)|bool

- name: Build AWX distribution using container
  docker_container:
    env:
      http_proxy: "{{ awx_http_proxy | default('') }}"
      https_proxy: "{{ awx_https_proxy | default('') }}"
      no_proxy: "{{ awx_no_proxy | default('') }}"
    image: "awx_sdist_builder:{{ awx_version }}"
    name: awx_sdist_builder
    container_default_behavior: compatibility
#    container_default_behavior: no_defaults
    state: started
    detach: false
    volumes:
      - ../:/awx:Z
#  delegate_to: localhost
  when: awx_use_container_for_build|default(true)|bool

- name: Build AWX distribution locally
  ansible.builtin.shell: make sdist
  args:
    chdir: ..
#  delegate_to: localhost
  when: not awx_use_container_for_build|default(true)|bool

- name: Set docker build base path
  ansible.builtin.set_fact:
    docker_base_path: "{{ awx_local_base_config_path|default('/tmp') }}/docker-image"

- name: Set awx_web image name
  ansible.builtin.set_fact:
    awx_web_image: "{{ awx_web_image|default('awx_web') }}"

- name: Set awx_task image name
  ansible.builtin.set_fact:
    awx_task_image: "{{ awx_task_image|default('awx_task') }}"

- name: Ensure directory exists
  file:
    path: "{{ docker_base_path }}"
    state: directory
#  delegate_to: localhost

- name: Stage sdist
  ansible.builtin.copy:
    src: "../dist/{{ awx_sdist_file }}"
    dest: "{{ docker_base_path }}/{{ awx_sdist_file }}"
#  delegate_to: localhost

- name: Template web Dockerfile
  ansible.builtin.template:
    src: Dockerfile.j2
    dest: "{{ docker_base_path }}/Dockerfile"
#  delegate_to: localhost

- name: Template task Dockerfile
  ansible.builtin.template:
    src: Dockerfile.task.j2
    dest: "{{ docker_base_path }}/Dockerfile.task"
#  delegate_to: localhost

- name: Stage launch_awx
  ansible.builtin.copy:
    src: launch_awx.sh
    dest: "{{ docker_base_path }}/launch_awx.sh"
    mode: '0700'
#  delegate_to: localhost

- name: Stage launch_awx_task
  ansible.builtin.template:
    src: launch_awx_task.sh.j2
    dest: "{{ docker_base_path }}/launch_awx_task.sh"
    mode: '0700'
#  delegate_to: localhost

- name: Stage google-cloud-sdk.repo
  ansible.builtin.copy:
    src: google-cloud-sdk.repo
    dest: "{{ docker_base_path }}/google-cloud-sdk.repo"
    mode: '0700'
#  delegate_to: localhost

- name: Stage supervisor.conf
  ansible.builtin.copy:
    src: supervisor.conf
    dest: "{{ docker_base_path }}/supervisor.conf"
#  delegate_to: localhost

- name: Stage supervisor_task.conf
  ansible.builtin.copy:
    src: supervisor_task.conf
    dest: "{{ docker_base_path }}/supervisor_task.conf"
#  delegate_to: localhost

- name: Stage settings.py
  ansible.builtin.copy:
    src: settings.py
    dest: "{{ docker_base_path }}/settings.py"
#  delegate_to: localhost

- name: Stage requirements
  ansible.builtin.copy:
#    src: ../requirements/
    src: requirements/
    dest: "{{ docker_base_path }}/requirements"
#  delegate_to: localhost

- name: Stage config watcher
  ansible.builtin.copy:
#    src: ../tools/scripts/config-watcher
    src: tools/scripts/config-watcher
    dest: "{{ docker_base_path }}/config-watcher"
#  delegate_to: localhost

- name: Stage Makefile
  ansible.builtin.copy:
#    src: ../Makefile
    src: Makefile
    dest: "{{ docker_base_path }}/Makefile"
#  delegate_to: localhost

- name: Build base web image
  docker_image:
    build:
      path: "{{ docker_base_path }}"
      dockerfile: Dockerfile
      pull: false
      args:
        http_proxy: "{{ awx_http_proxy | default('') }}"
        https_proxy: "{{ awx_https_proxy | default('') }}"
        no_proxy: "{{ awx_no_proxy | default('') }}"
    name: "{{ awx_web_image }}"
    tag: "{{ awx_version }}"
    source: 'build'
    force_source: true
#  delegate_to: localhost

- name: Build base task image
  docker_image:
    build:
      path: "{{ docker_base_path }}"
      dockerfile: Dockerfile.task
      pull: false
      args:
        http_proxy: "{{ awx_http_proxy | default('') }}"
        https_proxy: "{{ awx_https_proxy | default('') }}"
        no_proxy: "{{ awx_no_proxy | default('') }}"
    name: "{{ awx_task_image }}"
    tag: "{{ awx_version }}"
    source: 'build'
    force_source: true
#  delegate_to: localhost

- name: Tag task and web images as latest
  command: "docker tag {{ item }}:{{ awx_version }} {{ item }}:latest"
#  delegate_to: localhost
  with_items:
    - "{{ awx_task_image }}"
    - "{{ awx_web_image }}"

- name: Clean docker base directory
  file:
    path: "{{ docker_base_path }}"
    state: absent
  when: cleanup_docker_base|default(True)|bool
#  delegate_to: localhost

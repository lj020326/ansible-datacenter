---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker
##
## Centos
##
# iSCSI target port
bootstrap_iscsi_client__target_port: "3260"

# dettonville.iscsi default variables
# ==============================

# .. contents:: Sections
#    :local:
#
# .. ansible.builtin.include_tasks:: ../../../includes/global.rst

# General configuration [[[
# -------------------------

# .. envvar:: bootstrap_iscsi_client__packages [[[
#
# List of packages installed for iSCSI Initiator support.
#bootstrap_iscsi_client__packages: [ 'open-iscsi', 'lvm2' ]

bootstrap_iscsi_client__system_info:
  Debian:
    service_name: open-iscsi
    packages:
      - open-iscsi
      - lvm2
  RedHat:
    service_name: iscsid
    packages:
      - libselinux-python
      - iscsi-initiator-utils

# ]]]
# .. envvar:: bootstrap_iscsi_client__interfaces [[[
#
# List of network interfaces configured for iSCSI connections. If not
# specified, iSCSI targets will be discovered on all network interfaces.
bootstrap_iscsi_client__interfaces: []
# ]]]
# .. envvar:: bootstrap_iscsi_client__portals [[[
#
# List of FQDN hostnames or IP addresses of iSCSI Target hosts on which Ansible
# will perform iSCSI discovery. Each discovered host will not be scanned again
# automatically to not distrupt existing connections. The discovery state is
# stored in Ansible local facts.
bootstrap_iscsi_client__portals: []
# ]]]
# .. envvar:: bootstrap_iscsi_client__targets [[[
#
# List of iSCSI Targets configured on a given host. Each iSCSI Target is
# defined as a YAML dict. Check :ref:`bootstrap_iscsi_client__targets` for more details.
bootstrap_iscsi_client__targets: []
# ]]]
# .. envvar:: bootstrap_iscsi_client__logical_volumes [[[
#
# List of LVM Logical Volumes based on iSCSI storage. Each volume is defined as
# a YAML dict. Check :ref:`bootstrap_iscsi_client__logical_volumes` for more details.
bootstrap_iscsi_client__logical_volumes: []
# ]]]
# ]]]
# iSCSI Qualified Name [[[
# ------------------------

# .. envvar:: bootstrap_iscsi_client__iqn_date [[[
#
# Year and month when the Naming Authority of this iSCSI host was estabilished.
bootstrap_iscsi_client__iqn_date: '{{ ansible_date_time.year + "-" + ansible_date_time.month }}'

# ]]]
# .. envvar:: bootstrap_iscsi_client__iqn_authority [[[
#
# DNS domain name of the Naming Authority responsible for this iSCSI host.
bootstrap_iscsi_client__iqn_authority: "{{ ansible_domain }}"

# ]]]
# .. envvar:: bootstrap_iscsi_client__iqn [[[
#
# Base prefix for iSCSI Qualified Name of this iSCSI Initiator host, will be
# saved in Ansible local facts to prevent changes related to the default date
# field.
bootstrap_iscsi_client__iqn: '{{ (ansible_local.iscsi.iqn if (ansible_local|d() and ansible_local.iscsi|d() and ansible_local.iscsi.iqn|d()) else ("iqn." + bootstrap_iscsi_client__iqn_date + "." +
  bootstrap_iscsi_client__iqn_authority.split(".")[::-1] | join("."))) }}'

# ]]]
# .. envvar:: bootstrap_iscsi_client__hostname [[[
#
# Hostname added to the IQN to create Initiator Name.
bootstrap_iscsi_client__hostname: "{{ ansible_hostname }}"

# ]]]
# .. envvar:: bootstrap_iscsi_client__initiator_name [[[
#
# iSCSI initiator name of this host.
bootstrap_iscsi_client__initiator_name: '{{ bootstrap_iscsi_client__iqn + ":" + bootstrap_iscsi_client__hostname }}'
# ]]]
# ]]]
# Default Initiator configuration [[[
# -----------------------------------

# .. envvar:: bootstrap_iscsi_client__enabled [[[
#
# Enable or disable ``iscsid`` daemon
bootstrap_iscsi_client__enabled: true

# ]]]
# .. envvar:: bootstrap_iscsi_client__node_startup [[[
#
# Specify if sessions should be started at boot (``automatic``) or not
# (``manual``).
bootstrap_iscsi_client__node_startup: automatic

# ]]]
# .. envvar:: bootstrap_iscsi_client__discovery_auth [[[
#
# Enable or disable iSCSI discovery authentication.
bootstrap_iscsi_client__discovery_auth: true

# ]]]
# .. envvar:: bootstrap_iscsi_client__discovery_auth_username [[[
#
# Username used for iSCSI discovery authentication on all hosts, should be the
# same for all iSCSI Targets to work automatically.
bootstrap_iscsi_client__discovery_auth_username: '{{ lookup("password", secret + "/iscsi/credentials/discovery/username") }}'

# ]]]
# .. envvar:: bootstrap_iscsi_client__discovery_auth_password [[[
#
# Password used for iSCSI discovery authentication on all hosts, should be the
# same for all iSCSI Targets to work automatically.
bootstrap_iscsi_client__discovery_auth_password: '{{ lookup("password", secret + "/iscsi/credentials/discovery/password") }}'

# ]]]
# .. envvar:: bootstrap_iscsi_client__session_auth [[[
#
# Enable or disable iSCSI session authentication.
bootstrap_iscsi_client__session_auth: true

# ]]]
# .. envvar:: bootstrap_iscsi_client__session_auth_username [[[
#
# Username used for iSCSI session authentication on all hosts, should be the
# same for all iSCSI Targets to work automatically. Can be overriden using
# ``item.auth_username`` in target configuration.
bootstrap_iscsi_client__session_auth_username: '{{ lookup("password", secret + "/iscsi/credentials/session/username") }}'

# ]]]
# .. envvar:: bootstrap_iscsi_client__session_auth_password [[[
#
# Password used for iSCSI session authentication on all hosts, should be the
# same for all iSCSI Targets to work automatically. Can be overriden using
# ``item.auth_password`` in target configuration.
bootstrap_iscsi_client__session_auth_password: '{{ lookup("password", secret + "/iscsi/credentials/session/password") }}'

# ]]]
# .. envvar:: bootstrap_iscsi_client__default_options [[[
#
# Dict with options set in ``/etc/iscsi/iscsid.conf``, passed to ``lineinfile``
# Ansible module.
bootstrap_iscsi_client__default_options:
  node.startup: "{{ bootstrap_iscsi_client__node_startup }}"
  discovery.sendtargets.auth.authmethod: '{{ "CHAP" if (bootstrap_iscsi_client__discovery_auth|d(False)) else "None" }}'
  discovery.sendtargets.auth.username: "{{ bootstrap_iscsi_client__discovery_auth_username }}"
  discovery.sendtargets.auth.password: "{{ bootstrap_iscsi_client__discovery_auth_password }}"
  node.session.auth.authmethod: '{{ "CHAP" if (bootstrap_iscsi_client__session_auth|d(False)) else "None" }}'
  node.session.auth.username: "{{ bootstrap_iscsi_client__session_auth_username }}"
  node.session.auth.password: "{{ bootstrap_iscsi_client__session_auth_password }}"
# ]]]
# ]]]
# Filesystem and mount configuration [[[
# --------------------------------------

# .. envvar:: bootstrap_iscsi_client__default_fs_type [[[
#
# Default filesystem created on block devices if none is specified.
bootstrap_iscsi_client__default_fs_type: ext4

# ]]]
# .. envvar:: bootstrap_iscsi_client__default_mount_options [[[
#
# Default mount options added in ``/etc/fstab`` to all iSCSI-based filesystems,
# if none are specified.
bootstrap_iscsi_client__default_mount_options: defaults,_netdev
# ]]]
# ]]]
# Configuration of other Ansible roles [[[
# ----------------------------------------

# .. envvar:: bootstrap_iscsi_client__unattended_upgrades__dependent_blocklist [[[
#
# Configuration of the ``dettonville.unattended_upgrades`` role.
bootstrap_iscsi_client__unattended_upgrades__dependent_blocklist:
  # Prevent automatic upgrades of the ``open-iscsi`` package. The upgrade
  # results in a restart of the service and all existing connections are lost.
  - open-iscsi
                                                                   # ]]]
                                                                   # ]]]

{{ ansible_managed | comment }}
## ref: https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos/credentials
## https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos/credentials
## ref: https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/features/secrets.adoc
## ref: https://www.jenkins.io/doc/pipeline/steps/credentials-binding/
credentials:
  system:
    domainCredentials:
    - credentials:
      - basicSSHUserPrivateKey:
          description: "bitbucket-ssh-jenkins"
          id: "bitbucket-ssh-jenkins"
          privateKeySource:
            directEntry:
              # privateKey: "${BITBUCKET_SSH_PRIVATE_KEY}"
              ## ref: https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos/credentials#example
              privateKey: "${readFile:${BITBUCKET_SSH_PRIVATE_KEY}}"
          scope: GLOBAL
          username: "${BITBUCKET_SSH_USERNAME}"
          usernameSecret: true
      - usernamePassword:
          description: "ansible-bitbucket-api-cred"
          id: "ansible-bitbucket-api-cred"
          password: "${ANSIBLE_BITBUCKET_API_PASSWORD}"
          scope: GLOBAL
          username: "${ANSIBLE_BITBUCKET_API_USERNAME}"
          usernameSecret: true
      - string:
          id: "bitbucket-ssh-jenkins-string"
          scope: GLOBAL
          secret: "${readFile:${BITBUCKET_SSH_PRIVATE_KEY}}"
          description: "bitbucket-ssh-jenkins key string"
#      - usernamePassword:
#          id: "docker-registry-admin"
#          password: "${DOCKER_REGISTRY_PASSWORD}"
#          scope: GLOBAL
#          username: "admin"
#          usernameSecret: true
#      - usernamePassword:
#          id: "github-jenkins"
#          password: "${GITHUB_PASSWORD}"
#          scope: GLOBAL
#          username: "${GITHUB_USERNAME}"
#          usernameSecret: true
    - domain:
        name: "INFRA"
        description: "INFRA domain"
      credentials:
        - usernamePassword:
            id: "infra-govc-cred"
            description: "infra-govc-cred"
            password: "${VSPHERE_PASSWORD}"
            scope: GLOBAL
            username: "${VSPHERE_USERNAME}"
            usernameSecret: true
        - usernamePassword:
            id: "infra-vcenter-cred"
            description: "infra-vcenter-cred"
            password: "${VSPHERE_PASSWORD}"
            scope: GLOBAL
            username: "${VSPHERE_USERNAME}"
            usernameSecret: true
        - usernamePassword:
            description: "ansible-user-linux-cred"
            id: "ansible-user-linux-cred"
            password: "${ANSIBLE_SSH_PASSWORD_LINUX}"
            scope: GLOBAL
            username: "${ANSIBLE_SSH_USERNAME_LINUX}"
            usernameSecret: true
        - usernamePassword:
            description: "ansible-user-windows-cred"
            id: "ansible-user-windows-cred"
            password: "${ANSIBLE_PASSWORD_WINDOWS}"
            scope: GLOBAL
            username: "${ANSIBLE_USERNAME_WINDOWS}"
            usernameSecret: true
        - usernamePassword:
            description: "ansible-integration-cred"
            id: "ansible-integration-cred"
            password: "${ANSIBLE_INTEGRATION_PASSWORD}"
            scope: GLOBAL
            username: "${ANSIBLE_INTEGRATION_USERNAME}"
            usernameSecret: true
        - string:
            id: "vmware-vcenter-password"
            scope: GLOBAL
            secret: "${VSPHERE_PASSWORD}"
            description: "vmware-vcenter-password"
#        - string:
#            id: "packer-user-password"
#            scope: GLOBAL
#            secret: "${PACKER_USER_PASSWORD}"
#            description: "packer-ssh-password"
        - usernamePassword:
            id: "infra-packer-cred"
            description: "infra-packer-cred"
            password: "${PACKER_USER_PASSWORD}"
            scope: GLOBAL
            username: "${PACKER_USER_USERNAME}"
            usernameSecret: true
        - string:
            id: "ansible-vault-password"
            scope: GLOBAL
            secret: "${ANSIBLE_VAULT_PASSWORD}"
            description: "Ansible Vault Password"
        - string:
            id: "tower-management-vault-password"
            scope: GLOBAL
            secret: "${TOWER_MANAGEMENT_VAULT_PASSWORD}"
            description: "Tower Management Vault Password"
        - string:
            id: "ansible-galaxy-pah-token"
            scope: GLOBAL
            secret: "${ANSIBLE_PRIVATE_AUTOMATION_HUB_TOKEN}"
            description: "Ansible Private Automation Hub Token"
        - string:
            id: "aac-jenkins-token-sandbox"
            scope: GLOBAL
            secret: "${AAC_JENKINS_TOKEN_SANDBOX}"
            description: "Ansible Controller Sandbox Token"
        - string:
            id: "aac-jenkins-token-dev"
            scope: GLOBAL
            secret: "${AAC_JENKINS_TOKEN_DEV}"
            description: "Ansible Controller Dev Token"
        - string:
            id: "aac-jenkins-token-qa"
            scope: GLOBAL
            secret: "${AAC_JENKINS_TOKEN_QA}"
            description: "Ansible Controller QA Token"
        - string:
            id: "aac-jenkins-token-prod"
            scope: GLOBAL
            secret: "${AAC_JENKINS_TOKEN_PROD}"
            description: "Ansible Controller Prod Token"
        - file:
            scope: GLOBAL
            id: "ansible-galaxy-pah-token-file"
            fileName: ".galaxy_token"
            secretBytes: "${base64:${readFile:${ANSIBLE_PRIVATE_AUTOMATION_HUB_TOKEN_FILE}}}"
            description: "Ansible Private Automation Hub Token File"
        - file:
            scope: GLOBAL
            id: "ansible-vault-password-file"
            fileName: ".vault_pass"
            secretBytes: "${base64:${readFile:${ANSIBLE_VAULT_PASSWORD_FILE}}}"
            description: "Ansible Vault Password File"
        - file:
            scope: GLOBAL
            id: "tower-management-vault-password-file"
            fileName: ".vault_pass_tower"
            secretBytes: "${base64:${readFile:${TOWER_MANAGEMENT_VAULT_PASSWORD_FILE}}}"
            description: "Tower Management Vault Password File"
jenkins:
  agentProtocols:
  - "JNLP4-connect"
  - "Ping"
  authorizationStrategy:
    ## ref: https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos/global-matrix-auth
    ## ref: https://stackoverflow.com/questions/32111825/jenkins-how-to-set-authorization-on-project-basis
    ## ref: https://github.com/jenkinsci/matrix-auth-plugin/blob/master/src/test/resources/org/jenkinsci/plugins/matrixauth/integrations/casc/configuration-as-code.yml
    ## ref: https://github.com/jenkinsci/matrix-auth-plugin/blob/master/src/test/resources/org/jenkinsci/plugins/matrixauth/integrations/casc/configuration-as-code-v3.yml
    projectMatrix:
      entries:
        - user:
            name: admin
            permissions:
              - Overall/Administer
        - group:
            name: admin
            permissions:
              - Overall/Administer
        - group:
            name: "SG - Ansible-Admin"
            permissions:
              - Overall/Administer
        - group:
            name: "Domain Admins"
            permissions:
              - Overall/Administer
        - group:
            name: authenticated
            permissions:
              - Overall/Read
  clouds:
{% if docker_stack__swarm_mode|bool %}
  - dockerSwarm:
      agentTemplates:
#      - command: |-
#          sh
#          -cx
#          curl --connect-timeout 20 --max-time 60 -o agent.jar $DOCKER_SWARM_PLUGIN_JENKINS_AGENT_JAR_URL && java -jar agent.jar -jnlpUrl $DOCKER_SWARM_PLUGIN_JENKINS_AGENT_JNLP_URL -secret $DOCKER_SWARM_PLUGIN_JENKINS_AGENT_SECRET -noReconnect -workDir /tmp
      - command: |-
          sh
          -cx
          java -jar /home/jenkins/swarm-client.jar ${ENV_COMMAND_OPTIONS}
        envVars: |-
          ENV_COMMAND_OPTIONS="-master '${JENKINS_HOST}' \
                      -tunnel '{{ __docker_stack__jenkins_jcac__agent_tunnel }}' \
                      -username '@/run/secrets/jenkins_agent_username' \
                      -password '@/run/secrets/jenkins_agent_password' \
                      -name 'docker-swarm-{{ inventory_hostname_short }}' \
                      -deleteExistingClients \
                      -disableClientsUniqueId \
                      -disableSslVerification"
        image: "{{ __docker_stack__jenkins_jcac__swarm_agent_image }}"
        label: "docker-agent docker dockercloud"
        limitsMemoryBytes: 0
        limitsNanoCPUs: 0
        osWindows: false
        reservationsMemoryBytes: 0
        reservationsNanoCPUs: 0
        secrets: |
          jenkins_admin_username:/run/secrets/jenkins_admin_username
          jenkins_admin_password:/run/secrets/jenkins_admin_password
        workingDir: "/tmp"
      dockerHost:
        uri: "http://socket-proxy:2375"
      dockerSwarmApiUrl: "http://socket-proxy:2375"
      jenkinsUrl: "${JENKINS_HOST}"
#      swarmNetwork: "socket_proxy"
      timeoutMinutes: 5
      tunnel: "{{ __docker_stack__jenkins_jcac__agent_tunnel }}"
{% else %}
  - docker:
      dockerApi:
        connectTimeout: 60
        dockerHost:
          uri: "tcp://socket-proxy:2375"
        readTimeout: 60
      exposeDockerHost: true
      name: "dockercloud01"
      ## ref: https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos/docker
      templates:
#      - connector:
#          attach:
#            user: "jenkins"
      - connector:
          jnlp:
            jnlpLauncher:
              tunnel: "{{ __docker_stack__jenkins_jcac__agent_tunnel }}"
              workDirSettings:
                disabled: false
                failIfWorkDirIsMissing: false
                internalDir: "remoting"
        dockerTemplateBase:
          bindAllPorts: true
          cpuPeriod: 0
          cpuQuota: 0
          environment:
          - "gid={{ docker_stack__user_gid }}"
          - "uid={{ docker_stack__user_uid }}"
          - "JAVA_OPTS=-Djavax.net.ssl.trustStore=/var/lib/jenkins/cacerts -Djavax.net.ssl.trustStorePassword=changeit"
          image: "{{ __docker_stack__jenkins_jcac__agent_image }}"
          mounts:
          - "type=tmpfs,destination=/run"
          - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
          - "type=bind,source={{ __docker_stack__ca_java_keystore }},destination=/var/lib/jenkins/cacerts,readonly"
          - "type=bind,source={{ __docker_stack__ca_cert_bundle }},destination=/etc/ssl/certs/ca-certificates.crt,readonly"
          - "type=bind,source={{ __docker_stack__jenkins_jcac__stack_dir }}/jenkins_agent,destination=/home/jenkins"
          - "type=bind,source={{ __docker_stack__jenkins_jcac__data_dir }},destination=/data"
          - "type=bind,source={{ __docker_stack__jenkins_jcac__vmware_data_dir }},destination=/vmware"
          pullCredentialsId: "docker-registry-admin"
        instanceCapStr: "1"
        labelString: "docker dockercloud dockercloud-agent"
        mode: EXCLUSIVE
        name: "dockercloud-agent"
#        pullStrategy: PULL_ALWAYS
        pullStrategy: PULL_LATEST
        pullTimeout: 300
#        remoteFs: "/home/jenkins"
        remoteFs: "/home/jenkins/agent"
        removeVolumes: true
        retentionStrategy:
          idleMinutes: 30
        stopTimeout: 0
{% endif %}
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  disableRememberMe: false
  disabledAdministrativeMonitors:
  - "hudson.node_monitors.MonitorMarkedNodeOffline"
  - "hudsonHomeIsFull"
  - "jenkins.diagnostics.ControllerExecutorsAgents"
  globalNodeProperties:
  - envVars:
      env:
      - key: "JENKINS_ENV"
        value: "${JENKINS_ENV}"
  labelAtoms:
  - name: "ansible"
  - name: "built-in"
  - name: "controller"
  - name: "docker"
  - name: "dockercloud"
  - name: "dockercloud-agent"
  - name: "linux"
  - name: "packer"
  - name: "swarm"
  - name: "jenkins-agent-{{ inventory_hostname_short }}"
  labelString: "controller"
#  markupFormatter: "plainText"
  markupFormatter:
    pegDownFormatter:
      advancedExtensions:
      - flag: 4
        name: "ABBREVIATIONS"
        selected: true
      - flag: 16
        name: "AUTOLINKS"
        selected: true
      - flag: 64
        name: "DEFINITIONS"
        selected: true
      - flag: 128
        name: "FENCED_CODE_BLOCKS"
        selected: true
      - flag: 8
        name: "HARDWRAPS"
        selected: true
      - flag: 262144
        name: "NO_FOLLOW_LINKS"
        selected: true
      - flag: 3
        name: "SMARTYPANTS"
        selected: true
      - flag: 32
        name: "TABLES"
        selected: true
      extensions:
      - flag: 196608
        name: "SUPPRESS_ALL_HTML"
        selected: false
  mode: NORMAL
  myViewsTabBar: "standard"
  noUsageStatistics: true
  ## ref: https://github.com/jenkinsci/matrix-auth-plugin/blob/master/src/test/resources/org/jenkinsci/plugins/matrixauth/integrations/casc/configuration-as-code.yml
  nodes:
  - permanent:
      labelString: "docker ansible"
      launcher:
        inbound:
          tunnel: "{{ __docker_stack__jenkins_jcac__agent_tunnel }}"
          workDirSettings:
            disabled: false
            failIfWorkDirIsMissing: false
            internalDir: "remoting"
            workDirPath: "/home/jenkins/agent"
      name: "jenkins-agent-{{ inventory_hostname_short }}"
      nodeProperties:
      - authorizationMatrix:
          inheritanceStrategy: "inheritingGlobal"
          entries:
            - group:
                name: authenticated
                permissions:
                  - Agent/Build
                  - Agent/Disconnect
            - group:
                name: anonymous
                permissions:
                  - Agent/Build
#          permissions:
#          - "GROUP:Agent/Build:authenticated"
#          - "GROUP:Agent/Disconnect:authenticated"
#          - "USER:Agent/Build:anonymous"
      remoteFS: "/home/jenkins/agent"
      retentionStrategy: "always"
  numExecutors: 4
  primaryView:
    all:
      name: "all"
  projectNamingStrategy: "standard"
  quietPeriod: 5
#  ## Since Jenkins 2.326, the agent-to-controller security subsystem is always enabled, so
#  ## following block is no longer needed and only prints a deprecation message and stacktrace during startup:
#  ##   j.s.s2m.AdminWhitelistRule#setMasterKillSwitch: Setting AdminWhitelistRule no longer has any effect.
#  ## ref: https://github.com/cider-security-research/cicd-goat/issues/15
#  remotingSecurity:
#    enabled: true
  scmCheckoutRetryCount: 0
  securityRealm:
    ldap:
      cache:
        size: 100
        ttl: 30
      configurations:
      - groupMembershipStrategy:
          fromUserRecord:
            attributeName: "memberOf"
        groupSearchBase: "(| (OU=Resource) (OU=Admin))"
        groupSearchFilter: "(& (cn={0}) (objectclass=group) )"
        inhibitInferRootDN: false
        managerDN: "${LDAP_USERNAME}"
        managerPasswordSecret: "${LDAP_PASSWORD}"
        rootDN: "{{ __docker_stack__jenkins_jcac__ldap_base_dn }}"
        server: "{{ __docker_stack__jenkins_jcac__ldap_uri }}"
        userSearch: "sAMAccountName={0}"
        ## causes agent connectivity issue using the ansibledomain user
#        userSearchBase: "OU=Corp"
      disableMailAddressResolver: false
      disableRolePrefixing: true
      groupIdStrategy: "caseInsensitive"
      userIdStrategy: "caseInsensitive"
  slaveAgentPort: "{{ __docker_stack__jenkins_jcac__agent_tcp_port }}"
  systemMessage: |+
    Welcome to our CI\CD server.  This Jenkins is configured and managed 'as code'.

  updateCenter:
    sites:
    - id: "default"
      url: "https://updates.jenkins.io/update-center.json"
  views:
  - all:
      name: "all"
  viewsTabBar: "standard"
globalCredentialsConfiguration:
  configuration:
    providerFilter: "none"
    typeFilter: "none"
## ref: https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos/simple-theme-plugin
appearance:
  simpleTheme:
    elements:
    - cssText:
        text: |
          :root {
              --material-primary: #ff973f !important;
          }
          #jenkins-head-icon {
              display: none;
          }
          #jenkins-home-link::before {
              background-repeat: no-repeat;
              height: 40px;
              display: inline-block;
              width: 80px;
              content: '';
              background-size: contain;
              vertical-align: middle;
          }
  themeManager:
    disableUserThemes: false
security:
  apiToken:
    creationOfLegacyTokenEnabled: false
    tokenGenerationOnCreationEnabled: false
    usageStatisticsEnabled: true
  gitHooks:
    allowedOnAgents: false
    allowedOnController: false
  gitHostKeyVerificationConfiguration:
    sshHostKeyVerificationStrategy: "noHostKeyVerificationStrategy"
  globalJobDslSecurityConfiguration:
    useScriptSecurity: false
  ## ref: https://github.com/jenkinsci/authorize-project-plugin/blob/master/src/test/resources/org/jenkinsci/plugins/authorizeproject/ConfigurationAsCodeTest/global.config.TriggeringUsersAuthorizationStrategy.yml
  ## ref: https://bobcares.com/blog/jenkins-setup-docker/
#  queueItemAuthenticator:
#    authenticators:
#    - global:
#        strategy: "triggeringUsersAuthorizationStrategy"
##        strategy: "systemAuthorizationStrategy"
  sSHD:
    port: -1
  scriptApproval:
#    approvedScriptHashes:
#    - "SHA512:3f205299bef2fe3329258a42f2c60d332cc35ccb41a3ca0512d7869c6aff4561ff708c48123b4f7c3dec33ccca30d54fb8b9b51b5bc7070f96236d11a3f0bdcb"
    approvedSignatures:
    - "field hudson.plugins.git.GitSCMBackwardCompatibility branch"
    - "method java.io.File isDirectory"
    - "method java.io.File mkdirs"
    - "method java.nio.file.Path toFile"
    - "new java.io.File java.lang.String"
    - "staticField org.alsac.pipeline.utils.logging.LogLevel ALL"
    - "staticField org.alsac.pipeline.utils.logging.LogLevel DEBUG"
    - "staticField org.alsac.pipeline.utils.logging.LogLevel INFO"
    - "staticField org.alsac.pipeline.utils.logging.LogLevel TRACE"
    - "staticMethod java.nio.file.Paths get java.lang.String java.lang.String[]"
    - "staticMethod org.alsac.pipeline.utils.logging.LogLevel $INIT java.lang.Object[]"
    - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods max java.util.Collection"
  updateSiteWarningsConfiguration:
    ignoredWarnings:
    - "SECURITY-142"
    - "SECURITY-1350"
    - "SECURITY-1351"
    - "SECURITY-2232"
    - "SECURITY-2332"
    - "SECURITY-2617-extended-choice-parameter"
    - "SECURITY-2811"
unclassified:
  ansiColorBuildWrapper:
    colorMaps:
    - black: "#000000"
      blackB: "#4C4C4C"
      blue: "#1E90FF"
      blueB: "#4682B4"
      cyan: "#00CDCD"
      cyanB: "#00FFFF"
      green: "#00CD00"
      greenB: "#00FF00"
      magenta: "#CD00CD"
      magentaB: "#FF00FF"
      name: "xterm"
      red: "#CD0000"
      redB: "#FF0000"
      white: "#E5E5E5"
      whiteB: "#FFFFFF"
      yellow: "#AA5500"
      yellowB: "#FFFF00"
    - black: "#000000"
      blackB: "#555555"
      blue: "#0000AA"
      blueB: "#5555FF"
      cyan: "#00AAAA"
      cyanB: "#55FFFF"
      defaultBackground: 0
      defaultForeground: 7
      green: "#00AA00"
      greenB: "#55FF55"
      magenta: "#AA00AA"
      magentaB: "#FF55FF"
      name: "vga"
      red: "#AA0000"
      redB: "#FF5555"
      white: "#AAAAAA"
      whiteB: "#FFFFFF"
      yellow: "#AA5500"
      yellowB: "#FFFF55"
    - black: "black"
      blackB: "black"
      blue: "blue"
      blueB: "blue"
      cyan: "darkcyan"
      cyanB: "cyan"
      green: "green"
      greenB: "green"
      magenta: "darkorange"
      magentaB: "magenta"
      name: "css"
      red: "red"
      redB: "red"
      white: "white"
      whiteB: "white"
      yellow: "brown"
      yellowB: "yellow"
    - black: "#2E3436"
      blackB: "#2E3436"
      blue: "#3465A4"
      blueB: "#3465A4"
      cyan: "#06989A"
      cyanB: "#06989A"
      defaultBackground: 0
      defaultForeground: 7
      green: "#4E9A06"
      greenB: "#4E9A06"
      magenta: "#75507B"
      magentaB: "#75507B"
      name: "gnome-terminal"
      red: "#CC0000"
      redB: "#CC0000"
      white: "#D3D7CF"
      whiteB: "#D3D7CF"
      yellow: "#C4A000"
      yellowB: "#C4A000"
    globalColorMapName: "css"
  ansibleTowerGlobalConfig:
    towerInstallation:
    - enableDebugging: false
      towerCredentialsId: "aac-jenkins-token-sandbox"
      towerDisplayName: "Sandbox"
      towerTrustCert: false
      towerURL: "https://ansible-sandbox.alsac.stjude.org/"
    - enableDebugging: false
      towerCredentialsId: "aac-jenkins-token-dev"
      towerDisplayName: "Dev"
      towerTrustCert: false
      towerURL: "https://ansible-dev.alsac.stjude.org/"
    - enableDebugging: false
      towerCredentialsId: "aac-jenkins-token-qa"
      towerDisplayName: "QA"
      towerTrustCert: false
      towerURL: "https://ansible-qa.lb.alsac.stjude.org/"
    - enableDebugging: false
      towerCredentialsId: "aac-jenkins-token-prod"
      towerDisplayName: "Prod"
      towerTrustCert: false
      towerURL: "https://ansible.lb.alsac.stjude.org"
  buildDiscarders:
    configuredBuildDiscarders:
    - "jobBuildDiscarder"
  buildStepOperation:
    enabled: false
  defaultFolderConfiguration:
    healthMetrics:
    - worstChildHealthMetric:
        recursive: true
  email-ext:
    adminRequiredForTemplateTesting: false
    allowUnregisteredEnabled: true
    charset: "UTF-8"
    debugMode: false
    defaultBody: |-
      $PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:

      Check console output at $BUILD_URL to view the results.
    defaultContentType: "text/plain"
    defaultSubject: "$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!"
    defaultSuffix: "{{ docker_stack__email_default_suffix }}"
    defaultTriggerIds:
    - "hudson.plugins.emailext.plugins.trigger.FailureTrigger"
    mailAccount:
      smtpHost: "{{ docker_stack__smtp }}"
    maxAttachmentSize: -1
    maxAttachmentSizeMb: -1
    precedenceBulk: false
    watchingEnabled: false
  enrichedSummaryConfig:
    enrichedSummaryEnabled: false
    httpClientDelayBetweenRetriesInSeconds: 1
    httpClientMaxRetries: 3
    httpClientTimeoutInSeconds: 1
  fingerprints:
    fingerprintCleanupDisabled: false
    storage: "file"
  gitHubConfiguration:
    apiRateLimitChecker: ThrottleForNormalize
  gitHubPluginConfig:
    hookUrl: "https://{{ __docker_stack__jenkins_endpoint }}/github-webhook/"
  globalLibraries:
    libraries:
    - cachingConfiguration:
        refreshTimeMinutes: 30
      defaultVersion: "main"
      includeInChangesets: false
      name: "pipeline-automation-lib"
      retriever:
        modernSCM:
          scm:
            git:
              credentialsId: "bitbucket-ssh-jenkins"
#              id: "0f7f6074-dd56-42c9-8db4-9d6ec8a0b566"
              remote: "{{ __docker_stack__jenkins_jcac__pipeline_lib_repo }}"
              traits:
              - "gitBranchDiscovery"
              - cleanBeforeCheckout:
                  extension:
                    deleteUntrackedNestedRepositories: true
  globalTimeOutConfiguration:
    operations:
    - "abortOperation"
    overwriteable: false
  injectionConfig:
    allowUntrusted: false
    enabled: false
    enforceUrl: false
    injectCcudExtension: false
    injectMavenExtension: false
#  jiraCloudPluginConfig:
#    autoBuildsEnabled: false
#    autoDeploymentsEnabled: false
#    autoDeploymentsRegex: "^deploy to (?<envName>.*)$"
#    debugLogging: false
  junitTestResultStorage:
    storage: "file"
  location:
    adminAddress: "{{ docker_stack__email_admin_address }}"
    url: "${JENKINS_HOST}"
  mailer:
    charset: "UTF-8"
    defaultSuffix: "{{ docker_stack__email_default_suffix }}"
    smtpHost: "{{ docker_stack__smtp }}"
    useSsl: false
    useTls: false
  notifyBitbucket:
      considerUnstableAsSuccess: false
      credentialsId: "ansible-bitbucket-api-cred"
      disableInprogressNotification: false
      ignoreUnverifiedSsl: true
      includeBuildNumberInKey: false
      prependParentProjectKey: false
      stashRootUrl: "https://bitbucket.alsac.stjude.org:8443"
#  pluginImpl:
#    enableCredentialsFromNode: false
  pollSCM:
    pollingThreadCount: 10
#  prismConfiguration:
#    theme: PRISM
  prometheusConfiguration:
    appendParamLabel: false
    appendStatusLabel: false
    collectDiskUsage: true
    collectingMetricsPeriodInSeconds: 180
    countAbortedBuilds: true
    countFailedBuilds: true
    countNotBuiltBuilds: true
    countSuccessfulBuilds: true
    countUnstableBuilds: true
    defaultNamespace: "default"
    fetchTestResults: true
    jobAttributeName: "jenkins_job"
    path: "prometheus"
    perBuildMetrics: false
    processingDisabledBuilds: false
    useAuthenticatedEndpoint: false
  scmGit:
    addGitTagAction: false
    allowSecondFetch: false
    createAccountBasedOnEmail: false
    disableGitToolChooser: false
    globalConfigEmail: "{{ docker_stack__email_admin_address }}"
    globalConfigName: "jenkins"
    hideCredentials: false
    showEntireCommitSummaryInChanges: false
    useExistingAccountWithSameEmail: false
  slackNotifier:
    botUser: false
    sendAsText: false
#  themeManager:
#    disableUserThemes: true
#    theme: "noOp"
  timestamper:
    allPipelines: false
    elapsedTimeFormat: "'<b>'HH:mm:ss.S'</b> '"
    systemTimeFormat: "'<b>'HH:mm:ss'</b> '"
  warningsParsers:
    consoleLogScanningPermitted: false
  whitelist:
    enabled: false
tool:
  ansible:
    installations:
    - home: "/usr/local/bin"
      name: "ansible-local-bin"
    - name: "ansible-venv"
      properties:
      - installSource:
          installers:
          - command:
              command: |+
                {{ __docker_stack__jenkins_jcac__ansible_tool_python_interpreter }} -m venv .venv/ansible && \
                .venv/ansible/bin/pip3 -q install --upgrade pip && \
                .venv/ansible/bin/pip3 -q install ansible && \
                .venv/ansible/bin/pip3 -q install {{ __docker_stack__jenkins_ansible_venv_libs | join(' ') }}
              label: "ansible"
              toolHome: ".venv/ansible/bin"
  customTool:
    installations:
    - exportedPaths: "/usr/local/bin"
      home: "/usr/local/bin"
      name: "packer-local"
#      labelSpecifics:
#      - label: "packer"
    - exportedPaths: "/usr/local/bin"
      home: "/usr/local/bin"
      name: "govc-local"
  git:
    installations:
    - home: "git"
      name: "Default"
  mavenGlobalConfig:
    globalSettingsProvider: "standard"
    settingsProvider: "standard"
#  packer:
#    installations:
#    - home: "/usr/local/bin"
#      name: "packer-1.6.2"
#    # packer_template_file: provision/base.json
  pipelineMaven:
    globalTraceability: false
    triggerDownstreamUponResultAborted: false
    triggerDownstreamUponResultFailure: false
    triggerDownstreamUponResultNotBuilt: false
    triggerDownstreamUponResultSuccess: true
    triggerDownstreamUponResultUnstable: false
  terraform:
    installations:
    - home: "/usr/bin"
      name: "terraform"
## ref: https://github.com/jenkinsci/matrix-auth-plugin/blob/master/src/test/resources/org/jenkinsci/plugins/matrixauth/integrations/casc/configuration-as-code.yml
## ref: https://stackoverflow.com/questions/54434162/how-to-create-a-jenkins-pipelinejob-via-configuration-as-code
## ref: https://github.com/jenkinsci/job-dsl-plugin/wiki/JCasC
jobs:
  - file: /var/jenkins_home/casc_configs/seedjob.groovy

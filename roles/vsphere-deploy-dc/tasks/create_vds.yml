---

- name: "create_vds | Create Distributed Switch"
  vmware_dvswitch:
    hostname: "{{ nested_vcenter.hostname }}"
    username: "{{ nested_vcenter.username }}"
    password: "{{ nested_vcenter.password }}"
    datacenter: "{{ nested_vcenter.datacenter }}"
    validate_certs: false
    switch: "{{ item.name }}"
    version: "{{ item.switch_version }}"
    mtu: "{{ item.mtu }}"
    uplink_quantity: "{{ item.uplink_quantity }}"
    discovery_proto: "{{ item.discovery_proto | d(omit) }}"
    discovery_operation: "{{ item.discovery_operation | d(omit) }}"
    state: present
  loop: "{{ distributed_switches }}"
  register: vds

- name: "create_vds | Create Management Portgroup to all physical esx hosts"
  vmware_dvs_portgroup:
    hostname: "{{ nested_vcenter.hostname }}"
    username: "{{ nested_vcenter.username }}"
    password: "{{ nested_vcenter.password }}"
    validate_certs: false
    portgroup_name: "{{ item.name }}"
    switch_name: "{{ item.switch_name }}"
    vlan_id: "{{ item.vlan_id }}"
    num_ports: "{{ item.num_ports | d('8') }}"
    portgroup_type: earlyBinding
    state: present
  with_items: "{{ distributed_port_groups }}"

- name: "create_vds | Add Management Network VM Portgroups to clusters"
  vmware_portgroup:
    hostname: "{{ nested_vcenter.hostname }}"
    username: "{{ nested_vcenter.username }}"
    password: "{{ nested_vcenter.password }}"
    validate_certs: False
    cluster_name: "{{ item.0.key }}"
    switch_name: "{{ item.0.value.switch_name }}"
#    portgroup_name: "{{ item.value.vswitch0_port_group_name }}"
#    portgroup_name: "{{ item.value.portgroup }}"
    portgroup_name: "{{ item.1 }}"
    vlan_id: "{{ item.0.value.mgmt_vlan }}"
#  with_dict: "{{ nested_clusters }}"
  with_subelements:
    - "{{ nested_clusters | dict2items }}"
    - value.vmnic_physical_portgroup_assignment


#- name: "configure_nested_vcenter | Migrate uplinks to the VDS"
- name: "configure_nested_vcenter | Add hosts to the VDS"
  vmware_dvs_host:
    hostname: "{{ nested_vcenter.hostname }}"
    username: "{{ nested_vcenter.username }}"
    password: "{{ nested_vcenter.password }}"
    validate_certs: False
    esxi_hostname: "{{ esx_hosts_by_name[item.1].hostname }}"
    switch_name: "{{ item.0.name }}"
#    vmnics: "{{ item.0.vmnics }}"
    vmnics: "{{ esx_hosts_by_name[item.1].dvs_uplink_vmnics | d(item.0.vmnics) }}"
    state: present
  with_subelements:
    - "{{ distributed_switches }}"
    - hosts

#####

#- name: "create_vds | Create vMotion vmk1"
#  vmware_vmkernel:
#    hostname: "{{ nested_vcenter.hostname }}"
#    esxi_hostname: "{{ item.hostname | d(item.ip) | d(item.name + '.' + vcenter_domain) }}"
#    username: "{{ nested_vcenter.username }}"
#    password: "{{ nested_vcenter.password}}"
#    state: present
#    portgroup_name: vMotion
#    dvswitch_name: "ComputeEdgeVDS"
#    validate_certs: False
#    enable_vmotion: true
#    network:
#      type: 'static'
#      ip_address: "{{ item.vmotion_ip }}"
#      subnet_mask: "{{ vmotion_mask }}"
#  loop: "{{ nested_hosts_list }}"
#
#- name: "create_vds | Create vSAN vmk2"
#  vmware_vmkernel:
#    hostname: "{{ nested_vcenter.hostname }}"
#    esxi_hostname: "{{ item.hostname | d(item.ip) | d(item.name + '.' + vcenter_domain) }}"
#    username: "{{ nested_vcenter.username }}"
#    password: "{{ nested_vcenter.password}}"
#    state: present
#    enable_vsan: true
#    portgroup_name: vSAN
#    dvswitch_name: "ComputeEdgeVDS"
#    validate_certs: False
#    network:
#      type: 'static'
#      ip_address: "{{ item.vsan_ip }}"
#      subnet_mask: "{{ vsan_mask }}"
#  loop: "{{ nested_hosts_list }}"

- name: "create_vds | Enable vSAN"
  enable_vsan:
    vcenter: "{{ nested_vcenter.hostname }}"
    user: "{{ nested_vcenter.username }}"
    passwd: "{{ nested_vcenter.password }}"
    cluster: "{{ item.key }}"
  when: item.value.vsan == True
  with_dict: "{{ vcenter_clusters }}"

- name: "create_vds | Claim disks for vSAN"
  claim_vsan_disks:
    vcenter: "{{ nested_vcenter.hostname }}"
    user: "{{ nested_vcenter.username }}"
    passwd: "{{ nested_vcenter.password }}"
    cluster: "{{ item.key }}"
  when: item.value.vsan == True
  with_dict: "{{ vcenter_clusters }}"

- name: "create_vds | Clear vSAN errors for unsupported hardware"
  clear_vsan_errors:
    vcenter: "{{ nested_vcenter.hostname }}"
    user: "{{ nested_vcenter.username }}"
    passwd: "{{ nested_vcenter.password }}"

#- name: "create_vds | Enable HA on the clusters"
#  enable_ha:
#    vcenter: "{{ nested_vcenter.hostname }}"
#    user: "{{ nested_vcenter.username }}"
#    passwd: "{{ nested_vcenter.password }}"
#    cluster: "{{ item.key }}"
#  when: item.value.ha == True
#  with_dict: "{{ vcenter_clusters }}"

- name: "create_vds | Enable HA on the clusters"
  vmware_cluster_ha:
    vcenter: "{{ nested_vcenter.hostname }}"
    user: "{{ nested_vcenter.username }}"
    passwd: "{{ nested_vcenter.password }}"
    cluster_name: "{{ item.key }}"
    validate_certs: no
    enable_ha: "{{ item.value.ha }}"
  when: item.value.ha == True
  with_dict: "{{ vcenter_clusters }}"

- name: "create_vds | Wait 3 minutes before clearing the errors"
  pause: minutes=3

- name: "create_vds | Clear errors"
  clear_vsan_errors:
    vcenter: "{{ nested_vcenter.hostname }}"
    user: "{{ nested_vcenter.username }}"
    passwd: "{{ nested_vcenter.password }}"


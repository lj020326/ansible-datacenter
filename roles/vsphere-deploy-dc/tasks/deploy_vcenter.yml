---

- name: "deploy_vcenter | Check if vCenter already exists so install steps can be skipped"
  uri:
#    url: "https://{{ vsphere_deploy_dc__vcenter.fqdn }}/ui/"
    url: "https://{{ vsphere_deploy_dc__vcenter.fqdn }}:5480/"
    method: GET
    status_code: 200
    timeout: 2
    validate_certs: False
  ignore_errors: True
  register: vcenter_response

- ansible.builtin.set_fact:
    vcenter_exists={{vcenter_response.status == 200}}

- name: "deploy_vcenter | Perform VCenter deployment"
  when: not vcenter_exists
  block:

    # We use a single directory to mount the vCSA ISO and we first need to determine whether the
    #  directory already exists
    - name: "deploy_vcenter | Retrieve info about the mount directory"
      stat:
        path: "{{ vsphere_deploy_dc_vcenter_mount_dir }}"
      register: mount_dir_stat_first

    # If the mount directory doesn't already exist it is created
    - name: "deploy_vcenter | Create the mount directory {{ vsphere_deploy_dc_vcenter_mount_dir }}"
      file:
        path: "{{ vsphere_deploy_dc_vcenter_mount_dir }}"
        state: directory
        mode: "0755"
      when: mount_dir_stat_first.stat.exists == False

    # We run stat again to get info about the mount directory post-creation. This info will be used
    #  within when statements to make sure that the directory exists and isn't already being used.
    #  It's a crude check and I would like to devise a better method.
    - name: "deploy_vcenter | Retrieve info about the mount directory"
      stat:
        path: "{{ vsphere_deploy_dc_vcenter_mount_dir }}"
      register: mount_dir_stat_created

    - name: "deploy_vcenter | Mount the VCSA installer ISO"
      mount:
        path: "{{ vsphere_deploy_dc_vcenter_mount_dir }}"
        src: "{{ vsphere_deploy_dc_vcenter_repo_dir }}/{{ vsphere_deploy_dc_vcsa_iso }}"
        fstype: iso9660
        opts: ro,noauto
        state: mounted
      when: mount_dir_stat_created.stat.wusr == True
      notify: "Unmount the VCSA installer ISO"

    - name: "deploy_vcenter | Set deploy_minor_version"
      ansible.builtin.set_fact:
    #    deploy_version: "{{ vsphere_deploy_dc_vcsa_iso | regex_replace('^.+(MASK-.+?)\\.+','\\\1') }}"
        deploy_minor_version: "{{ vsphere_deploy_dc_vcsa_iso | regex_search('VMware-VCSA-all-(.+)-.*.iso', '\\1') | first }}"
        install_no_ssl_arg: "--no-ssl-certificate-verification"

    - debug:
        var: deploy_minor_version

    - name: "deploy_vcenter | Set deploy_version"
      ansible.builtin.set_fact:
        deploy_version: "{{ deploy_minor_version.split('.')[0:2] | join('.') }}"

    - debug:
        var: deploy_version

    ## ref: https://www.mattallford.com/2017/vsphere-6-5-cli-vcsa-external-deployment-walkthrough/
    - name: "deploy_vcenter | Set v6.5 install_no_ssl_arg"
      when: deploy_version=="6.5"
      ansible.builtin.set_fact:
        install_no_ssl_arg: "--no-esx-ssl-verify"

#    - name: "deploy_vcenter | Set appliance dependent variables"
#      ansible.builtin.include_vars: '{{ vsphere_deploy_dc_vcenter_appliance_type }}.yml'

    - name: "deploy_vcenter | Create JSON template file for VCSA {{ deploy_version }} with embeded PSC"
      ansible.builtin.template:
        src: "embedded_vCSA_on_ESXi_{{ deploy_version }}.json.j2"
        dest: "{{ vsphere_deploy_dc_vcenter_install_tmp_dir }}/vCSA_on_ESXi.json"
        backup: yes

    - debug:
        msg: "Next step will take about 20 minutes if VC has not been previously deployed, so go grab some coffee !!!"

    - name: "deploy_vcenter | Perform VC CLI Install"
      command: "./lin64/vcsa-deploy install --accept-eula {{ install_no_ssl_arg }} {{vsphere_deploy_dc_vcenter_install_tmp_dir}}/vCSA_on_ESXi.json"
      args:
        chdir: "{{ vsphere_deploy_dc_vcenter_mount_dir }}/vcsa-cli-installer"
      register: __vcdeploy_result
      failed_when: __vcdeploy_result.rc > 0 and not ( __vcdeploy_result.stderr | regex_search("A virtual machine with the name .* already") )
      ignore_errors: yes

    - name: Display __vcdeploy_result
      debug:
        var: __vcdeploy_result

    - name: "deploy_vcenter | Delete the temporary JSON template file"
      file:
        path: "{{ vsphere_deploy_dc_vcenter_install_tmp_dir }}/vCSA_on_ESXi.json"
        state: absent

- name: "Configure vcenter hostname if network_type == dhcp"
  when:
    - vsphere_deploy_dc__vcenter.network_type == 'dhcp'
    - vsphere_deploy_dc__vcenter.ip is not defined
  block:
    - name: "Gather info for new vcenter vm with name {{ vsphere_deploy_dc__vcenter.name }}"
      community.vmware.vmware_vm_info:
        hostname: "{{ vsphere_deploy_dc_vcenter_target_esx_host.hostname }}"
        username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc_vcenter_target_esx_host.hostname].username | d(esxi_username) }}"
        password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc_vcenter_target_esx_host.hostname].password | d(esxi_password) }}"
        validate_certs: no
        vm_name: "{{ vsphere_deploy_dc__vcenter.name }}"
      register: vm_info

    - debug:
        var: vm_info

    - name: Set __vcenter_ip
      ansible.builtin.set_fact:
        __vcenter_ip: "{{ vm_info.virtual_machines[0].ip_address }}"
        __vcenter_mac: "{{ vm_info.virtual_machines[0].vm_network.keys() | first }}"

    - name: Display __vcenter_ip
      debug:
        var: __vcenter_ip

    - name: Display __vcenter_mac
      debug:
        var: __vcenter_mac

#    ## TODO: Add logic here to reserve a DHCP mapping (__vcenter_mac => __vcenter_ip)
#    ## with vcenter authoritative DNS - using KEA DHCP / Power DNS
#    - name: Register/Reserve DHCP mac mapping
#      when: vsphere_deploy_dc__vcenter.network_type == 'dhcp'
#      block:
#      - name: Setup KEA DHCP reservation
#        kea_dhcp:
#          mac: __vcenter_mac
#          ip: __vcenter_ip

    ## ref: https://docs.ansible.com/ansible/latest/collections/community/vmware/vmware_vcenter_settings_module.html
    - name: Configure vCenter general settings
      community.vmware.vmware_vcenter_settings:
        hostname: "{{ __vcenter_ip }}"
        username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
        password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
        validate_certs: no
        runtime_settings:
          unique_id: 1
#          managed_address: "{{ __vcenter_ip }}"
          managed_address: "{{ lookup('dig', vsphere_deploy_dc__vcenter.hostname) }}"
          vcenter_server_name: "{{ vsphere_deploy_dc__vcenter.hostname }}"
        mail:
          server: "{{ vsphere_deploy_dc__vcenter.mail_server }}"
          sender: "{{ vsphere_deploy_dc__vcenter.mail_sender }}"
        snmp_receivers:
          snmp_receiver_1_url: localhost
          snmp_receiver_1_enabled: true
          snmp_receiver_1_port: 162
          snmp_receiver_1_community: public
        timeout_settings:
          normal_operations: 30
          long_operations: 120
        logging_options: info
      delegate_to: localhost


---

- name: "deploy_nested_vc_and_hosts | Ensure xorriso is installed"
  ansible.builtin.package:
    name: xorriso
    state: present

- ansible.builtin.debug:
#    var: vsphere_deploy_dc_vcenter_clusters
    var: vsphere_deploy_dc_nested_clusters

## ref: https://github.com/yasensim/vsphere-lab-deploy/blob/master/playbooks/deployNestedESXi.yml
- name: "deploy_nested_vc_and_hosts | Deploy Nested ESXi VMs"
  nestedESXi:
    vcenter: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    vcenter_user: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    vcenter_passwd: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    vmname: "{{ item.name }}"
    cluster: "{{ vsphere_deploy_dc_nested_clusters[item.cluster].hosting_cluster }}"
    vmnic_physical_portgroup_assignment: "{{ vsphere_deploy_dc_nested_clusters[item.cluster].vmnic_physical_portgroup_assignment }}"
    datastore: "{{ vsphere_deploy_dc__vcenter.datastore | d(vsphere_deploy_dc_nested_clusters[item.cluster].hosting_datastore) }}"
    cpucount: "{{ item.cpu | d(vsphere_deploy_dc_nested_clusters[item.cluster].cpu_cores) }}"
    memory: "{{ item.ram_in_gb | d(vsphere_deploy_dc_nested_clusters[item.cluster].ram_in_gb) }}"
    disks: "{{ item.disks | d(vsphere_deploy_dc_nested_clusters[item.cluster].nested_hosts_disks) }}"
    isopath: "{{ vsphere_deploy_dc_vcenter_iso_dir }}/{{ vsphere_deploy_dc_esx_custom_iso }}"
    esxi_version: "{{ vsphere_deploy_dc_vsphere_version }}"
  loop: "{{ __nested_hosts_list }}"
  async: 7200
  poll: 0
  register: hosts

- name: "deploy_nested_vc_and_hosts | Set powerstate of a virtual machine to poweredon"
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    validate_certs: no
    name: "{{ item.name }}"
    state: poweredon
    wait_for_ip_address: yes
  register: deploy
  async: 1000
  poll: 0
  loop: "{{ __nested_hosts_list }}"

#- name: "deploy_nested_vc_and_hosts | Wait for the VM poweron to finish"
#  async_status:
#    jid: "{{ deploy.ansible_job_id }}"
#  register: deploy_result
#  until: deploy_result.finished
#  retries: 60

- name: "deploy_nested_vc_and_hosts | Wait for the VM poweron to finish"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: deploy_result
  until: deploy_result.finished
  retries: 60
  with_items: "{{ deploy.results }}"

- name: "deploy_nested_vc_and_hosts | Check if vCenter already exists so install steps can be skipped"
  uri:
#    url: "https://{{ vsphere_deploy_dc_nested_vcenter.ip }}/ui/"
    url: "https://{{ vsphere_deploy_dc_nested_vcenter.fqdn }}:5480/"
    method: GET
    status_code: 200
    timeout: 2
    validate_certs: False
  ignore_errors: True
  register: vcenter_response

- ansible.builtin.set_fact:
    vcenter_exists={{vcenter_response.status == 200}}

- name: "deploy_nested_vc_and_hosts | Install nested vcenter"
  when: not vcenter_exists
  block:

    - name: "deploy_nested_vc_and_hosts | Set deploy_minor_version"
      ansible.builtin.set_fact:
    #    deploy_version: "{{ vsphere_deploy_dc_vcsa_iso | regex_replace('^.+(MASK-.+?)\\.+','\\\1') }}"
        deploy_minor_version: "{{ vsphere_deploy_dc_vcsa_iso | regex_search('VMware-VCSA-all-(.+)-.*.iso', '\\1') | first }}"

    - name: "deploy_nested_vc_and_hosts | Set deploy_version"
      ansible.builtin.set_fact:
        deploy_version: "{{ deploy_minor_version.split('.')[0::1] | join('.') }}"

    - ansible.builtin.debug:
        var: deploy_version

#    - name: Set appliance dependent variables
#      ansible.builtin.include_vars: '{{ vsphere_deploy_dc_vcenter_appliance_type }}.yml'

    - name: "deploy_nested_vc_and_hosts | Fix permissions before delete on {{vsphere_deploy_dc_vcenter_install_tmp_dir}}/VCSA"
      file:
        path: "{{vsphere_deploy_dc_vcenter_install_tmp_dir}}/ESX"
        mode: "+w"
        recurse: yes

    - name: "deploy_nested_vc_and_hosts | Clean VCSA ISO Directory"
      file:
        path: '{{vsphere_deploy_dc_vcenter_install_tmp_dir}}/VCSA'
        state: absent

    - name: "deploy_nested_vc_and_hosts | Extract VCSA ISO image"
      command: xorriso -ecma119_map lowercase -osirrox on -indev {{vc_iso}} -extract / {{vsphere_deploy_dc_vcenter_install_tmp_dir}}/VCSA
      when: not vcenter_exists

    - name: "deploy_nested_vc_and_hosts | Fix VCSA directory permissions"
      command: "{{item}}"
      with_items:
        - chmod -R 777 {{vsphere_deploy_dc_vcenter_install_tmp_dir}}/VCSA
      when: not vcenter_exists

    - name: "deploy_nested_vc_and_hosts | Create JSON template file for VCSA {{ deploy_version }} with embeded PSC"
      ansible.builtin.template:
        src: "embedded_vCSA_on_VC_{{ deploy_version }}.json.j2"
        dest: "{{vsphere_deploy_dc_vcenter_install_tmp_dir}}/vCSA_on_ESXi.json"

    - name: "deploy_nested_vc_and_hosts | Perform VC CLI Install"
      command: "./vcsa-deploy install --accept-eula --no-esx-ssl-verify {{vsphere_deploy_dc_vcenter_install_tmp_dir}}/vCSA_on_ESXi.json"
      args:
        chdir: '{{vsphere_deploy_dc_vcenter_install_tmp_dir}}/VCSA/vcsa-cli-installer/lin64/'
      when: not vcenter_exists
      async: 3600
      poll: 0
      register: vcenter_result

- name: "deploy_nested_vc_and_hosts | Result check for deployment of host"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  with_items: "{{ hosts.results }}"
  retries: 100
  delay: 15

- name: "deploy_nested_vc_and_hosts | Remove Nested vcenter CDROM"
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    validate_certs: no
    name: "{{ item.name }}"
    cdrom:
      - type: client
        controller_number: 0
        unit_number: 0
        state: present
  loop: "{{ __nested_hosts_list }}"

- name: "deploy_nested_vc_and_hosts | Change nested ESXi hostnames"
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ item.name }}"
#    vm_username: "{{ item.username | d(esxi_username) }}"
#    vm_password: "{{ item.password | d(esxi_password) }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/esxcli
    vm_shell_args: "system hostname set --fqdn={{ item.fqdn | d(item.name + '.' + vsphere_deploy_dc_vcenter_domain) }} }}"
    vm_shell_env:
    - "PATH=/bin"
    - "VAR=test"
    vm_shell_cwd: "/tmp"
  loop: "{{ __nested_hosts_list }}"
  async: 7200
  poll: 0
  register: hname

- name: "deploy_nested_vc_and_hosts | Result check for configuring hostname"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  with_items: "{{ hname.results }}"
  retries: 10

- name: "deploy_nested_vc_and_hosts | Set VLAN to Management portgroup"
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    password: "{{ vsphere_deploy_dc_vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ item.name }}"
#    vm_username: "{{ item.username | d(esxi_username) }}"
#    vm_password: "{{ item.password | d(esxi_password) }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/esxcli
#    vm_shell_args: "network vswitch standard portgroup set --portgroup-name='Management Network' --vlan-id={{ vsphere_deploy_dc_nested_clusters[item.cluster].mgmt_vlan }}"
    vm_shell_args: "network vswitch standard portgroup set --portgroup-name={{ vsphere_deploy_dc_nested_clusters[item.cluster].mgmt_portgroup }} --vlan-id={{ vsphere_deploy_dc_nested_clusters[item.cluster].mgmt_vlan }}"
    vm_shell_env:
    - "PATH=/bin"
    - "VAR=test"
    vm_shell_cwd: "/tmp"
  loop: "{{ __nested_hosts_list }}"
  async: 7200
  poll: 0
  register: hvlan

- name: "deploy_nested_vc_and_hosts | Result check for setting VLAN"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  with_items: "{{ hvlan.results }}"
  retries: 10

- name: "deploy_nested_vc_and_hosts | Set vmk0 ip addresses"
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username | d(esxi_username) }}"
    password: "{{ vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password | d(esxi_password) }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ item.name }}"
#    vm_username: "{{ item.username | d(esxi_username) }}"
#    vm_password: "{{ item.password | d(esxi_password) }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/esxcli
    vm_shell_args: "network ip interface ipv4 set --interface-name=vmk0 --ipv4={{ item.ip }} --netmask={{ item.mask }} --type=static"
    vm_shell_env:
    - "PATH=/bin"
    - "VAR=test"
    vm_shell_cwd: "/tmp"
  loop: "{{ __nested_hosts_list }}"
  async: 7200
  poll: 0
  register: hip

- name: "deploy_nested_vc_and_hosts | Result check for setting vmk0 ip addresses"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  with_items: "{{ hip.results }}"
  retries: 10

- name: "deploy_nested_vc_and_hosts | Set default gw"
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username }}"
    password: "{{ vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ item.name }}"
#    vm_username: "{{ item.username | d(esxi_username) }}"
#    vm_password: "{{ item.password | d(esxi_password) }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/esxcfg-route
    vm_shell_args: " -a default {{ item.gw }}"
    vm_shell_env:
    - "PATH=/bin"
    - "VAR=test"
    vm_shell_cwd: "/tmp"
  loop: "{{ __nested_hosts_list }}"
  async: 7200
  poll: 0
  register: hgw

- name: "deploy_nested_vc_and_hosts | Result check for setting default gw"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  with_items: "{{ hgw.results }}"
  retries: 10

- name: "deploy_nested_vc_and_hosts | Set search domain"
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username }}"
    password: "{{ vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ item.name }}"
#    vm_username: "{{ item.username | d(esxi_username) }}"
#    vm_password: "{{ item.password | d(esxi_password) }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/esxcli
    vm_shell_args: "network ip dns search add --domain={{ item.domain | d(vsphere_deploy_dc_vcenter_domain) }}"
    vm_shell_env:
    - "PATH=/bin"
    - "VAR=test"
    vm_shell_cwd: "/tmp"
  loop: "{{ __nested_hosts_list }}"
  async: 7200
  poll: 0
  register: hsd

- name: "deploy_nested_vc_and_hosts | Result check for setting a search domain"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  with_items: "{{ hsd.results }}"
  retries: 10

- name: "deploy_nested_vc_and_hosts | Set a DNS Server"
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username }}"
    password: "{{ vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ item.0.name }}"
#    vm_username: "{{ item.username | d(esxi_username) }}"
#    vm_password: "{{ item.password | d(esxi_password) }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/esxcli
    vm_shell_args: "network ip dns server add --server={{ item.1 }}"
    vm_shell_env:
    - "PATH=/bin"
    - "VAR=test"
    vm_shell_cwd: "/tmp"
  loop: "{{ __nested_hosts_list | subelements('dns_servers', { 'skip_missing': true }) }}"
  async: 7200
  poll: 0
  register: hdns

- name: "deploy_nested_vc_and_hosts | Disable SSH Warnings"
  community.vmware.vmware_vm_shell:
    hostname: "{{ vsphere_deploy_dc__vcenter.hostname }}"
    username: "{{ vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].username }}"
    password: "{{ vsphere_credentials[vsphere_deploy_dc__vcenter.hostname].password }}"
    datacenter: "{{ vsphere_deploy_dc__vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ item.name }}"
#    vm_username: "{{ item.username | d(esxi_username) }}"
#    vm_password: "{{ item.password | d(esxi_password) }}"
    vm_username: "{{ nested_host_credentials.user }}"
    vm_password: "{{ nested_host_credentials.password }}"
    vm_shell: /bin/vim-cmd
    vm_shell_args: "hostsvc/advopt/update UserVars.SuppressShellWarning long 1"
    vm_shell_env:
    - "PATH=/bin"
    - "VAR=test"
    vm_shell_cwd: "/tmp"
  loop: "{{ __nested_hosts_list }}"
  async: 7200
  poll: 0
  register: hwrn

- name: "deploy_nested_vc_and_hosts | Result check for setting a DNS Server"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  with_items: "{{ hdns.results }}"
  retries: 10

- name: "deploy_nested_vc_and_hosts | Check on nested vcenter install"
  when: not vcenter_exists
  block:

    - debug: msg="The vCenter deployment can take a long time.\nYou can check progress at https://{{vsphere_deploy_dc_nested_vcenter.ip}}:5480 after about 20 minutes.\nFor detailed output browse to the most recent folder starting with vcsaCliInstaller under {{vsphere_deploy_dc_vcenter_install_tmp_dir}} and follow vcsa-cli-installer.log "

    - name: "deploy_nested_vc_and_hosts | Result check for deployment of vCenter task"
      async_status:
        jid: "{{ vcenter_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 240
      delay: 15

    - name: "deploy_nested_vc_and_hosts | Check the vSphere API is online"
    #  command: "curl -k --silent -v https://{{ vsphere_deploy_dc_nested_vcenter.ip }}/ui/"
      command: "curl -k --silent -v https://{{ vsphere_deploy__nested_vcenter.fqdn }}:5480/"
      register: result
      until: result.stdout.find("<title>vSphere Client</title>") != -1
      retries: 120
      delay: 5
      changed_when: false

    - name: "deploy_nested_vc_and_hosts | Wait 30 seconds for the vCenter to settle"
      pause: seconds=30

    - name: "deploy_nested_vc_and_hosts | Delete the temporary JSON template file"
      file:
        path: "{{vsphere_deploy_dc_vcenter_install_tmp_dir}}/vCSA_on_ESXi.json"
        state: absent

    - name: "deploy_nested_vc_and_hosts | Clean VCSA ISO Directory"
      file:
        path: "{{vsphere_deploy_dc_vcenter_install_tmp_dir}}/VCSA/"
        state: absent


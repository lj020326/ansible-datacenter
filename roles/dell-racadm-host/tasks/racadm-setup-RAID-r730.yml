---
##################################################################################
#
# Dell PowerEdge R730 servers: 
#    > Configure the RAID-1 using first two disks
#    > Convert all other 10 SSDs to Non-RAID disks
#  
# 1. Reset the Existing RAID on the server
# 2. Create a job, Restart the server and then wait for job to be completed
# 3. Setup RAID-1 with : Write Through, No Read Ahead, Default Disk cache policy
#                        and Stripe size 64k   
# 4. Convert the other SSDs to NON-Raid disks
# 5. Create a job,  and then wait for job to be completed 
#
##################################################################################

    - name: Reset RAID Controller
      raw: racadm raid resetconfig:RAID.Integrated.1-1
      register: raidreset_status
      #failed_when: '"ERROR" in raidreset_status.stdout'
    - name: debug | Reset RAID Controller
      debug: var=raidreset_status.stdout_lines

    - name: Create a Job RAID Controller Reset
      raw: racadm jobqueue create RAID.Integrated.1-1
      register: raidreset_job
      failed_when: '"ERROR" in raidreset_status.stdout'
      #failed_when: "'STOR023' in 'raidreset_job'"
    - name: debug | Create a Job RAID Controller Reset
      debug: var=raidreset_job.stdout_lines

    - name: Powercycle the server to execute the job created RAID Controller Reset
      raw: racadm serveraction powercycle
      register: raidreset_reboot
      when: raidreset_job != ''
      #failed_when: '"ERROR" in raidreset_job.stdout_lines'
    - name: debug | Powercycle the server to execute the job created RAID Controller Reset
      debug: var=raidreset_reboot.stdout_lines

    - name: Wait for RAID Reset job to be completedi,30 sec intervals
      raw: racadm jobqueue view
      register: raidreset_jobstatus
      until: raidreset_jobstatus.stdout.find("Running") <= 0 and raidreset_jobstatus.stdout.find("Scheduled") <= 0 and raidreset_jobstatus.stdout.find("New") <= 0
      retries: 20
      delay: 30
      when: '"Server power operation successful" in raidreset_reboot.stdout'
    - name: debug | Wait for RAID Reset job to be completed
      debug: var=raidreset_jobstatus.stdout_lines

    - name: Checking whether RAID reset deleted all the Virtual Disks
      raw: racadm raid get vdisks
      register: vdisks_status
      failed_when: '"Disk.Virtual" in vdisks_status.stdout'
    - name: debug | Checking whether RAID reset deleted all the Virtual Disks
      debug: var=vdisks_status.stdout_lines  

    - name: Setup Hardware RAID-1 across first two disks
      raw: racadm raid createvd:RAID.Integrated.1-1 -rl r1 -wp wt -rp nra -dcp default -ss 64k -pdkey:Disk.Bay.0:Enclosure.Internal.0-1:RAID.Integrated.1-1,Disk.Bay.1:Enclosure.Internal.0-1:RAID.Integrated.1-1
      register: vdisk_raid1_status
      failed_when: '"ERROR" in vdisk_raid1_status.stdout'
    - name: debug | Setup Hardware RAID-1 across first two disks
      debug: var=vdisk_raid1_status.stdout_lines

    - name: Create a job for RAID-1 configuration (Real Time-NoReboot required)
      raw: racadm jobqueue create RAID.Integrated.1-1 --realtime
      register: vdisk_raid1_job
      failed_when: '"ERROR" in vdisk_raid1_job.stdout'
    - name: debug | Create a job for RAID-1 configuration
      debug: var=vdisk_raid1_job.stdout_lines

    - name: Wait for RAID-1 job to be completed,30 sec intervals
      raw: racadm jobqueue view
      register: vdisk_raid1_jobstatus
      until: vdisk_raid1_jobstatus.stdout.find("Running") <= 0 and vdisk_raid1_jobstatus.stdout.find("Scheduled") <= 0 and vdisk_raid1_jobstatus.stdout.find("New") <= 0
      retries: 20
      delay: 30

    - name: Get Status of the pdisks
      raw: racadm raid get pdisks -o -p state
      register: pdisk_state
      failed_when: '"ERROR" in pdisk_state.stdout'
    - name: debug |  Get Status of the pdisks
      debug: var=pdisk_state.stdout_lines

    - name: Get all the lines which has "State" presented 
      connection: local
      shell: 'echo -e "{{pdisk_state.stdout}}" | sed 1,4d | grep -E "State"'
      register: pdisk_state_State

    - name: Find the number of occurances of "State" (should be 10 eq to number of SSDs)
      connection: local
      shell: 'echo -e "{{pdisk_state.stdout}}" | sed 1,4d | grep -E "State" | wc -l'
      register: pdisk_state_State_count
      failed_when: '"10" not in pdisk_state_State_count.stdout'

    - name: Converting SSDs into NON-RAID disks (Only which are in Non-Raid State)
      #connection: local
      #command: echo non-raid---{{item.1}}
      raw: racadm raid converttononraid:Disk.Bay."{{ item.1 }}":Enclosure.Internal.0-1:RAID.Integrated.1-1
      register: convert_nonraid_status
      failed_when: '"ERROR" in convert_nonraid_status.stdout'
      ###failed_when: '"ERROR" in item.0'###not needed here, becausse we are evaluating this in pdisk_state varaible above
      when: '"Non-Raid" not in item.0'
      with_together:
        - "{{pdisk_state_State.stdout_lines}}"
        - [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    - name: debug | Converting SSDs into NON-RAID disks (Only which are in Non-Raid State)
      debug: msg="{{ convert_nonraid_status.results | map(attribute='stdout') | list }}"

    - name: Create a job for NON-RAID Disks (Real Time-NoReboot required)
      raw: racadm jobqueue create RAID.Integrated.1-1 --realtime
      register: ssd_nonraid_job
      failed_when: '"ERROR" in ssd_nonraid_job.stdout'
      when: convert_nonraid_status|changed
    - name: debug | Create a job for NON-RAID Disks
      debug: var=ssd_nonraid_job.stdout_lines

    - name: Wait for NON-RAID Disks job to be completed,30 sec intervals
      raw: racadm jobqueue view
      register: ssd_nonraid_jobstatus
      until: ssd_nonraid_jobstatus.stdout.find("Running") <= 0 and ssd_nonraid_jobstatus.stdout.find("Scheduled") <= 0 and ssd_nonraid_jobstatus.stdout.find("New") <= 0
      retries: 20
      delay: 30

    # pause for 30 seconds
    - name: sleep for 30 seconds and continue with play
      wait_for: timeout=30
      delegate_to: localhost

    - name: Clear All the Jobs
      raw: racadm jobqueue delete --all

    - name: View the jobqueue -after clearing all the jobs
      raw: racadm jobqueue view
      register: result_jobqueue_end
    - name: debug | View the jobqueue -after clearing all the jobs
      debug: var=result_jobqueue_end.stdout_lines

    - name: Verifiyting whether RAID-1 virtual disk successfully created or not
      raw: racadm raid get vdisks
      register: raid1_status
      failed_when: '"Disk.Virtual.0" not in raid1_status.stdout'
    - name: debug | Verifiyting whether RAID-1 virtual disk successfully created or not
      debug: msg="Virtual Disks present are - {{raid1_status.stdout_lines}}"

    - name: Verification | Get Status of the pdisks
      raw: racadm raid get pdisks -o -p state
      register: verify_pdisk_state
      failed_when: '"ERROR" in verify_pdisk_state.stdout'
    - name: debug | Verification | Get Status of the pdisks
      debug: var=verify_pdisk_state.stdout_lines

    - name: Verification | Number of "Non-Raid" disks should be 10 (eq to SSDs) 
      connection: local
      shell: 'echo -e "{{pdisk_state.stdout}}" | grep -E "State" | grep -E "Non-Raid" | wc -l'
      register: verify_pdisk_state_number
      failed_when: '"10" not in verify_pdisk_state_number.stdout'

    - name: debug | Verification | Number of "Non-Raid" disks should be 10 (eq to SSDs)
      debug: msg="The number of Non-Raid SSD disks are-{{verify_pdisk_state_number.stdout_lines}}"




#    - name: Converting SSDs into NON-RAID disks
#      raw: racadm raid converttononraid:Disk.Bay."{{ item }}":Enclosure.Internal.0-1:RAID.Integrated.1-1
#      register: nonraid_status
#      with_items:
#        - 2
#        - 3
#        - 4  
#        - 5 
#        - 6
#        - 7  
#        - 8
#        - 9
#        - 10
#        - 11  
#      failed_when: '"ERROR" in nonraid_status.stdout'
#    - name: debug | Converting SSDs into NON-RAID disks
#      debug: msg="{{ nonraid_status.results | map(attribute='stdout') | list }}"
#
#    - name: Create a job for RAID-1 configuration 
#      raw: racadm jobqueue create RAID.Integrated.1-1
#      register: vdisk_raid1_job
#      failed_when: '"ERROR" in vdisk_raid1_job.stdout'
#    - name: debug | Create a job for RAID-1 configuration 
#      debug: var=vdisk_raid1_job.stdout
#
#    - name: Powercycle the server to execute RAID-1 configuration
#      raw: racadm serveraction powercycle
#      register: raid1_reboot
#      when: vdisk_raid1_job != ''
#      #failed_when: '"ERROR" in raid1_reboot.stdout'
#    - name: debug | Powercycle the server to execute RAID-1 configuration
#      debug: var=raid1_reboot.stdout
#
#    - name: Wait for RAID-1 job to be completed
#      raw: racadm jobqueue view
#      register: vdisk_raid1_jobstatus
#      until: vdisk_raid1_jobstatus.stdout.find("Running") <= 0 and vdisk_raid1_jobstatus.stdout.find("Scheduled") <= 0 and vdisk_raid1_jobstatus.stdout.find("New") <= 0
#      retries: 30
#      delay: 30
#      when: '"Server power operation successful" in raid1_reboot.stdout'
#    - name: debug | Wait for RAID-1 job to be completed
#      debug: var=vdisk_raid1_jobstatus.stdout
#
#    # pause for 30 seconds
#    - name: sleep for 30 seconds and continue with play
#      wait_for: timeout=30
#      delegate_to: localhost  
#
#    - name: Clear All the Jobs
#      raw: racadm jobqueue delete --all
#      register: result_jobqueue
#    - name: debug | Clear All the Jobs
#      debug: var=result_jobqueue.stdout

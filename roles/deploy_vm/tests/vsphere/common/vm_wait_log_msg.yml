---
# Wait for message appear in VM's log file
# Parameters:
#   vm_wait_log_name: the log file name in VM folder. e.g. vmware.log
#   vm_wait_log_msg: the regular expression of message to wait for appearing
#   vm_wait_log_retries: how many times to re-check log about waiting message
#   vm_wait_log_delay: seconds to delay for a retry
#   vm_wait_log_ignore_errors: true to ignore task failure. Default is false.
#   vm_wait_log_hide_output: true to hide the output, if set to false will print
#   the output of log content. Default is true.
#
- name: Initialize the logs list found and the log message wait result
  ansible.builtin.set_fact:
    vm_wait_log_msg_list: []
    vm_wait_log_msg_success: false

- name: Set fact of VM log file path in datastore
  ansible.builtin.set_fact:
    vm_log_file_path: "{{ vm_dir_name }}/{{ vm_wait_log_name }}"

# Check if log file exists
- name: Run esxi_check_delete_datastore_file.yml
  ansible.builtin.include_tasks: esxi_check_delete_datastore_file.yml
  vars:
    file_in_datastore_ops: file
    file_in_datastore: "{{ datastore }}"
    file_in_datastore_path: "{{ vm_log_file_path }}"
    file_in_datastore_failed_ignore: "{{ vm_wait_log_ignore_errors | default(false) }}"

# Log file exists
- name: Set fact of the url of datastore file
  when:
    - file_in_datastore_result is defined
    - file_in_datastore_result == 'Success'
  block:
    - name: Set fact of the url of datastore file
      ansible.builtin.set_fact:
        vm_wait_log_url: "{{ ds_file_result.url }}"

    - name: Wait for message '{{ vm_wait_log_msg }}' appear in VM log {{ vm_wait_log_name }}
      ansible.builtin.uri:
        url: "{{ vm_wait_log_url }}"
        method: GET
        return_content: true
        user: "{{ vsphere_host_user }}"
        password: "{{ vsphere_host_user_password }}"
        validate_certs: "{{ validate_certs | default(false) }}"
      register: get_vm_log_content
      no_log: "{{ vm_wait_log_hide_output | default(true) }}"
      until:
        - get_vm_log_content is defined
        - get_vm_log_content.content is defined
        - get_vm_log_content.content | regex_findall(vm_wait_log_msg) | length != 0
      delay: "{{ vm_wait_log_delay | default(5) }}"
      retries: "{{ vm_wait_log_retries | default(60) }}"
      ignore_errors: "{{ vm_wait_log_ignore_errors | default(false) }}"

    - name: Set fact of the logs list found for specified log message
      when:
        - get_vm_log_content is defined
        - get_vm_log_content.content is defined
        - get_vm_log_content.status is defined
        - get_vm_log_content.status == 200
      ansible.builtin.set_fact:
        vm_wait_log_msg_list: "{{ get_vm_log_content.content | regex_findall(vm_wait_log_msg) }}"

    - name: Set fact of log message wait result
      when: vm_wait_log_msg_list | length != 0
      ansible.builtin.set_fact:
        vm_wait_log_msg_success: true

    - name: Display vm log info
      ansible.builtin.debug:
        msg:
          - "Found '{{ vm_wait_log_msg }}' message in VM log {{ vm_wait_log_name }}: {{ 'Success' if vm_wait_log_msg_success | bool else 'Failure' }}"
          - "Found logs list: {{ vm_wait_log_msg_list }}"

    - name: VM log info check failure
      when:
        - vm_wait_log_ignore_errors is undefined or not (vm_wait_log_ignore_errors | bool)
        - not (vm_wait_log_msg_success | bool)
      ansible.builtin.fail:
        msg: Failed to find '{{ vm_wait_log_msg }}' in VM log {{ vm_wait_log_name }}

- name: VM log info check failure
  when:
    - vm_wait_log_ignore_errors is undefined or not (vm_wait_log_ignore_errors | bool)
    - file_in_datastore_result is defined
    - file_in_datastore_result == 'Fail'
  ansible.builtin.fail:
    msg: Failed to find VM log file '{{ vm_wait_log_name }}'

---
# Check VMware tools service is running and display the installed VMware tools
# version, get VMware tools installation log file.
#
- name: Run ../utils/win_get_path.yml
  ansible.builtin.include_tasks: ../utils/win_get_path.yml
  vars:
    win_get_path_specified: $env:temp\vminst.log
- name: Run ../utils/win_get_file.yml
  ansible.builtin.include_tasks: ../utils/win_get_file.yml
  vars:
    win_get_file_src_path: "{{ win_get_path_absolute }}"
    win_get_file_dst_path: "{{ current_test_log_folder }}"

# Check VMware tools service status
- name: Run ../utils/win_get_service_status.yml
  ansible.builtin.include_tasks: ../utils/win_get_service_status.yml
  vars:
    win_service_name: VMTools
- name: Verify VMware tools service status is running
  ansible.builtin.assert:
    that:
      - service_status == "Running"
    fail_msg: VMTools service status is not Running
    success_msg: VMTools service status is Running

# Get VMware tools version and build number
- name: Run ../utils/win_get_vmtools_version_build.yml
  ansible.builtin.include_tasks: ../utils/win_get_vmtools_version_build.yml

- name: Print VMware Tools version and build
  ansible.builtin.debug:
    # Get VMware drivers list
    var: vmtools_info_from_vmtoolsd

- name: Run ../utils/win_get_vmtools_driver_list.yml
  ansible.builtin.include_tasks: ../utils/win_get_vmtools_driver_list.yml

# Get VMware services list
- name: Run ../utils/win_get_vmtools_service_list.yml
  ansible.builtin.include_tasks: ../utils/win_get_vmtools_service_list.yml

# Not all services are running, e.g., vmvss
- name: Display all services running status in guest OS
  ansible.builtin.debug:
    msg: "Service '{{ item.key }}' status is: {{ item.value }}"
  # ansible.builtin.assert:
  #   that:
  #     - "{{ item.value == 'Running' }}"
  #   success_msg: "Service '{{ item.key }}' status is: {{ item.value }}"
  #   fail_msg: "Service '{{ item.key }}' status is: {{ item.value }}"
  with_dict: "{{ vmtools_service_dict }}"

# Check problem device after VMware tools install
- name: Run ../utils/win_get_problem_device.yml
  ansible.builtin.include_tasks: ../utils/win_get_problem_device.yml

- name: Check no problem device listed
  ansible.builtin.assert:
    that:
      - gos_has_problem_device is defined
      - not gos_has_problem_device
    fail_msg: "Problem devices were found on the system, please check listed problem devices: {{ gos_problem_device_list }}"

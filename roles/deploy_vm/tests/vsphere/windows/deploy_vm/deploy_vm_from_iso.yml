---
# Deploy a new Windows VM and install guest OS automatically
# from ISO image
#
# Initialize VM virtual hardware config variables
- name: Initialize variables for new VM settings
  ansible.builtin.set_fact:
    boot_disk_controller: "{{ boot_disk_controller if (boot_disk_controller is defined and boot_disk_controller) else 'lsilogicsas' }}"
    secureboot_enabled: "{{ secureboot_enabled if (secureboot_enabled is defined and secureboot_enabled) else false }}"
    network_adapter_type: "{{ 'e1000e' if (windows_has_inbox_driver is undefined or not windows_has_inbox_driver) else network_adapter_type }}"
    firmware: "{{ firmware if (firmware is defined and firmware) else 'efi' }}"
    boot_disk_size_gb: "{{ [64, boot_disk_size_gb | default(64) | int] | max }}"

- name: Set fact of the deploy VM test case name
  ansible.builtin.set_fact:
    deploy_casename: deploy_vm_{{ firmware }}_{{ boot_disk_controller }}_{{ network_adapter_type }}

# Check configured VM CPU number and cores per socket number
- name: Run check_cpu_socket.yml
  ansible.builtin.include_tasks: check_cpu_socket.yml

# Get or check configured ISO file list
- name: Run ../../common/get_iso_file_list.yml
  ansible.builtin.include_tasks: ../../common/get_iso_file_list.yml

# Generate unattend install iso file
- name: Run create_unattend_install_iso.yml
  ansible.builtin.include_tasks: create_unattend_install_iso.yml
  when: unattend_install_conf is defined and unattend_install_conf
- ansible.builtin.debug:
    msg: unattend_install_conf is not defined or set to a file path, will not generate unattend iso file
  when: unattend_install_conf is undefined or not unattend_install_conf

# Compose VM CDROMs with ISO file list
- name: Run ../../common/compose_vm_cdroms.yml
  ansible.builtin.include_tasks: ../../common/compose_vm_cdroms.yml

# Create new VM  
- name: Run ../../common/vm_create.yml
  ansible.builtin.include_tasks: ../../common/vm_create.yml
  when: boot_disk_controller != 'ide'
- name: Run ../../common/vm_create_with_ide_disk.yml
  ansible.builtin.include_tasks: ../../common/vm_create_with_ide_disk.yml
  when: boot_disk_controller == 'ide'

- name: Run ../../common/vm_get_vm_info.yml
  ansible.builtin.include_tasks: ../../common/vm_get_vm_info.yml
- name: Set fact of vm_exists to True
  ansible.builtin.set_fact:
    vm_exists: true

# When firmware is EFI, configure force EFI setup once
- name: Handle VM with EFI firmware
  when: firmware is defined and firmware | lower == "efi"

  # Power on VM directly when VM firmware is BIOS
  block:
    - name: Set features on 64bit VM
      when: guest_id is defined and "'64' in guest_id"
      block:
        # Add virtual TPM device
        - name: Run ../../common/vm_add_vtpm_device.yml
          ansible.builtin.include_tasks: ../../common/vm_add_vtpm_device.yml
          vars:
            vc_cert_path: "{{ current_test_log_folder }}"
          when: virtual_tpm is defined and virtual_tpm | bool
        # Enable secureboot
        - name: Run ../../common/vm_set_boot_options.yml
          ansible.builtin.include_tasks: ../../common/vm_set_boot_options.yml
          vars:
            secure_boot_enabled_set: "{{ secureboot_enabled | default(false) }}"
            enter_bios_setup: true
        # Enable VBS
        - name: Run ../utils/win_enable_vbs_vm.yml
          ansible.builtin.include_tasks: ../utils/win_enable_vbs_vm.yml
          vars:
            win_enable_vbs: true
          when: enable_vbs is defined and enable_vbs | bool
    - name: Run ../../common/vm_set_power_state.yml
      ansible.builtin.include_tasks: ../../common/vm_set_power_state.yml
      vars:
        vm_power_state_set: powered-on
    - name: Run ../../common/vm_guest_send_key.yml
      ansible.builtin.include_tasks: ../../common/vm_guest_send_key.yml
      vars:
        keys_send:
          - DOWNARROW
          - DOWNARROW
          - ENTER
          - ENTER
- name: Run ../../common/vm_set_power_state.yml
  ansible.builtin.include_tasks: ../../common/vm_set_power_state.yml
  vars:
    vm_power_state_set: powered-on
  when: firmware is defined and firmware | lower == "bios"
- name: Wait 3 minutes while OS install
  ansible.builtin.pause:
    minutes: 3

# Check Image APPROVED in vmware.log when VM secureboot is enabled
- name: Run ../../common/vm_wait_log_msg.yml
  ansible.builtin.include_tasks: ../../common/vm_wait_log_msg.yml
  vars:
    vm_wait_log_name: vmware.log
    vm_wait_log_msg: "SECUREBOOT: Image APPROVED"
    vm_wait_log_retries: 10
    vm_wait_log_ignore_errors: false
    vm_wait_log_hide_output: false
  when:
    - firmware is defined and firmware | lower == 'efi'
    - secureboot_enabled is defined and secureboot_enabled

- name: Run ../../common/vm_wait_network_connected.yml
  ansible.builtin.include_tasks: ../../common/vm_wait_network_connected.yml
- name: Run ../../common/vm_get_ip.yml
  ansible.builtin.include_tasks: ../../common/vm_get_ip.yml
  vars:
    vm_get_ip_timeout: 3600
- name: Run ../utils/win_check_winrm.yml
  ansible.builtin.include_tasks: ../utils/win_check_winrm.yml
  vars:
    win_check_winrm_timeout: 1800
- name: Wait another 1 minute after OS becomes connectable
  ansible.builtin.pause:
    minutes: 1
- name: Run ../utils/add_windows_host.yml
  ansible.builtin.include_tasks: ../utils/add_windows_host.yml

- name: Enable VBS in guest OS
  when: enable_vbs is defined and enable_vbs | bool

  block:
    - name: Run ../utils/win_enable_vbs_guest.yml
      ansible.builtin.include_tasks: ../utils/win_enable_vbs_guest.yml
    # Get VBS status in guest OS
    - name: Run ../utils/win_get_vbs_guest.yml
      ansible.builtin.include_tasks: ../utils/win_get_vbs_guest.yml
    - name: Check VBS and running security service status
      ansible.builtin.assert:
        that:
          - win_vbs_status_guest | int == 2
          - "'2' in win_vbs_running_service"
        fail_msg: VBS is not running '{{ win_vbs_status_guest }}', or HVCI is not running '{{ win_vbs_running_service }}'.
- name: Run detach_cdrom_iso.yml
  ansible.builtin.include_tasks: detach_cdrom_iso.yml

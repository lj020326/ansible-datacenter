---

- name: Get expected IP and FQDN hostname bindings from cloudinit "/etc/hosts" template file
  when: enable_cloudinit_gosc
  block:
    - name: Initialize the fact of hosts template file
      ansible.builtin.set_fact:
        hosts_template_file: ""

    - name: Set fact of the hosts template file hosts.debian.tmpl
      when: guest_os_family == "Debian"
      ansible.builtin.set_fact:
        hosts_template_file: /etc/cloud/templates/hosts.debian.tmpl

    - name: Set fact of the hosts template file hosts.redhat.tmpl
      when: guest_os_family == "RedHat"
      ansible.builtin.set_fact:
        hosts_template_file: /etc/cloud/templates/hosts.redhat.tmpl

    - name: Set fact of the hosts template file hosts.suse.tmpl
      when: guest_os_family == "Suse"
      ansible.builtin.set_fact:
        hosts_template_file: /etc/cloud/templates/hosts.suse.tmpl

    - name: Set fact of the hosts template file hosts.photon.tmpl
      when: guest_os_ansible_distribution == "VMware Photon OS"
      ansible.builtin.set_fact:
        hosts_template_file: /etc/cloud/templates/hosts.photon.tmpl

    - name: Display guest info
      ansible.builtin.debug:
        msg: "For guest '{{ guest_os_ansible_distribution }}', set /etc/hosts template file: {{ hosts_template_file }}"

    - name: Get FQDN and hostname bound IP address list from hosts template
      when: hosts_template_file
      block:
        - name: Get FQDN and hostname bound IP address list from hosts template
          ansible.builtin.shell: cat "{{ hosts_template_file }}" | grep '.*fqdn}} .*hostname}}.*' | awk '{ print $1 }'
          delegate_to: "{{ vm_guest_ip }}"
          register: fqdn_hostname_bind_ip
          failed_when: fqdn_hostname_bind_ip.stderr
          changed_when: false

        - name: Print the IP address list to be binding with FQDN and hostname from hosts template file
          ansible.builtin.debug:
            var: fqdn_hostname_bind_ip

- name: Run ../utils/shutdown.yml
  ansible.builtin.include_tasks: ../utils/shutdown.yml

- name: Run linux_gosc_execution.yml
  ansible.builtin.include_tasks: linux_gosc_execution.yml
  vars:
    type: "{{ ip_assignment }}"
    timeout: 900

# Do not fail GOSC immediately if state keyword doesn't exist
- name: Run ../../common/vm_wait_gosc_completed.yml
  ansible.builtin.include_tasks: ../../common/vm_wait_gosc_completed.yml
  vars:
    get_guest_reset_time_retries: 10
    check_gosc_state_keyword: false

# Traditional GOSC will reboot guest OS (except for Photon) after all customization done
- name: Sleep 30 seconds to wait guest reboot for traditional GOSC
  when:
    - guest_os_ansible_distribution != "VMware Photon OS"
    - not enable_cloudinit_gosc | bool
    - gosc_state_keyword_found is defined
    - gosc_state_keyword_found | bool
  ansible.builtin.pause:
    seconds: 30

# Wait for guest IP not empty no matter GOSC with DHCP IP or static IP
# Otherwise incorrect static IP will fail the task and quit test without
# collecting information
- name: Run ../../common/vm_wait_guest_ip.yml
  ansible.builtin.include_tasks: ../../common/vm_wait_guest_ip.yml

# In case VM get new DHCP IP address after GOSC
- name: Run ../../common/update_inventory.yml
  when: ip_assignment == "dhcp"
  ansible.builtin.include_tasks: ../../common/update_inventory.yml

- name: Set fact of GOSC log files
  ansible.builtin.set_fact:
    gosc_deploypkg_log_file: /var/log/vmware-imc/toolsDeployPkg.log
    gosc_cloudinit_log_file: /var/log/cloud-init.log

# Wait GOSC completes message in logs
- name: Run wait_gosc_complete_msg.yml
  when: not enable_cloudinit_gosc | bool
  ansible.builtin.include_tasks: wait_gosc_complete_msg.yml
  vars:
    wait_gosc_log_file: "{{ gosc_deploypkg_log_file }}"
    wait_gosc_msg_regexp: Ran DeployPkg_DeployPackageFromFile successfully

- name: Run wait_gosc_complete_msg.yml
  when: enable_cloudinit_gosc | bool
  ansible.builtin.include_tasks: wait_gosc_complete_msg.yml
  vars:
    wait_gosc_log_file: "{{ gosc_cloudinit_log_file }}"
    wait_gosc_msg_regexp: Cloud-init .*finished at.*Datasource DataSourceOVF \[seed=vmware-tools\]

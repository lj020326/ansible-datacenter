---
# Will skip this test case when below requirements not meet:
# 1. vCenter server is configured, by default in vars/test.yml,
# 2. VMware tools is installed and running in VM, for cloud-init GOSC VMware tools is installed as open-vm-tools,
# 3. For cloud-init GOSC, cloud-init is installed or can be installed in guest OS with version higher than 18.5,
# 4. Guest OS is not in the not support GOSC list.
#
- block:
    - name: Set cloud-init workflow flag
      ansible.builtin.set_fact:
        enable_cloudinit_gosc: "{% if gosc_workflow  == 'cloud-init' %}True{% else %}False{% endif %}"

    - name: Run ../setup/test_setup.yml
      ansible.builtin.include_tasks: ../setup/test_setup.yml
      vars:
        skip_test_no_vmtools: true

    - name: Run check_gosc_support_status.yml
      ansible.builtin.include_tasks: check_gosc_support_status.yml

    - name: Test case block
      when: guest_os_ansible_distribution == "VMware Photon OS"
      # Install perl if guest OS doesn't have it
      block:
        # Traditional GOSC in Photon OS is implemented with cloud-init,
        # so will upgrade cloud-init to the latest version in Photon OS
        - name: Run ../utils/install_uninstall_package.yml
          ansible.builtin.include_tasks: ../utils/install_uninstall_package.yml
          vars:
            package_name: cloud-init
            package_state: latest

        # Install tar for collecting cloud-init logs
        - name: Run ../utils/get_installed_package_info.yml
          ansible.builtin.include_tasks: ../utils/get_installed_package_info.yml
          vars:
            package_name: tar

        - name: Run ../utils/install_uninstall_package.yml
          ansible.builtin.include_tasks: ../utils/install_uninstall_package.yml
          vars:
            package_name: tar
            package_state: present
          when:
            - package_info is defined
            - package_info | length == 0

        # In Photon OS 4.0, open-vm-tools-gosc is provided with GOSC scripts
        # from open-vm-tools 11.3.5
        - name: Run ../utils/install_uninstall_package.yml
          ansible.builtin.include_tasks: ../utils/install_uninstall_package.yml
          vars:
            package_name: open-vm-tools-gosc-{{ vmtools_version }}
            package_state: present
          when:
            - not enable_cloudinit_gosc | bool
            - guest_os_ansible_distribution_major_ver | int >= 4
            - vmtools_version is defined
            - vmtools_version is version('11.3.5', '>=')

    - name: Run ../utils/install_uninstall_package.yml
      when:
        - not enable_cloudinit_gosc | bool
        - guest_os_family == "RedHat"
      # Check cloud-init version for cloud-init gosc workflow
      block:
        - name: Check perl existence
          ansible.builtin.command: which perl
          failed_when: false
          register: which_perl_result
          delegate_to: "{{ vm_guest_ip }}"

        - name: Run ../utils/install_uninstall_package.yml
          when:
            - which_perl_result.rc is undefined or which_perl_result.rc != 0
            - guest_os_ansible_kernel is version('4.0', '<')
          ansible.builtin.include_tasks: ../utils/install_uninstall_package.yml
          vars:
            package_name: perl
            package_state: latest

        - name: Run ../utils/install_uninstall_package.yml
          when:
            - which_perl_result.rc is undefined or which_perl_result.rc != 0
            - guest_os_ansible_kernel is version('4.0', '>=')
          ansible.builtin.include_tasks: ../utils/install_uninstall_package.yml
          vars:
            package_name: perl-interpreter
            package_state: latest

    - name: Run ../utils/cloudinit_pkg_check.yml
      ansible.builtin.include_tasks: ../utils/cloudinit_pkg_check.yml

    # Skip cloud-init GOSC if cloud-init version is lower than required version.
    - name: Run ../../common/skip_test_case.yml
      when: enable_cloudinit_gosc
      # Get DNS server info before GOSC
      block:
        # Debian 10 and 11 cloud-init GOSC depends on cloud-init 22.1 or later
        # See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1008039
        # For other OS, cloud-init GOSC requires cloud-init 18.5 or later installed.
        - name: Set fact of cloud-init version for supporting GOSC
          ansible.builtin.set_fact:
            operator: >-
              {% if guest_os_ansible_distribution != 'Debian' %}>{% else %}>={% endif %}
            gosc_required_cloudinit_version: >-
              {% if guest_os_ansible_distribution != 'Debian' %}18.5{% else %}22.1{% endif %}

        - name: Run ../../common/skip_test_case.yml
          when: (not cloudinit_version) or not (cloudinit_version is version(gosc_required_cloudinit_version, operator))
          ansible.builtin.include_tasks: ../../common/skip_test_case.yml
          vars:
            skip_reason: Not Supported
            skip_msg: >
              "The guest OS doesn't have required cloud-init ({{ operator }} {{ gosc_required_cloudinit_version }}) installed. Skip to run this test case."

    - name: Run ../utils/get_system_dns.yml
      ansible.builtin.include_tasks: ../utils/get_system_dns.yml

    - name: Set fact of the DNS servers in /etc/resolv.conf before GOSC
      ansible.builtin.set_fact:
        dns_servers_before_gosc: "{{ dns_servers }}"

    - name: Display DNS servers in /etc/resolv.conf before GOSC
      ansible.builtin.debug:
        msg: "DNS servers before GOSC: {{ dns_servers_before_gosc }}"

    # Modify cloud-init GOSC config in guest OS
    - name: Run ../utils/enable_disable_cloudinit_cfg.yml
      ansible.builtin.include_tasks: ../utils/enable_disable_cloudinit_cfg.yml

    # Prepare router VM, vSwitch and portgroup
    - name: Run ../../common/network_testbed_setup.yml
      when:
        - router_vm_required | default(false)
        - router_vm_deployed is undefined or not router_vm_deployed | bool
      ansible.builtin.include_tasks: ../../common/network_testbed_setup.yml

    # Initialize the GOSC spec
    - name: Initialize the GOS customization spec
      ansible.builtin.set_fact:
        linux_gosc_spec: { domain: gosc.test.com, timezone: Europe/Berlin, dns_suffix: [test.com, gosc.test.com] }

    # Add network settings for static IP guest customization
    - name: Set GOS customization spec of static IP
      when: ip_assignment == "static"
      ansible.builtin.set_fact:
        linux_gosc_spec: "{{ linux_gosc_spec | combine(item) }}"
      loop:
        - { network: "{{ portgroup_name }}" }
        - { ip: 192.168.192.101 }
        - { netmask: 255.255.255.0 }
        - { gateway: 192.168.192.1 }
        - { dns_servers: [192.168.1.1, 192.168.1.2] }
        - { hostname: gosc-static-vm-01 }
        - { hwclockUTC: false }

    # Add network settings for DHCP guest customization
    - name: Set GOS customization spec of DHCP IP
      when: ip_assignment == "dhcp"
      ansible.builtin.set_fact:
        linux_gosc_spec: "{{ linux_gosc_spec | combine(item) }}"
      loop:
        - { network: "{{ gosc_dhcp_network | default('VM Network') }}" }
        - { dns_servers: [10.10.1.1, 10.10.1.2] }
        - { hostname: gosc-dhcp-vm-01 }
        - { hwclockUTC: true }

    # Execute guest customization on VM
    - name: Run linux_gosc_start.yml
      ansible.builtin.include_tasks: linux_gosc_start.yml

    # Check guest customization results
    - name: Run linux_gosc_verify.yml
      ansible.builtin.include_tasks: linux_gosc_verify.yml

  rescue:
    - name: Run ../../common/test_rescue.yml
      ansible.builtin.include_tasks: ../../common/test_rescue.yml

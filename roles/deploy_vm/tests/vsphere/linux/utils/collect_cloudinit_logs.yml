---
# Collect cloud-init logs at deploying OVA or guest customization
- name: Initialize the cloud-init logs archive path in guest OS
  ansible.builtin.set_fact:
    cloudinit_logs_src_path: /tmp/cloud-init_{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }}.tar.gz

- name: Set fact of cloud-init logs archive path at local
  ansible.builtin.set_fact:
    cloudinit_logs_local_path: "{{ current_test_log_folder }}/{{ cloudinit_logs_src_path | basename }}"

- when:
    - vmtools_is_running is defined
    - vmtools_is_running | bool

  block:
    # Collect cloud-init logs
    - name: Run ../../common/vm_shell_in_guest.yml
      ansible.builtin.include_tasks: ../../common/vm_shell_in_guest.yml
      vars:
        vm_shell_cmd: /usr/bin/cloud-init
        vm_shell_args: collect-logs -u -t {{ cloudinit_logs_src_path }}
        vm_shell_out: ""

    - name: Run ../../common/vm_guest_file_operation.yml
      ansible.builtin.include_tasks: ../../common/vm_guest_file_operation.yml
      vars:
        operation: fetch_file
        src_path: "{{ cloudinit_logs_src_path }}"
        dest_path: "{{ cloudinit_logs_local_path }}"
- when:
    - vmtools_is_running is undefined or not (vmtools_is_running | bool)
    - vm_guest_ip is defined
    - vm_guest_ip in groups['target_vm']
  block:
    - name: Collect cloud-init logs
      ansible.builtin.command: /usr/bin/cloud-init collect-logs -u -t {{ cloudinit_logs_src_path }}
      delegate_to: "{{ vm_guest_ip }}"

    - name: Fetch cloud-init logs from guest OS
      ansible.builtin.fetch:
        src: "{{ cloudinit_logs_src_path }}"
        dest: "{{ cloudinit_logs_local_path }}"
        flat: true
      delegate_to: "{{ vm_guest_ip }}"

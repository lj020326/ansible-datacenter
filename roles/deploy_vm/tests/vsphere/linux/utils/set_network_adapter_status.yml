---
# Set network interface status to down or up
# Parameters
#   network_adapter_name: The network interface name
#   network_adapter_status: down or up

# Set fact of network config file in guest OSes except Photon OS
- name: Run get_network_manager.yml
  ansible.builtin.include_tasks: get_network_manager.yml
  when: guest_os_network_manager is undefined or not guest_os_network_manager

# RHEL/SLED/Ubuntu Desktop network interfaces are managed by NetworkManager
- name: Set network interface status with NetworkManager
  when: guest_os_network_manager == "NetworkManager"
  # SLES is using Wicked to manage network interface
  block:
    - name: Bring {{ network_adapter_status }} network interface '{{ network_adapter_name }}'
      when: network_adapter_status | lower == "up"
      ansible.builtin.command: nmcli device connect {{ network_adapter_name }}
      delegate_to: "{{ vm_guest_ip }}"

    - name: Bring {{ network_adapter_status }} network interface '{{ network_adapter_name }}'
      when: network_adapter_status | lower == "down"
      ansible.builtin.command: nmcli device disconnect {{ network_adapter_name }}
      delegate_to: "{{ vm_guest_ip }}"

    # Get network adapter interface status
    - name: Get network interface '{{ network_adapter_name }}' status
      ansible.builtin.shell: nmcli device status | grep '^{{ network_adapter_name }}\s\+' | awk '{print $3'}
      register: nmcli_device_status
      changed_when: false
      delegate_to: "{{ vm_guest_ip }}"

    - name: Print the network adapter interface status
      when:
        - nmcli_device_status is defined
        - nmcli_device_status.stdout is defined
      ansible.builtin.debug:
        msg: After bringing {{ network_adapter_status }} {{ network_adapter_name }}, its status became '{{ nmcli_device_status.stdout }}'

- name: Bring {{ network_adapter_status }} network interface '{{ network_adapter_name }}'
  when: guest_os_network_manager == "wicked"
  ansible.builtin.command: wicked if{{ network_adapter_status | lower }} {{ network_adapter_name }}
  delegate_to: "{{ vm_guest_ip }}"

# Old RHEL or Debian is using ifdown/ifup to manage network interfaces
- name: Bring {{ network_adapter_status }} network interface '{{ network_adapter_name }}'
  when: guest_os_network_manager == "traditional"
  ansible.builtin.command: if{{ network_adapter_status | lower }} {{ network_adapter_name }}
  delegate_to: "{{ vm_guest_ip }}"

# Photon OS/Flatcar is using systemd-networkd to manage network interface
- name: Bring {{ network_adapter_status }} network interface '{{ network_adapter_name }}'
  when: guest_os_network_manager in ["systemd-networkd", "netplan"]
  ansible.builtin.command: ip link set {{ network_adapter_name }} {{ network_adapter_status | lower }}
  delegate_to: "{{ vm_guest_ip }}"

- name: Get network adapter interface status
  when: guest_os_network_manager != "NetworkManager"
  block:
    - name: Set facts for current network interface status
      ansible.builtin.set_fact:
        current_network_adapter_status: ""

    # Get network adapter interface status
    - name: Waiting for network interface '{{ network_adapter_name }}' status '{{ network_adapter_status }}'
      ansible.builtin.shell: ip -br addr show {{ network_adapter_name }} | awk '{print $2}'
      register: ip_show_result
      changed_when: false
      until:
        - ip_show_result.stdout is defined
        - ip_show_result.stdout | lower == network_adapter_status | lower
      retries: 20
      delay: 5
      delegate_to: "{{ vm_guest_ip }}"
      ignore_errors: true

    - name: Set network interface '{{ network_adapter_name }}' current status
      when: ip_show_result is defined
      ansible.builtin.set_fact:
        current_network_adapter_status: |-
          {%- if ip_show_result.stdout is defined and ip_show_result.stdout -%}{{ ip_show_result.stdout | lower }}
          {%- elif ip_show_result.stderr is defined and ip_show_result.stderr -%}{{ ip_show_result.stderr }}
          {%- endif -%}

    - name: Check network interface '{{ network_adapter_name }}' status is '{{ network_adapter_status }}'
      ansible.builtin.assert:
        that:
          - ip_show_result is defined
          - ip_show_result.stdout is defined
          - ip_show_result.stdout | lower == network_adapter_status | lower
        fail_msg: >-
          Failed to get network interface '{{ network_adapter_name }}' status '{{ network_adapter_status }}'
          after 100 seconds. Its current status is '{{ current_network_adapter_status }}'.

    - name: Print the network adapter interface status
      when:
        - ip_show_result is defined
        - ip_show_result.stdout is defined
      ansible.builtin.debug:
        msg: After bringing {{ network_adapter_status }} {{ network_adapter_name }}, its status became '{{ ip_show_result.stdout }}'

---

- name: "Init {{ role_name }} vars"
  ansible.builtin.include_tasks: init-vars.yml

- name: "Ensure any user processes are stopped/terminated before modifying users"
  when:
    - "__bootstrap_linux_user__list | selectattr('name','equalto', ansible_user) | list | length == 0"
#    - bootstrap_linux__stop_user_procs|d(True)|bool
  ansible.builtin.include_tasks: stop-user-processes.yml

- name: Load current group info
  ansible.builtin.getent:
    database: group
    split: ":"
  check_mode: false

- name: "Ensure group exist with correct gid"
  when:
    - item.gid is defined
    - item.gid!=getent_group[item.name][1]|d('')
#  ignore_errors: yes
  ansible.builtin.group:
    name: "{{ item.name }}"
    gid: "{{ item.gid }}"
    state: present
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

## ref: https://stackoverflow.com/questions/19292899/creating-a-new-user-and-password-with-ansible
- name: "Add users with groups"
  when: item.bootstrap_user|d(True)|bool
  ansible.builtin.user:
    name: "{{ item.name }}"
    state: "{{ item.state | d('present') }}"
    system: "{{ item.system | d(false) }}"
    shell: "{{ item.shell | d(omit) }}"
    append: "{{ True if item.groups is defined else False }}"
    uid: "{{ item.uid | d(omit) }}"
    group: "{{ item.gid | default(omit) }}"
    groups: "{{ item.groups | default(omit) }}"
    password: "{{ bootstrap_linux_user__credentials[item.name].hashed_password
      | d(bootstrap_linux_user__credentials[item.name].password
      | d(omit)
      | password_hash('sha512',65534 | random(seed=inventory_hostname)
      | string)) }}"
    generate_ssh_key: "{{ item.generate_ssh_key | d(omit) }}"
    ssh_key_bits: "{{ item.ssh_key_bits | d(omit) }}" ## 2048
    ssh_key_file: "{{ item.ssh_key_file | d(omit) }}"
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

## ref: https://github.com/selivan/ansible-set-user-password-expire/blob/master/passwords-set-expire.yml
- name: "Check users password valid days"
  ansible.builtin.shell: |
    set -o pipefail # <-- adding this will prevent surprises
    getent shadow "{{ item.name }}" | cut -d':' -f5
  register: users_pw_valid
  changed_when: False
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

## ref: https://github.com/ansible/ansible/issues/5564
- name: "Display user password valid days"
  ansible.builtin.debug:
    msg: "output = {{ item.stdout }}"
#  loop: "{{ users_pw_valid.results }}"
  loop: "{{ users_pw_valid.results }}"
  loop_control:
    label: "{{ item.item.name }}"

### ref: https://github.com/ansible/ansible/issues/5564
#- name: "Display user password valid days"
#  ansible.builtin.debug:
##    var: users_pw_valid
##    var: users_pw_valid.results|map(attribute='stdout')|map('default','')
#    var: users_pw_valid.results|map(attribute='stdout')

- name: "Set users password valid days"
#  when: item.stdout is defined and item.stdout != {{ user_password_valid_time }}
  when:
    - item.password_valid_days is defined
    - users_pw_valid.results[user_idx].stdout is defined
    - users_pw_valid.results[user_idx].stdout != item.password_valid_days
  changed_when: false
  ansible.builtin.command: chage -M "{{ item.password_valid_days }}" "{{ item.name }}"
#  loop: users_pw_valid.results
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"
    index_var: user_idx

- name: "Ensure sudoers.d exists"
  ansible.builtin.file:
    path: /etc/sudoers.d
    state: directory
    mode: "0755"

- name: "Add to sudoers"
  when: item.system|d(False)|bool
#  no_log: yes
  ansible.builtin.copy:
    dest: /etc/sudoers.d/{{ item.name }}
    mode: "0644"
    content: |
             {{ item.name }}  ALL=(ALL) ALL
             {{ item.name }}  ALL=(ALL) NOPASSWD: ALL
             {{ item.name }}  ALL=(root) NOPASSWD:/usr/bin/supervisorctl
             Defaults !requiretty
             #
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

#- name: Allow ttyless sudo
#  lineinfile: dest=/etc/sudoers regexp=requiretty state=absent

- name: Add .ssh directories
#  no_log: yes
  when: item.homedir is defined
  ansible.builtin.file:
    path: "{{ item.homedir }}/.ssh"
    state: directory
    mode: "0700"
    owner: "{{ item.name }}"
    group: "{{ item.group|default(item.name) }}"
  loop: "{{ __bootstrap_linux_user__list }}"
#  loop: "{{ __all_bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

- name: Display bootstrap_linux_user__credentials
  ansible.builtin.debug:
    var: bootstrap_linux_user__credentials
    verbosity: 1

- name: Add user SSH authorized keys
#  no_log: yes
  when:
    - bootstrap_linux_user__credentials is defined
    - bootstrap_linux_user__credentials[item.name] is defined
    - bootstrap_linux_user__credentials[item.name].auth_key is defined
  ansible.posix.authorized_key:
    user: "{{ item.name }}"
    key: "{{ bootstrap_linux_user__credentials[item.name].auth_key }}"
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

#- name: "Display __all_bootstrap_linux_user__list"
#  ansible.builtin.debug:
#    var: __all_bootstrap_linux_user__list

- name: Add user SSH private key
#  no_log: yes
  when: bootstrap_linux_user__credentials[item.name].ssh_keypair.private is defined
  ansible.builtin.copy:
    content: "{{ bootstrap_linux_user__credentials[item.name].ssh_keypair.private }}"
    dest: "{{ item.homedir }}/.ssh/id_rsa"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0600"
  loop: "{{ __bootstrap_linux_user__list }}"
#  loop: "{{ __all_bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

- name: Add user SSH public key
  when: bootstrap_linux_user__credentials[item.name].ssh_keypair.public is defined
  ansible.builtin.copy:
    content: "{{ bootstrap_linux_user__credentials[item.name].ssh_keypair.public }}"
    dest: "{{ item.homedir }}/.ssh/id_rsa.pub"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0600"
  loop: "{{ __bootstrap_linux_user__list }}"
#  loop: "{{ __all_bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

- name: Copy bash env files to home directory
  when: item.0.setup_bashenv|d(True)|bool
#  no_log: yes
  ansible.builtin.copy:
    backup: true
    src: "{{ item.1 }}"
    dest: "{{ item.0.homedir }}/"
    mode: "0644"
    owner: "{{ item.0.name }}"
    force: yes
  loop: "{{ __bootstrap_linux_user__list | product( lookup('fileglob', 'bashenv/.*', wantlist=True)) | list }}"
  loop_control:
    label: "Copy {{ item.1 | basename }} to {{ item.0.homedir }}"
  tags:
    - user-updatebash

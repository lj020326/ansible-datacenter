---
- name: Init {{ role_name }} vars
  ansible.builtin.include_tasks: init-vars.yml

- name: Ensure any user processes are stopped/terminated before modifying users
  ansible.builtin.include_tasks: stop-user-processes.yml

- name: Load current group info
  ansible.builtin.getent:
    database: group
    split: ":"
  check_mode: false

- name: Display __bootstrap_linux_user__list
  ansible.builtin.debug:
    var: __bootstrap_linux_user__list

- name: Ensure group exist with correct gid
  when:
    - item.gid is defined
    - item.gid!=getent_group[item.name][1]|d('')
  #  ignore_errors: yes
  ansible.builtin.group:
    name: "{{ item.name }}"
    gid: "{{ item.gid }}"
    state: present
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

## ref: https://stackoverflow.com/questions/19292899/creating-a-new-user-and-password-with-ansible
- name: Add users with groups
  when: item.bootstrap_user|d(True)|bool
  no_log: true
  ansible.builtin.user:
    name: "{{ item.name }}"
    state: "{{ item.state | d('present') }}"
    system: "{{ item.system | d(false) }}"
    shell: "{{ item.shell | d(omit) }}"
    append: "{{ true if item.groups is defined else false }}"
    uid: "{{ item.uid | d(omit) }}"
    group: "{{ item.gid | d(omit) }}"
    groups: "{{ item.groups | d(omit) }}"
    password: "{{ item.password
      | d(bootstrap_linux_user__credentials[item.name].hashed_password)
        | d(bootstrap_linux_user__credentials[item.name].password | d(omit)
        | password_hash('sha512',65534 | random(seed=inventory_hostname) | string)) }}"
    generate_ssh_key: "{{ item.generate_ssh_key | d(omit) }}"
    ssh_key_bits: "{{ item.ssh_key_bits | d(omit) }}" ## 2048
    ssh_key_file: "{{ item.ssh_key_file | d(omit) }}"
    create_home: "{{ item.create_home | d(omit) }}"
    home: "{{ item.home | d(omit) }}"
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

## ref: https://github.com/lj020326/ansible-set-user-password-expire/blob/main/passwords-set-expire.yml
- name: "Fetch user valid days from /etc/shadow"
  ansible.builtin.getent:
    database: shadow
    split: ":"

- name: "Display getent_shadow"
  ansible.builtin.debug:
    var: getent_shadow
    verbosity: 1

- name: "Assert password valid days is defined"
  when: item.password_valid_days is defined
  ansible.builtin.assert:
    that: getent_shadow[item.name][3] is defined
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Set users password valid days"
  #  when: item.stdout is defined and item.stdout != {{ user_password_valid_time }}
  when:
    - item.password_valid_days is defined
    - getent_shadow[item.name][3] is defined
    - getent_shadow[item.name][3] != item.password_valid_days
  changed_when: false
  ansible.builtin.command: chage -M "{{ item.password_valid_days }}" "{{ item.name }}"
  #  loop: __getent_user_results.results
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Ensure /etc/sudoers.d exists"
  ansible.builtin.file:
    path: /etc/sudoers.d
    state: directory
    mode: "0755"

- name: "Add to sudoers"
  when: item.system|d(False)|bool
  #  no_log: yes
  ansible.builtin.copy:
    dest: /etc/sudoers.d/{{ item.name }}
    mode: "0644"
    content: |
      {{ item.name }}  ALL=(ALL) ALL
      {{ item.name }}  ALL=(ALL) NOPASSWD: ALL
      {{ item.name }}  ALL=(root) NOPASSWD:/usr/bin/supervisorctl
      Defaults !requiretty
      #
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

#- name: "Allow ttyless sudo"
#  lineinfile: dest=/etc/sudoers regexp=requiretty state=absent

- name: "Add .ssh directories"
  when: item.home_dir is defined
  ansible.builtin.file:
    path: "{{ item.home_dir }}/.ssh"
    state: directory
    mode: "0700"
    owner: "{{ item.name }}"
    group: "{{ item.group | d(item.name) }}"
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Display bootstrap_linux_user__credentials"
  ansible.builtin.debug:
    var: bootstrap_linux_user__credentials
    verbosity: 1

- name: "Add user SSH authorized keys"
  #  no_log: yes
  when:
    - bootstrap_linux_user__credentials is defined
    - bootstrap_linux_user__credentials[item.name] is defined
    - bootstrap_linux_user__credentials[item.name].auth_key is defined
  ansible.posix.authorized_key:
    user: "{{ item.name }}"
    key: "{{ bootstrap_linux_user__credentials[item.name].auth_key }}"
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

#- name: "Display __all_bootstrap_linux_user__list"
#  ansible.builtin.debug:
#    var: __all_bootstrap_linux_user__list

- name: "Add user SSH private key"
  #  no_log: yes
  when: bootstrap_linux_user__credentials[item.name].ssh_keypair.private is defined
  ansible.builtin.copy:
    content: "{{ bootstrap_linux_user__credentials[item.name].ssh_keypair.private }}"
    dest: "{{ item.home_dir }}/.ssh/id_rsa"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0600"
  loop: "{{ __bootstrap_linux_user__list }}"
  #  loop: "{{ __all_bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Add user SSH public key"
  when: bootstrap_linux_user__credentials[item.name].ssh_keypair.public is defined
  ansible.builtin.copy:
    content: "{{ bootstrap_linux_user__credentials[item.name].ssh_keypair.public }}"
    dest: "{{ item.home_dir }}/.ssh/id_rsa.pub"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0600"
  loop: "{{ __bootstrap_linux_user__list }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Copy bash env files to home directory"
  when: item.0.setup_bashenv|d(True)|bool
  #  no_log: yes
  ansible.builtin.copy:
    backup: true
    src: "{{ item.1 }}"
    dest: "{{ item.0.home_dir }}/"
    mode: "0644"
    owner: "{{ item.0.name }}"
    force: true
  loop: "{{ __bootstrap_linux_user__list | product( lookup('fileglob', 'files/bashenv/.*', wantlist=True)) | list }}"
  loop_control:
    label: Copy {{ item.1 | basename }} to {{ item.0.home_dir }}

- name: "Template bash env files to home directory"
  when: item.0.setup_bashenv|d(True)|bool
  #  no_log: yes
  ansible.builtin.template:
    backup: true
    src: "{{ item.1 }}"
    dest: "{{ item.0.home_dir }}/"
    mode: "0644"
    owner: "{{ item.0.name }}"
    force: true
  loop: "{{ __bootstrap_linux_user__list | product( lookup('fileglob', 'templates/bashenv/.*', wantlist=True)) | list }}"
  loop_control:
    label: Copy {{ item.1 | basename }} to {{ item.0.home_dir }}

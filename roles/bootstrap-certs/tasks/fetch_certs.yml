---

- ansible.builtin.set_fact:
    __log_prefix_fetch: "Bootstrap CA Certs | Fetch certs |"

- name: "{{ __log_prefix_fetch }} Display cert and key dir info"
  ansible.builtin.debug:
    msg:
    - "bootstrap_certs__cacert_local_cert_dir={{ bootstrap_certs__cacert_local_cert_dir }}"
    - "bootstrap_certs__cacert_local_key_dir={{ bootstrap_certs__cacert_local_key_dir }}"
    - "bootstrap_certs__ca_key_dir={{ bootstrap_certs__ca_key_dir }}"

- name: "{{ __log_prefix_fetch }} Remove all existing old CA certs and keys"
  when: bootstrap_certs__ca_reset_local_certs|bool
  file:
    state: absent
    path: "{{ item }}"
  loop:
    - "{{ bootstrap_certs__cacert_local_cert_dir }}"
    - "{{ bootstrap_certs__cacert_local_key_dir }}"
    - "{{ bootstrap_certs__ca_key_dir }}"

- name: "{{ __log_prefix_fetch }} Ensure local cert dirs exist"
  file:
    state: directory
    path: "{{ item }}"
  loop:
    - "{{ bootstrap_certs__cacert_local_cert_dir }}"
    - "{{ bootstrap_certs__cacert_local_key_dir }}"
    - "{{ bootstrap_certs__ca_key_dir }}"

- name: "{{ __log_prefix_fetch }} Check if root cert exists in {{ bootstrap_certs__ca_local_cert_dir }}"
  stat:
    path: "{{ bootstrap_certs__ca_local_cert_dir }}/{{ bootstrap_certs__caroot_cert }}"
  register: cacert_root_result

- name: "{{ __log_prefix_fetch }} Check if {{ bootstrap_certs__ca_local_cert_dir }}/{{ hostname_name_full }}.pem exists"
  stat:
    path: "{{ bootstrap_certs__ca_local_cert_dir }}/{{ hostname_name_full }}.pem"
  register: cacert_cert_result

- name: "{{ __log_prefix_fetch }} Check if {{ bootstrap_certs__ca_local_cert_dir }}/{{ hostname_name_full }}.chain.pem exists"
  stat:
    path: "{{ bootstrap_certs__ca_local_cert_dir }}/{{ hostname_name_full }}.chain.pem"
  register: cacert_certbundle_result

- name: "{{ __log_prefix_fetch }} Check if {{ bootstrap_certs__ca_local_key_dir }}/{{ hostname_name_full }}-key.pem exists"
  stat:
    path: "{{ bootstrap_certs__ca_local_key_dir }}/{{ hostname_name_full }}-key.pem"
  register: cacert_key_result

- name: "trust_cert | Copy root cert to {{ bootstrap_certs__trust_ca_cacert_dir }} for importing"
  copy_remotely:
    src: "{{ bootstrap_certs__ca_local_cert_dir }}/{{ bootstrap_certs__caroot_cert }}"
    dest: "{{ bootstrap_certs__trust_ca_cacert_dir }}/{{ bootstrap_certs__ca_root_cn }}.{{ bootstrap_certs__trust_ca_cert_extension }}"

- name: "{{ __log_prefix_fetch }} Copy ca intermediate certs to {{ bootstrap_certs__ca_local_cert_dir }}"
#  when: item.domainName in bootstrap_certs__ca_domains_hosted
  when: item.domainName in __bootstrap_certs__ca_fetch_domains_list
#  copy_remotely:
  ansible.builtin.copy:
    src: "{{ bootstrap_certs__cacerts_base_dir }}/{{ item.domainName }}/{{ item.commonName }}.pem"
    dest: "{{ bootstrap_certs__ca_local_cert_dir }}/{{ item.commonName }}.pem"
    backup: yes
    remote_src: yes
  loop: "{{ __bootstrap_certs__ca_intermediate_cert_list }}"

- name: "{{ __log_prefix_fetch }} Copy ca intermediate cert chains to {{ bootstrap_certs__ca_local_cert_dir }}"
#  when: item.domainName in bootstrap_certs__ca_domains_hosted
  when: item.domainName in __bootstrap_certs__ca_fetch_domains_list
#  copy_remotely:
  ansible.builtin.copy:
    src: "{{ bootstrap_certs__cacerts_base_dir }}/{{ item.domainName }}/{{ item.commonName }}.chain.pem"
    dest: "{{ bootstrap_certs__ca_local_cert_dir }}/{{ item.commonName }}.chain.pem"
    backup: yes
    remote_src: yes
  loop: "{{ __bootstrap_certs__ca_intermediate_cert_list }}"

- name: "{{ __log_prefix_fetch }} Copy ca intermediate cert keys to {{ bootstrap_certs__ca_local_key_dir }}"
#  when: item.domainName in bootstrap_certs__ca_domains_hosted
  when: item.domainName in __bootstrap_certs__ca_fetch_domains_list
#  copy_remotely:
  ansible.builtin.copy:
    src: "{{ bootstrap_certs__cacerts_base_dir }}/{{ item.domainName }}/{{ item.commonName }}-key.pem"
    dest: "{{ bootstrap_certs__ca_local_key_dir }}/{{ item.commonName }}-key.pem"
    mode: "0600"
    backup: yes
    remote_src: yes
  loop: "{{ __bootstrap_certs__ca_intermediate_cert_list }}"

- name: "{{ __log_prefix_fetch }} Copy service route certs to {{ bootstrap_certs__ca_local_cert_dir }}"
#  copy_remotely:
  ansible.builtin.copy:
    src: "{{ bootstrap_certs__cacerts_base_dir }}/{{ item.route }}/{{ item.route }}.pem"
    dest: "{{ bootstrap_certs__ca_local_cert_dir }}/{{ item.route }}.pem"
    backup: yes
    remote_src: yes
  loop: "{{ bootstrap_certs__ca_service_routes_list }}"

- name: "{{ __log_prefix_fetch }} Copy service route cert chains to {{ bootstrap_certs__ca_local_cert_dir }}"
#  copy_remotely:
  ansible.builtin.copy:
    src: "{{ bootstrap_certs__cacerts_base_dir }}/{{ item.route }}/{{ item.route }}.chain.pem"
    dest: "{{ bootstrap_certs__ca_local_cert_dir }}/{{ item.route }}.chain.pem"
    backup: yes
    remote_src: yes
  loop: "{{ bootstrap_certs__ca_service_routes_list }}"

- name: "{{ __log_prefix_fetch }} Copy service route keys to {{ bootstrap_certs__ca_local_key_dir }}"
#  copy_remotely:
  ansible.builtin.copy:
    src: "{{ bootstrap_certs__cacerts_base_dir }}/{{ item.route }}/{{ item.route }}-key.pem"
    dest: "{{ bootstrap_certs__ca_local_key_dir }}/{{ item.route }}-key.pem"
    mode: "0600"
    backup: yes
    remote_src: yes
  loop: "{{ bootstrap_certs__ca_service_routes_list }}"

- name: "{{ __log_prefix_fetch }} Copy service route keys to trust dir at {{ bootstrap_certs__ca_key_dir }}"
#  copy_remotely:
  ansible.builtin.copy:
    src: "{{ bootstrap_certs__cacerts_base_dir }}/{{ item.route }}/{{ item.route }}-key.pem"
    dest: "{{ bootstrap_certs__ca_key_dir }}/{{ item.route }}-key.pem"
    mode: "0600"
    backup: yes
    remote_src: yes
  loop: "{{ bootstrap_certs__ca_service_routes_list }}"

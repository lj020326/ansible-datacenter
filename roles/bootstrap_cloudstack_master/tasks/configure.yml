---
##
## ref: https://github.com/dagsonstebo/CloudStack-Ansible-Playbook/blob/master/cloudmonkey.yml
##

##
## recommended order of CS configuration based on cloudstack official documentation:
##
#  - Adding Regions (optional)
#  - Adding a Zone
#  - Adding a Pod
#  - Adding a Cluster
#  - Adding a Host
#  - Add Primary Storage
#  - Add Secondary Storage
#  - Initialize and Test
#  - Configuration Parameters
#  - Granular Global Configuration Parameters
#
# ref: http://docs.cloudstack.apache.org/en/latest/installguide/index.html

#
# CLOUDSTACK CONFIGURATION ROLE
#
# Used following CloudStack base install, playbook uses cloudstack API to configure
# zone, networks, pods, clusters, XenServer hosts and primary/secondary storage.
#
# Prereqs and network topology:
#   - Fully built and running CloudStack management server.
#   - Built XenServer hosts, with cloud-private and cloud-public networks configured.
#   - Prepared NFS primary and secondary storage.
#   - VLAN segregation.
#   - Physical network 1: management and private traffic, tagged cloud-private.
#   - Physical network 2: public traffic, tagged cloud-public.
#
# v1.0 280115 DS
#########################################################################################
#

#- name: Install python packages for CS config with pip
#  ansible.builtin.pip:
#    name: sshpubkeys, cs

- name: Install python packages for CS config with pip
  ansible.builtin.pip:
    name: sshpubkeys, cs
    state: present
    extra_args: "--user"
    executable: pip3

#- name: Validate input - XenServer host password
#  fail: msg="Missing or incorrect XenServer password."
#  when: XSPassword is not defined or ( XSPassword is defined and XSPassword  == "" )

- name: Validate input - CSHostPassword
  when: CSHostPassword|d('')|length == 0
  ansible.builtin.fail:
    msg: "Missing or incorrect CSHostPassword."

#- name: "Restart cloudstack-agent Service"
#  ansible.builtin.service:
#    enabled: yes
#    name: cloudstack-agent
#    state: started

#- name: ensure ssh keys exist
#  ngine_io.cloudstack.cs_sshkeypair:
#    name: "{{ item }}"
#    public_key: "{{ lookup('file', '~/.ssh/id_rsa.pub' | expanduser) }}"
#    api_region: "{{ cs_region }}"
#  loop: "{{ cs_ssh_keys }}"
#  run_once: yes

########################################################
## Create region
##
#- name: create region
#  ngine_io.cloudstack.cs_region:
#    id: 2
#    name: csh
##    endpoint: https://csh.cloud.johnson.int
#    endpoint: "{{CMConfig.RegionEndpoint}}"
#  register: region
#
#- name: Print region info
#  ansible.builtin.debug: var=region

########################################################
## Configure first zone
##
- name: Configure zone and resources
  ngine_io.cloudstack.cs_zone:
    name: "{{ CMConfig.ZoneName }}"
    dns1: "{{ CMConfig.PublicDNS1 }}"
    dns2: "{{ CMConfig.PublicDNS2 }}"
    internal_dns1: "{{ CMConfig.InternalDNS1 }}"
#    internal_dns2: "{{ CMConfig.InternalDNS2 | default(omit) }}"
    internal_dns2: "{{ CMConfig.InternalDNS1 }}"
#    guest_cidr_address: "{{ CMConfig.GuestCIDR }}"
    network_type: "{{ CMConfig.NetworkType }}"
#    network_type: "Basic"
#    network_domain: "{{ CMConfig.NetworkDomain }}"
#    local_storage_enabled: yes
    local_storage_enabled: no
    securitygroups_enabled: no
    network_domain: "{{ CMConfig.NetworkDomain }}"
    domain: "{{ CMConfig.CSDomain }}"
    state: present
  register: zone

- name: Print zone info
  ansible.builtin.debug:
    var: zone

## setup network configs
- name: Setup network configs
  tags:
    - cmconfig-network
  block:
    ########################################################
    ## Create first physical network and traffic types
    ##
    #- name: Create physical network 1
    #  ansible.builtin.shell:  cloudmonkey create physicalnetwork
    #    name={{ CMConfig.Phys1Name }}
    #    zoneid={{ ZoneID.stdout }}
    #    isolationmethods={{ CMConfig.Phys1Isolation }}
    #    vlan={{ CMConfig.Phys1VLANs }} | grep ^id | awk '{print $3}'
    #  register: Phys1ID
    #  tags:
    #    - cmconfig
    #
    #- name: Create traffic type on physical network 1 ({{ CMConfig.Phys1TrafficType1 }})
    #  ansible.builtin.shell: cloudmonkey add traffictype
    #    physicalnetworkid={{ Phys1ID.stdout }}
    #    traffictype={{ CMConfig.Phys1TrafficType1 }}
    #    xennetworklabel={{ CMConfig.Phys1TrafficType1Label }}
    #  tags:
    #    - cmconfig
    #
    #- name: Create traffic type on physical network 2 ({{ CMConfig.Phys1TrafficType2 }})
    #  ansible.builtin.shell: cloudmonkey add traffictype
    #    physicalnetworkid={{ Phys1ID.stdout }}
    #    traffictype={{ CMConfig.Phys1TrafficType2 }}
    #    xennetworklabel={{ CMConfig.Phys1TrafficType2Label }}
    #  tags:
    #    - cmconfig
    ## ref: https://docs.ansible.com/ansible/latest/modules/cs_physical_network_module.html
    - name: create physicalnetwork 1 ({{ CMConfig.Phys1Name }})
      ngine_io.cloudstack.cs_physical_network:
        name: "{{ CMConfig.Phys1Name }}"
        zone: "{{ CMConfig.ZoneName }}"
        isolation_method: "{{ CMConfig.Phys1Isolation }}"
        vlan: "{{ CMConfig.Phys1VLANs }}"
  #      broadcast_domain_range: ZONE
        broadcast_domain_range: POD
      register: net1

    - name: Print net1 info
      ansible.builtin.debug:
        var: net1

    - name: verify setup network
      ansible.builtin.assert:
        that:
          - net1 is successful
          - net1.name == CMConfig.Phys1Name

    - name: Create traffic type ({{ CMConfig.Phys1TrafficType1 }}) on physical network 1 ({{ CMConfig.Phys1Name }})
      ngine_io.cloudstack.cs_traffic_type:
        physical_network: "{{ CMConfig.Phys1Name }}"
        zone: "{{ CMConfig.ZoneName }}"
        traffic_type: "{{ CMConfig.Phys1TrafficType1 }}"
        kvm_networklabel: "{{ CMConfig.Phys1TrafficType1Label }}"
  ##      xen_networklabel: "{{ CMConfig.Phys1TrafficType1Label }}"
  ##      vmware_networklabel: "{{ CMConfig.Phys1TrafficType1Label }}"

    - name: Create traffic type ({{ CMConfig.Phys1TrafficType2 }}) on physical network 1 ({{ CMConfig.Phys1Name }})
      ngine_io.cloudstack.cs_traffic_type:
        physical_network: "{{ CMConfig.Phys1Name }}"
        zone: "{{ CMConfig.ZoneName }}"
        traffic_type: "{{ CMConfig.Phys1TrafficType2 }}"
        kvm_networklabel: "{{ CMConfig.Phys1TrafficType2Label }}"
  ##      xen_networklabel: "{{ CMConfig.Phys1TrafficType2Label }}"
  ##      vmware_networklabel: "{{ CMConfig.Phys1TrafficType2Label }}"

  #  - name: Create traffic type ({{ CMConfig.Phys1TrafficType3 }}) on physical network 1 ({{ CMConfig.Phys1Name }})
  #    ngine_io.cloudstack.cs_traffic_type:
  #      physical_network: "{{ CMConfig.Phys1Name }}"
  #      zone: "{{ CMConfig.ZoneName }}"
  #      traffic_type: "{{ CMConfig.Phys1TrafficType3 }}"
  #      kvm_networklabel: "{{ CMConfig.Phys1TrafficType3Label }}"
  ##      xen_networklabel: "{{ CMConfig.Phys1TrafficType3Label }}"
  ##      vmware_networklabel: "{{ CMConfig.Phys1TrafficType3Label }}"

    - name: Enable physicalnetwork 1 ({{ CMConfig.Phys1Name }})
      ngine_io.cloudstack.cs_physical_network:
        name: "{{ CMConfig.Phys1Name }}"
        state: enabled
        nsps_enabled:
          - virtualrouter
          - securitygroupprovider
      register: net1

    - name: Print net 1 info after enabling
      ansible.builtin.debug:
        var: net1

    - name: Add guest network vlan ip range
      ngine_io.cloudstack.cs_vlan_ip_range:
        zone: "{{ CMConfig.ZoneName }}"
        start_ip: "{{ CMConfig.GuestStartIP }}"
        end_ip: "{{ CMConfig.GuestEndIP }}"
        netmask: "{{ CMConfig.GuestNetmask }}"
        for_virtual_network: no
        gateway: "{{ CMConfig.GuestGateway }}"
        physical_network: "{{ CMConfig.Phys1Name }}"
  #      vlan: "{{ CMConfig.Phys1VLANs }}"
  #      vlan: "vlan://untagged"

  #  - name: Add public network vlan ip range
  #    ngine_io.cloudstack.cs_vlan_ip_range:
  #      zone: "{{ CMConfig.ZoneName }}"
  #      start_ip: "{{ CMConfig.PublicStartIP }}"
  #      end_ip: "{{ CMConfig.PublicEndIP }}"
  #      netmask: "{{ CMConfig.PublicNetmask }}"
  #      for_virtual_network: no
  #      gateway: "{{ CMConfig.PublicGateway }}"
  #      physical_network: "{{ CMConfig.Phys1Name }}"
  ##      vlan: "{{ CMConfig.Phys1VLANs }}"

  #  - name: Ensure physical network 1 ({{ CMConfig.Phys1Name }}) is enabled with specific nsps enabled
  #    ngine_io.cloudstack.cs_physical_network:
  #      name: "{{ CMConfig.Phys1Name }}"
  #      zone: "{{ CMConfig.ZoneName }}"
  #      state: enabled
  #      nsps_enabled:
  #        - virtualrouter
  ##        - internallbvm
  ##        - vpcvirtualrouter
  #        - securitygroupprovider
  #    register: net1
  #
  #  - name: Print net 1 info after enabling
  #    ansible.builtin.debug: var=net1

  #  - name: Ensure physical network 2 ({{ CMConfig.Phys1Name }}) is enabled with specific nsps enabled
  #    ngine_io.cloudstack.cs_physical_network:
  #      name: "{{ CMConfig.Phys2Name }}"
  #      zone: "{{ CMConfig.ZoneName }}"
  #      state: enabled
  ##      nsps_enabled:
  ##        - virtualrouter
  ##        - internallbvm
  ##        - vpcvirtualrouter
  #    register: net2
  #
  #  - name: Print net 2 info after enabling
  #    ansible.builtin.debug: var=net2

    ########################################################
    ## Enable zone
    #- name: Enable zone
    #  ansible.builtin.shell: cloudmonkey update zone allocationstate=Enabled id={{ ZoneID.stdout }}
    - name: Enable zone {{ CMConfig.ZoneName }}
      ngine_io.cloudstack.cs_zone:
        name: "{{ CMConfig.ZoneName }}"
        state: enabled

  ##  - name: Create a network
  ##    ngine_io.cloudstack.cs_network:
  ##      name: my network
  ##      zone: "{{ CMConfig.ZoneName }}"
  ##      network_offering: DefaultIsolatedNetworkOfferingWithSourceNatService
  ##      network_domain: johnson.int
  ##    register: net3
  ##
  ##  - name: Print net 3 info after enabling
  ##    ansible.builtin.debug: var=net3
  #
  #  # the router is running or not.
  #  - name: Present router
  #    ngine_io.cloudstack.cs_router:
  #      name: r-1-VM
  #      service_offering: System Offering for Software Router
  #      state: started
  #    register: router1
  #
  #  - name: Create a network
  #    ngine_io.cloudstack.cs_network:
  #      name: "{{ CMConfig.NetworkName}}"
  #      zone: "{{ CMConfig.ZoneName }}"
  ##      network_offering: DefaultIsolatedNetworkOfferingWithSourceNatService
  #      network_offering: DefaultSharedNetworkOfferingWithSGService
  #      network_domain: "{{ CMConfig.NetworkDomain }}"
  #      subdomain_access: yes
  #      acl_type: domain
  #      domain: "{{ CMConfig.CSDomain }}"
  #      state: present
  #    register: net
  #
  #  - name: Print net info after enabling
  #    ansible.builtin.debug: var=net

    - name: Create a network
      ngine_io.cloudstack.cs_network:
        name: "{{ CMConfig.NetworkName }}"
        zone: "{{ CMConfig.ZoneName }}"
  #      network_offering: DefaultIsolatedNetworkOfferingWithSourceNatService
        network_offering: DefaultSharedNetworkOfferingWithSGService
        network_domain: "{{ CMConfig.NetworkDomain }}"
        subdomain_access: yes
        acl_type: domain
        domain: "{{ CMConfig.CSDomain }}"
        state: present
      register: net

    - name: Print net info after enabling
      ansible.builtin.debug:
        var: net

#########################################################
## Create pod and cluster
##
#- name: Create pod in zone 1
#  ansible.builtin.shell: cloudmonkey create pod name={{ CMConfig.PodName }} startip={{ CMConfig.PodStartIP }} endip={{ CMConfig.PodEndIP }} netmask={{ CMConfig.PodNetmask }} gateway={{ CMConfig.PodGateway }}  zoneid={{ ZoneID.stdout }} | grep ^id | awk '{print $3}'
#  register: PodID
#
#- name: Add cluster in zone 1 / pod 1
#  ansible.builtin.shell: cloudmonkey add cluster podid={{ PodID.stdout }} hypervisor={{ CMConfig.ClusterHypervisor }} clustertype=CloudManaged zoneid={{ ZoneID.stdout }} clustername={{ CMConfig.ClusterName }} | grep ^id | awk '{print $3}'
#  register: ClusterID
#
#- name: Add XS host
#  ansible.builtin.shell: cloudmonkey add host zoneid={{ ZoneID.stdout }} podid={{ PodID.stdout }}  clusterid={{ ClusterID.stdout }} hypervisor={{ CMConfig.ClusterHypervisor }} username={{ CMConfig.XSUsername }} password={{ XSPassword | mandatory }}  url=http://{{ CMConfig.XSHostIP }}
#

## ref: https://docs.ansible.com/ansible/latest/modules/cs_pod_module.html#cs-pod-module
## ref: https://github.com/resmo/ansible-cloudstack/blob/master/tests/roles/test_cs_pod/tasks/main.yml
- name: "Create pod {{ CMConfig.PodName }} in zone {{ CMConfig.ZoneName }}"
  ngine_io.cloudstack.cs_pod:
    name: "{{ CMConfig.PodName }}"
    zone: "{{ CMConfig.ZoneName }}"
    start_ip: "{{ CMConfig.PodStartIP }}"
    end_ip: "{{ CMConfig.PodEndIP }}"
    gateway: "{{ CMConfig.PodGateway }}"
    netmask: "{{ CMConfig.PodNetmask }}"
  register: pod

- name: verify setup pod is preset
  ansible.builtin.assert:
    that:
      - pod is success

## ref: https://docs.ansible.com/ansible/latest/modules/cs_cluster_module.html#cs-cluster-module
## ref: https://github.com/resmo/ansible-cloudstack/blob/master/tests/roles/test_cs_cluster/tasks/main.yml
- name: Add cluster in zone 1 / pod 1
  ngine_io.cloudstack.cs_cluster:
    name: "{{ CMConfig.ClusterName }}"
    zone: "{{ CMConfig.ZoneName }}"
    pod: "{{ CMConfig.PodName }}"
    hypervisor: "{{ CMConfig.ClusterHypervisor }}"
    cluster_type: CloudManaged
  register: cluster_origin

- name: Print cluster info
  ansible.builtin.debug:
    var: cluster_origin

- name: verify create cluster
  ansible.builtin.assert:
    that:
#      - cluster_origin is changed
      - cluster_origin.name == CMConfig.ClusterName
      - cluster_origin.zone == CMConfig.ZoneName
      - cluster_origin.allocation_state == "Enabled"
      - cluster_origin.hypervisor == CMConfig.ClusterHypervisor
      - cluster_origin.cluster_type == "CloudManaged"


#######################################################
##  Add Host
##
- name: Add Host
  ansible.builtin.include_tasks: ./add-host.yml


########################################################
## Add primary storage
##
- name: Add primary storage
  ngine_io.cloudstack.cs_storage_pool:
    name: "{{ CMConfig.PrimaryStoreName }}"
    zone: "{{ CMConfig.ZoneName }}"
    pod: "{{ CMConfig.PodName }}"
    cluster: "{{ CMConfig.ClusterName }}"
    provider: "DefaultPrimary"
    storage_url: "nfs://{{ CMConfig.NFSHost }}{{ CMConfig.NFSPrimaryShare }}"
    hypervisor: "{{ CMConfig.ClusterHypervisor }}"
  tags:
    - cmconfig-storage
    - cmconfig-primary-storage

########################################################
## Add secondary storage
##
- name: Add secondary storage
  ngine_io.cloudstack.cs_image_store:
    name: "{{ CMConfig.SecondaryStoreName }}"
    zone: "{{ CMConfig.ZoneName }}"
    provider: "NFS"
    url: "nfs://{{ CMConfig.NFSHost }}{{ CMConfig.NFSSecondaryShare }}"
  tags:
    - cmconfig-storage


########################################################
## Create template
## ref: https://docs.ansible.com/ansible/latest/modules/cs_template_module.html
##
- name: register systemvm templates
  ngine_io.cloudstack.cs_template:
    name: "{{ item.name }}"
    url: "{{ item.url }}"
    hypervisor: "{{ item.hypervisor }}"
    format: "{{ item.format }}"
    cross_zones: "{{ item.cross_zones }}"
    os_type: "{{ item.os_type }}"
  loop: "{{ VMSystemTemplates }}"
  register: template

- name: Print template info
  ansible.builtin.debug:
    var: template

---
# Takes a while for migrations to finish
- name: Wait for the environment to be ready
  ansible.builtin.uri:
    #    url: "http://localhost:8013/api/v2/ping/"
    url: http://localhost:{{ awx_host_port }}/api/v2/ping/
  register: _result
  until: _result.status == 200
  retries: 120
  delay: 5

#- name: Reset admin password
#  ansible.builtin.shell: |
#    docker exec -i {{ awx_container_prefix }}_task bash <<EOSH
#      awx-manage update_password --username=admin --password={{ awx_admin_password }}
#      awx-manage create_preload_data
#    EOSH

- name: Run create_preload_data
  changed_when: false
  ansible.builtin.shell: |
    docker exec -i {{ awx_container_prefix }}_task bash <<EOSH
      awx-manage create_preload_data
    EOSH

## ref: https://stackoverflow.com/questions/60126842/docker-the-command-returned-a-non-zero-code-137
- name: Reset admin password
  changed_when: false
  ansible.builtin.shell: |
    docker exec -i {{ awx_container_prefix }}_task bash <<EOSH
      awx-manage update_password --username=admin --password={{ awx_admin_password }}
    EOSH
  register: result
  failed_when:
    - result.rc != 0
    - result.rc != 137

- name: Launch Demo Job Template
  block:
    - name: Launch Demo Job Template
      awx.awx.job_launch:
        name: Demo Job Template
        wait: true
        validate_certs: false
        controller_host: http://localhost:{{ awx_host_port }}
        controller_username: admin
        controller_password: "{{ awx_admin_password }}"
  rescue:
    - name: Get list of project updates and jobs
      ansible.builtin.uri:
        url: http://localhost:{{ awx_host_port }}/api/v2/{{ resource }}/
        user: admin
        password: "{{ awx_admin_password }}"
        force_basic_auth: true
      register: job_lists
      loop:
        - project_updates
        - jobs
      loop_control:
        loop_var: resource

    - name: Get all job and project details
      ansible.builtin.uri:
        url: http://localhost:{{ awx_host_port }}{{ endpoint }}
        user: admin
        password: "{{ awx_admin_password }}"
        force_basic_auth: true
      loop: |
        {{ job_lists.results | map(attribute='json') | map(attribute='results') | flatten | map(attribute='url') }}
      loop_control:
        loop_var: endpoint

    - name: Re-emit failure
      vars:
        failed_task:
          result: "{{ ansible_failed_result }}"
      ansible.builtin.fail:
        msg: "{{ failed_task }}"

---

- name: "Install | Pip Libs | Display pip_env"
  debug:
    var: pip_env

- name: "Install | Pip Libs | Set __pip_version"
  set_fact:
    __pip_interpreter: "{{ pip_env.interpreter | d('/usr/bin/pip3') }}"
    __pip_version: "{{ pip_env.version | d() }}"

## ref: https://stackoverflow.com/questions/54179375/how-to-correctly-upgrade-pip-using-ansible
- name: "Pip self-update {{ __pip_interpreter }} to version {{ __pip_version }}"
  when: __pip_version|length>0
  pip:
    name: "pip=={{ __pip_version }}"
    state: present
    executable: "{{ __pip_interpreter }}"

- name: "Install | Pip Libs | Get installed pip version for {{ __pip_interpreter }}"
  command: "{{ __pip_interpreter }} --version"
  register: __pip_version_output
  ignore_errors: yes
  changed_when: false

- name: "Install | Pip Libs | Display __pip_version_output"
  debug:
    var: __pip_version_output

## ref: https://github.com/azavea/ansible-pip/blob/develop/tasks/main.yml#L23
- name: "Install | Pip Libs | Verify pip version is {{ __pip_version }}"
  when: __pip_version!='latest'
  assert:
    that: (__pip_version_output is not failed) and __pip_version_output.stdout is search('pip ' + __pip_version)
    fail_msg: |
      Pip version found {{ __pip_version_output.stdout }} does not match expected version {{ __pip_version }}.

- name: "Install | Pip Libs | Install Virtualenv"
  pip:
    name: "virtualenv"
    state: present
    executable: "{{ __pip_interpreter }}"

- name: "Install | Pip Libs | Display __bootstrap_pip_library_list_by_priority"
  debug:
    var: __bootstrap_pip_library_list_by_priority

- name: "Install | Pip Libs | Ensure pip libraries are installed for {{ __pip_interpreter }}"
  when:
    - __bootstrap_pip_library_list_by_priority[item].present is defined
    - __bootstrap_pip_library_list_by_priority[item].present.keys()|d([])|length>0
  pip:
    name: "{{ __bootstrap_pip_library_list_by_priority[item].present.keys() }}"
    state: present
    executable: "{{ __pip_interpreter }}"
  loop: "{{ __bootstrap_pip_library_list_by_priority.keys()|sort }}"
  loop_control:
    label: "package state=present priority={{ item }}"

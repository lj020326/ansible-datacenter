---

- name: "Include OS-specific variables"
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
    - "default.yml"

- name: "Display role vars"
  debug:
    var: "{{ item }}"
  loop:
    - bootstrap_pip__virtualenv_command
    - __bootstrap_pip__python_executable
    - __bootstrap_pip__pip_executable_default
    - __bootstrap_pip__pip_executable
    - __bootstrap_pip__pip_version
    - bootstrap_pip__packages
    - bootstrap_pip__config_dir
    - bootstrap_pip__version
    - bootstrap_pip__env_force_rebuild

- name: "Install pip env OS packages"
  set_fact:
    __bootstrap_pip__packages: "{{ bootstrap_pip__packages }}"

- name: "Add __bootstrap_pip__python_executable to __bootstrap_pip__packages if not python3"
  when: __bootstrap_pip__python_executable != 'python3'
  set_fact:
    __bootstrap_pip__packages: "{{ (__bootstrap_pip__packages + [__bootstrap_pip__python_executable])
      | flatten | sort | unique }}"

- name: "Display __bootstrap_pip__packages"
  debug:
    var: __bootstrap_pip__packages

- name: "Install __bootstrap_pip__packages"
  package:
    state: present
    name: "{{ __bootstrap_pip__packages }}"

## ref: https://pip.pypa.io/en/stable/topics/configuration/
- name: "Ensure /etc/pip.conf"
  copy:
    src: pip.conf
    dest: "/etc/pip.conf"
    mode: "0644"
    owner: "{{ ansible_user }}"
    backup: yes

#- name: "Create pip user config directory"
#  file:
#    path: "{{ bootstrap_pip__config_dir }}"
#    state: directory
#    mode: "0755"
#    owner: "{{ ansible_user }}"
#    group: "{{ ansible_user }}"
#
#- name: "Ensure {{ bootstrap_pip__config_dir }}//pip.conf"
#  copy:
#    src: pip.conf
#    dest: "{{ bootstrap_pip__config_dir }}/pip.conf"
#    mode: "0644"
#    owner: "{{ ansible_user }}"
#    backup: yes

- name: "Display __bootstrap_pip__libs"
  debug:
    var: __bootstrap_pip__libs

- name: "Set __bootstrap_pip__library_list_by_priority"
  set_fact:
    __bootstrap_pip__library_list_by_priority: "{{ __bootstrap_pip__library_list_by_priority | d({})
      | combine({ (item.priority | default(bootstrap_pip__lib_priority_default)|int): {
                    item.state | default(bootstrap_pip__lib_state): {
                        ((item is mapping) | ternary( item.name, item)): {}
                      }
                    }
                  }, recursive=True) }}"
  loop: "{{ __bootstrap_pip__libs }}"

- name: "Display __bootstrap_pip__library_list_by_priority"
  debug:
    var: __bootstrap_pip__library_list_by_priority

- name: "Set {{ role_name }} var prefix"
  set_fact:
    role_var_prefix: "{{ role_name | replace('-','_') }}"

- name: "Set {{ role_name }} list var prefixes"
  set_fact:
    role_pip_env_list_var_prefix: "{{ role_var_prefix }}__env_list__"

- name: "Set {{ role_name }} var regex's"
  set_fact:
    role_pip_env_list_var_regex: "^{{ role_pip_env_list_var_prefix }}"

- name: "Show variables with '{{ role_pip_env_list_var_regex }}' regex"
  debug:
    msg: "{{ lookup('varnames', role_pip_env_list_var_regex, wantlist=True) }}"

- name: "Coalesce lists from {{ role_pip_env_list_var_prefix }}* vars into merged list"
  set_fact:
    __bootstrap_pip__env_list: "{{ __bootstrap_pip__env_list|d([]) + lookup('vars', item)|d([]) }}"
  loop: "{{ lookup('varnames', role_pip_env_list_var_regex, wantlist=True) }}"

- name: "Set default env list if none defined"
  set_fact:
    __bootstrap_pip__env_list: "{{ __bootstrap_pip__env_list|d(__bootstrap_pip__env_list__default) }}"

- name: "Display __bootstrap_pip__env_list"
  debug:
    var: __bootstrap_pip__env_list

- name: "Set __bootstrap_pip__env_list_by_name for system pip"
  when: item.virtualenv is not defined
  set_fact:
    __bootstrap_pip__env_list_by_name: "{{ __bootstrap_pip__env_list_by_name | d({})
      | combine({ (item.name | item.virtualenv | d(item.pip_executable) | d(__bootstrap_pip__pip_executable) ):
        {
          'name': ((item.name | item.virtualenv | d(item.pip_executable) | d(__bootstrap_pip__pip_executable)),
          'pip_version': item.version | d(bootstrap_pip__version),
          'pip_executable': item.pip_executable | d(__bootstrap_pip__pip_executable),
          'python_executable': item.python_executable | d(__bootstrap_pip__python_executable),
        } }, recursive=True ) }}"
  loop: "{{ __bootstrap_pip__env_list }}"

- name: "Set __bootstrap_pip__env_list_by_name_yaml"
  set_fact:
    __bootstrap_pip__env_list_by_name_yaml: |-
      {
      {% for item in __bootstrap_pip__env_list %}
        {% set _bootstrap_pip_env = {} %}
        {% set _env_name = item.virtualenv | d(item.pip_executable) | d(__bootstrap_pip__pip_executable) %}
        {% set __ = _bootstrap_pip_env.update({'name': _env_name }) %}
        {% set __ = _bootstrap_pip_env.update({'pip_version': item.version | d(bootstrap_pip__version) }) %}
        {% if 'virtualenv' in item %}
          {% set __ = _bootstrap_pip_env.update({'python_executable': item.python_executable | d(item.virtualenv + '/bin/python3') }) %}
        {% else %}
          {% set __ = _bootstrap_pip_env.update({'pip_executable': item.pip_executable | d(__bootstrap_pip__pip_executable) }) %}
          {% set __ = _bootstrap_pip_env.update({'python_executable': item.python_executable | d(__bootstrap_pip__python_executable) }) %}
        {% endif %}
        {{ _env_name }}: {{ item | combine(_bootstrap_pip_env, recursive=True) }},
      {% endfor %}
      }

- name: "Set __bootstrap_pip__env_list_by_name"
  set_fact:
    __bootstrap_pip__env_list_by_name: "{{ __bootstrap_pip__env_list_by_name_yaml | from_yaml }}"

- name: "Display __bootstrap_pip__env_list_by_name"
  debug:
    var: __bootstrap_pip__env_list_by_name

- name: "Install | Install pip libs"
  include_tasks: install-pip-libs.yml
  loop: "{{ __bootstrap_pip__env_list_by_name.values() }}"
  loop_control:
    loop_var: __bootstrap_pip_env

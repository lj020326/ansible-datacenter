---

- name: "Include OS-specific variables"
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "default.yml"

- name: "Install pip env OS packages"
  package:
    state: present
    name: "{{ bootstrap_pip_packages }}"

## ref: https://pip.pypa.io/en/stable/topics/configuration/
- name: "Ensure /etc/pip.conf"
  copy:
    src: pip.conf
    dest: "/etc/pip.conf"
    mode: "0644"
    owner: "{{ ansible_user }}"
    backup: yes

#- name: "Create pip user config directory"
#  file:
#    path: "{{ bootstrap_pip_config_dir }}"
#    state: directory
#    mode: "0755"
#    owner: "{{ ansible_user }}"
#    group: "{{ ansible_user }}"
#
#- name: "Ensure {{ bootstrap_pip_config_dir }}//pip.conf"
#  copy:
#    src: pip.conf
#    dest: "{{ bootstrap_pip_config_dir }}/pip.conf"
#    mode: "0644"
#    owner: "{{ ansible_user }}"
#    backup: yes

- name: "Display bootstrap_pip_system_pip_interpreter"
  debug:
    var: bootstrap_pip_system_pip_interpreter

- name: "Display bootstrap_pip_system_pip_version"
  debug:
    var: bootstrap_pip_system_pip_version

## ref: https://stackoverflow.com/questions/54179375/how-to-correctly-upgrade-pip-using-ansible
- name: "Pip self-update to version {{ bootstrap_pip_system_pip_version }}"
  when: bootstrap_pip_system_pip_version!='latest'
  pip:
    name: "pip=={{ bootstrap_pip_system_pip_version }}"
    state: present
    executable: "{{ bootstrap_pip_system_pip_interpreter }}"

## ref: https://stackoverflow.com/questions/54179375/how-to-correctly-upgrade-pip-using-ansible
- name: "self-update {{ bootstrap_pip_system_pip_interpreter }} to latest version"
  when: bootstrap_pip_system_pip_version=='latest'
  pip:
    name: "pip"
    state: latest
    executable: "{{ bootstrap_pip_system_pip_interpreter }}"

- name: "Get installed system pip version"
  command: "{{ bootstrap_pip_system_pip_interpreter }} --version"
  register: __system_pip_version_output
  ignore_errors: yes
  changed_when: false

- name: "Display __system_pip_version_output"
  debug:
    var: __system_pip_version_output

## ref: https://github.com/azavea/ansible-pip/blob/develop/tasks/main.yml#L23
- name: "Verify pip version is {{ bootstrap_pip_system_pip_version }}"
  when: bootstrap_pip_system_pip_version!='latest'
  assert:
    that: (__system_pip_version_output is not failed) and __system_pip_version_output.stdout is search('pip ' + bootstrap_pip_system_pip_version)
    fail_msg: |
      Pip version found {{ __system_pip_version_output.stdout }} does not match expected version {{ bootstrap_pip_system_pip_version }}.


## ref: https://stackoverflow.com/questions/54179375/how-to-correctly-upgrade-pip-using-ansible
- name: "Pip self-update {{ bootstrap_pip_interpreter }} to version {{ bootstrap_pip_version }}"
  when: bootstrap_pip_version!='latest'
  pip:
    name: "pip=={{ bootstrap_pip_version }}"
    state: present
    executable: "{{ bootstrap_pip_interpreter }}"

## ref: https://stackoverflow.com/questions/54179375/how-to-correctly-upgrade-pip-using-ansible
- name: "Pip self-update {{ bootstrap_pip_interpreter }} to latest version"
  when: bootstrap_pip_version=='latest'
  pip:
    name: "pip"
    state: latest
    executable: "{{ bootstrap_pip_interpreter }}"

- name: "Get installed pip version for {{ bootstrap_pip_interpreter }}"
  command: "{{ bootstrap_pip_interpreter }} --version"
  register: __pip_version_output
  ignore_errors: yes
  changed_when: false

- name: "Display __pip_version_output"
  debug:
    var: __pip_version_output

## ref: https://github.com/azavea/ansible-pip/blob/develop/tasks/main.yml#L23
- name: "Verify pip version is {{ bootstrap_pip_version }}"
  when: bootstrap_pip_version!='latest'
  assert:
    that: (__pip_version_output is not failed) and __pip_version_output.stdout is search('pip ' + bootstrap_pip_version)
    fail_msg: |
      Pip version found {{ __pip_version_output.stdout }} does not match expected version {{ bootstrap_pip_version }}.

- name: "Install Virtualenv"
  pip:
    name: "virtualenv"
    state: present
    executable: "{{ bootstrap_pip_interpreter }}"

- name: "Display bootstrap_pip_libs"
  debug:
    var: bootstrap_pip_libs

- name: "Set __bootstrap_pip_list_by_priority"
  set_fact:
    __bootstrap_pip_list_by_priority: "{{ __bootstrap_pip_list_by_priority | d({})
      | combine({ (item.priority | default(bootstrap_pip_lib_priority_default)|int): {
                    item.state | default(bootstrap_pip_lib_state): {
                        ((item is mapping) | ternary( item.name, item)): {}
                      }
                    }
                  }, recursive=True) }}"
  loop: "{{ bootstrap_pip_libs }}"

- name: "Ensure pip packages are installed for {{ bootstrap_pip_system_pip_interpreter }}"
  when:
    - __bootstrap_pip_list_by_priority[item].present is defined
    - __bootstrap_pip_list_by_priority[item].present.keys()|d([])|length>0
  pip:
    name: "{{ __bootstrap_pip_list_by_priority[item].present.keys() }}"
    state: present
    executable: "{{ bootstrap_pip_system_pip_interpreter }}"
  loop: "{{ __bootstrap_pip_list_by_priority.keys()|sort }}"
  loop_control:
    label: "package state=present priority={{ item }}"

- name: "Ensure pip packages are installed for {{ bootstrap_pip_interpreter }}"
  when:
    - __bootstrap_pip_list_by_priority[item].present is defined
    - __bootstrap_pip_list_by_priority[item].present.keys()|d([])|length>0
  pip:
    name: "{{ __bootstrap_pip_list_by_priority[item].present.keys() }}"
    state: present
    executable: "{{ bootstrap_pip_interpreter }}"
  loop: "{{ __bootstrap_pip_list_by_priority.keys()|sort }}"
  loop_control:
    label: "package state=present priority={{ item }}"

#- name: "Install pip libs"
#  when: bootstrap_pip_libs|d([])|length>0
#  pip:
#    name: "{{ bootstrap_pip_libs }}"
#    state: present
#    executable: "{{ bootstrap_pip_interpreter }}"
#
##- name: "Ensure bootstrap_pip_packages are installed."
##  pip:
##    name: "{{ item.name | default(item) }}"
##    version: "{{ item.version | default(omit) }}"
##    virtualenv: "{{ item.virtualenv | default(omit) }}"
##    virtualenv_site_packages: yes
##    state: "{{ item.state | default(omit) }}"
##    executable: "{{ bootstrap_pip_interpreter }}"
##  loop: "{{ bootstrap_pip_packages }}"

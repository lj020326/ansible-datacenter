---

__docker_stack__supported_actions:
  - setup
  - start
  - restart
  - stop
  - up
  - down

docker_stack__environment: DEV

docker_stack__network_subnet__default: 192.168.10.0/24
docker_stack__network_subnet__socket_proxy: 192.168.11.0/24
docker_stack__network_subnet__traefik_proxy: 192.168.12.0/24
docker_stack__network_subnet__vpn: 192.168.13.0/24

docker_stack__action: setup
docker_stack__swarm_mode: false
docker_stack__swarm_manager: false
#docker_stack__swarm_leader_host: leader.example.int

#docker_stack__debug_mode: false
docker_stack__debug_mode: true

docker_stack__setup_external_site: true
docker_stack__enable_cert_resolver: true

##################
## NOTE: the following 2 ca vars get overridden by vars/os_distribution/*.yml
__docker_stack__ca_cert_bundle_default: /etc/pki/tls/certs/ca-bundle.crt
#__docker_stack__ca_cert_bundle_default: "/etc/ssl/certs/ca-certificates.crt"
__docker_stack__ca_java_keystore_default: /etc/pki/ca-trust/extracted/java/cacerts

__docker_stack__ca_cert_bundle: "{{ docker_stack__ca_cert_bundle | d(__docker_stack__ca_cert_bundle_default) }}"
__docker_stack__ca_java_keystore: "{{ docker_stack__ca_java_keystore | d(__docker_stack__ca_java_keystore_default) }}"

#################
## log prefixes
__docker_stack__log_prefix__init_vars: Docker Stack | Init Vars |
__docker_stack__log_prefix__app_config: Docker Stack | Setup App Configs |
__docker_stack__log_prefix__service_config: Docker Stack | Setup Service Configs |
__docker_stack__log_prefix__run_compose: Docker Stack | Run Compose |
__docker_stack__log_prefix__setup_cacert: Docker Stack | Setup CA Certs |
__docker_stack__log_prefix__self_signed_cert: Docker Stack | Setup Self-Signed Certs |
__docker_stack__log_prefix__container_config: Docker Stack | Setup Container Configs |
__docker_stack__log_prefix__restart_daemon: Docker Stack | Restart Docker Daemon |
__docker_stack__log_prefix__handle_service_exc: Docker Stack | Handle Service Config Exception |
__docker_stack__log_prefix__setup_firewalld: Docker Stack | Setup Firewall |
__docker_stack__log_prefix__stop_services: Docker Stack | Stop Docker Services |
__docker_stack__log_prefix__setup_systemd_service: Docker Stack | Setup Systemd Service |

#############
### This is the key role input dictionary used
#############
docker_stack__service_groups: []
#docker_stack__service_groups:
#  - name: base
#    source: role

docker_stack__traefik_routing_method: dns
#docker_stack__traefik_routing_method: path

docker_stack__proxy_services: []
#docker_stack__traefik_version: v1
#docker_stack__traefik_version: v2
docker_stack__traefik_version: v3

#docker_stack__traefik_image: traefik:latest
#docker_stack__traefik_image: traefik:v2.9.6
#docker_stack__traefik_image: traefik:v2.10.1
#docker_stack__traefik_image: traefik:v2.11.6
## ref: https://doc.traefik.io/traefik/v3.0/migration/v2-to-v3/#docker-docker-swarm
docker_stack__traefik_image: traefik:v3.1

docker_stack__traefik_http: 80
docker_stack__traefik_https: 443
docker_stack__traefik_https_suffix: "{{ ':' + docker_stack__traefik_https|string if docker_stack__traefik_https|string != '443' else '' }}"

docker_stack__traefik_ssh: 2022

docker_stack__acme_http_challenge_proxy_port: 8980

#docker_stack__enable_cacerts: no
#docker_stack__enable_selfsigned_certs: yes
docker_stack__enable_cacerts: true
docker_stack__enable_selfsigned_certs: false

docker_stack__setup_registry: false
docker_stack__setup_admin_scripts: true
#docker_stack__setup_systemd_service: true
docker_stack__setup_systemd_service: false

docker_stack__compose_stack_name: docker_stack
docker_stack__compose_stack_compose_file: "{{ docker_stack__dir }}/docker-compose.yml"
docker_stack__compose_stack_prune: true
docker_stack__compose_stack_resolve_image: changed

docker_stack__compose_http_timeout: 120

#__docker_stack__port_mode_default: "{{ 'swarm' if docker_stack__swarm_mode|d(False)|bool else 'host' }}"
#__docker_stack__port_mode_default: "{{ 'global' if docker_stack__swarm_mode|d(False)|bool else 'host' }}"
__docker_stack__port_mode_default: host
__docker_stack__port_mode: "{{ docker_stack__port_mode | d(__docker_stack__port_mode_default) }}"

#############
## LDAP domain config - ldap vars used in multiple stacks
#############
docker_stack__ldap_host: ldap.example.int
docker_stack__ldap_port: "389"
docker_stack__ldap_uri: ldap://{{ docker_stack__ldap_host }}:{{ docker_stack__ldap_port }}
docker_stack__ldap_organisation: Example LLC
docker_stack__ldap_domain: example.int
docker_stack__ldap_admin_password: password
docker_stack__ldap_config_password: passsword
docker_stack__ldap_bind_user_username: readonly
docker_stack__ldap_bind_user_password: f00b4r!23

docker_stack__ldap_base_dn: dc=example,dc=int

docker_stack__ldap_group_users_gid: 502

docker_stack__ldap_group_ou: groups
docker_stack__ldap_group_base_dn: ou={{ docker_stack__ldap_group_ou }},{{ docker_stack__ldap_base_dn }}
docker_stack__ldap_user_ou: users
docker_stack__ldap_user_base_dn: ou={{ docker_stack__ldap_user_ou }},{{ docker_stack__ldap_base_dn }}
docker_stack__ldap_idmap_ou: Idmap
docker_stack__ldap_idmap_base_dn: ou={{ docker_stack__ldap_idmap_ou }},{{ docker_stack__ldap_base_dn }}

docker_stack__ldap_computer_base_ou: computers
docker_stack__ldap_computer_base_dn: ou={{ docker_stack__ldap_computer_base_ou }},{{ docker_stack__ldap_base_dn }}
docker_stack__ldap_host_base_ou: hosts
docker_stack__ldap_host_base_dn: ou={{ docker_stack__ldap_host_base_ou }},{{ docker_stack__ldap_base_dn }}

#docker_stack__ldap_search_user_cn: "search"
#docker_stack__ldap_search_user_dn: "cn={{ docker_stack__ldap_search_user_cn }},{{ docker_stack__ldap_base_dn }}"
#docker_stack__ldap_search_user_password: "DaBc$3412"

docker_stack__ldap_samba_sid_root: S-1-5-21-1234567890-0987654321-0123456789
#docker_stack__ldap_samba_primary_group_sid: "{{ docker_stack__ldap_samba_sid_root }}-1234"
#docker_stack__ldap_samba_admin_sid: "S-1-5-21-1234567890-0987654321-0123456789-500"
#docker_stack__ldap_samba_domain_hosts_samba_sid: "{{ docker_stack__ldap_samba_sid_root }}-515"

docker_stack__ldap_user_smb_base_dir: \\samba.{{ docker_stack__ldap_domain }}
docker_stack__ldap_user_smb_profile_base: "{{ docker_stack__ldap_user_smb_base_dir }}\\profiles"

#docker_stack__ldap_user_root_samba_nt_password: "ertRgh%yr54t34Trf"
#docker_stack__ldap_user_root_password: "4werPoidfk!jhy8"

##############
### LDAP domain admin info
##############
#docker_stack__ldap_user_domain_admin_uid: "netadmin"
#docker_stack__ldap_user_domain_admin_dn: "uid={{ docker_stack__ldap_user_domain_admin_uid }},{{ docker_stack__ldap_user_base_dn }}"
#docker_stack__ldap_user_domain_admin_samba_nt_password: "ertRgh%yr54t34Trf"
#docker_stack__ldap_user_domain_admin_samba_hosts: "vm10,vm11,ljlaptop,oradb1,plex,samba,vcenter"
#docker_stack__ldap_user_domain_admin_password: "4werPoidfk!jhy8"
#docker_stack__ldap_user_domain_admin_ssh_public_key: "publickeyhere"

#############
## openLDAP domain config
#############
docker_stack__openldap__debug: true
#docker_stack__openldap__debug: false

## ref: https://serverfault.com/questions/885324/background-on-sambasid-calculation
docker_stack__ldap_domain_sid_root: S-1-5-21-1234567890-5678912345-987654321

docker_stack__ldap_domain_user_object_class_list_default:
  - inetOrgPerson
  - organizationalPerson
  - person
  - posixAccount
  - sambaSamAccount
  - shadowAccount

docker_stack__ldap_domain_group_object_class_list_default:
  - top
  - posixGroup

docker_stack__ldap_domain_host_object_class_list_default:
  - account
  - posixAccount
  - sambaSamAccount

docker_stack__ldap_samba_domain_map: {}
docker_stack__ldap_domain_ou_map:
  groups: {}
  users: {}
  Idmap: {}
  hosts: {}
  computers: {}
docker_stack__ldap_base_user_map:
  search:
    username: search
    ssha_password: "{ssha}GSmbWLYqiCMjPSJobxU4rfd/4fRX8okq3Zb4g=="
    description: LDAP read only user
    object_class_list:
      - organizationalRole
      - simpleSecurityObject

docker_stack__ldap_domain_user_map: {}
#docker_stack__ldap_domain_user_map:
#  ljohnson:
#    username: ljohnson
#    uid_number: 10100
#    display_name: Lee Johnson
#    initials: LJ
#    mail: ljohnson@example.org
#    groups:
#      - smbuser
#    samba:
#      sid: "{{ docker_stack__ldap_samba_sid_root }}-10100"
#      nt_password: "A9658B834645YT9E2AA7BBB4D0286DDA4"
#      workstations: "ljlaptop,oradb1,vcenter"
#    ssha_password: "{SSHA}BMUL5QS4Oas2xvFQ+J6sdDZHaAWNtWQ=="
#    ssh_public_key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMX0dPcvoiLIR3qdv+FXLE/yia
#      3pC3w+tJCGs36b5OmKZDkElfR8+LtuYyX6Rb lee.james.johnson@gmail.com

docker_stack__ldap_domain_group_map: {}
docker_stack__ldap_domain_host_map: {}
######################
######################
docker_stack__run_services: true
#docker_stack__run_services: no
#docker_stack__restart_service: no
docker_stack__restart_service: true
docker_stack__systemd_service_timeout_sec: 900

docker_stack__network_name__traefik_proxy: traefik_public
docker_stack__network_name__socket_proxy: socket_proxy
docker_stack__network_name__default: net

docker_stack__networks: {}
#docker_stack__volumes:
#  prometheus: {}
#  grafana: {}
#  alertmanager: {}
#  keycloak_data: {}
##  bacula_pgdata: {}
##  postgres_data:
##      driver: local
##  gitea:
##    driver: local

docker_stack__volumes: {}
docker_stack__configs: {}
#docker_stack__configs:
#  dockerd_config:
#    file: ./dockerd-exporter/Caddyfile
#  node_rules:
#    file: ./prometheus/rules/swarm_node.rules.yml
#  task_rules:
#    file: ./prometheus/rules/swarm_task.rules.yml

#####################
## container user
docker_stack__user_username: container-user
docker_stack__user_password: container-user
docker_stack__user_group: container-user
docker_stack__user_uid: 1006
docker_stack__user_gid: 1006

#docker_stack__user_username: docker-user
#docker_stack__user_password: docker-user
#docker_stack__user_group: docker-user

#docker_stack__docker_group_gid: 497
docker_stack__docker_group_gid: 991

docker_stack__container_user_home: /var/internaluser
docker_stack__user_home: /home/{{ docker_stack__user_username }}

docker_stack__config_users_passwd: |
  {{ docker_stack__user_username }}:x:{{ docker_stack__user_uid }}:{{ docker_stack__user_gid }}::{{ docker_stack__container_user_home }}:/bin/bash

docker_stack__config_users_group: |
  {{ docker_stack__user_username }}:x:{{ docker_stack__user_gid }}:

## docker stack vars
docker_stack__dir: "{{ docker_stack__user_home }}/docker"
docker_stack__compose_file: "{{ docker_stack__dir }}/docker-compose.yml"
docker_stack__remove_orphans: true

docker_stack__ca_root_cn: ca-root

docker_stack__acme_email: admin@example.int

docker_stack__internal_root_domain: example.int
docker_stack__external_root_domain: example.com

docker_stack__service_route_name: "{{ inventory_hostname_short }}"
#docker_stack__internal_domain: "{{ inventory_hostname }}.{{ docker_stack__internal_root_domain }}"
#docker_stack__external_domain: "{{ inventory_hostname }}.{{ docker_stack__external_root_domain }}"
docker_stack__internal_domain: "{{ docker_stack__service_route_name }}.{{ docker_stack__internal_root_domain }}"
docker_stack__external_domain: "{{ docker_stack__service_route_name }}.{{ docker_stack__external_root_domain }}"
#docker_stack__external_domain: "{{ docker_stack__external_root_domain }}"

docker_stack__enable_external_route: false

awx_orig_enabled: false
awx_orig_dockerhub_version: 17.1.0
awx_orig_web_image: awx
awx_orig_task_image: awx
awx_orig_postgresql_version: "14.2"

awx_orig_docker_compose_dir: "{{ awx_inventory_dir }}/awxcompose-orig"
awx_orig_project_data_dir: "{{ awx_orig_docker_compose_dir }}/projects"
awx_orig_postgres_data_dir: "{{ awx_inventory_dir }}/pgdocker-orig"
awx_orig_host_port: 10080
awx_orig_host_port_ssl: 10443
awx_orig_memcached_port: 11211
awx_orig_pg_port: 6432
#awx_orig_pg_port: 7432
awx_orig_container_prefix: awx_orig
awx_orig_pg_password: awxpass

awx_orig_container_config_templates:
  - file: environment.sh
    mode: "0600"
  - file: credentials.py
    mode: "0600"
  - file: docker-compose.yml
    mode: "0600"
  - file: nginx.conf
    mode: "0600"
  - file: redis.conf
    mode: "0664"
  - file: settings.py
    mode: "0664"

awx_orig_web_volumes:
  - supervisor-socket:/var/run/supervisor
  - rsyslog-socket:/var/run/awx-rsyslog/
  - rsyslog-config:/var/lib/awx/rsyslog/
  - "{{ awx_docker_compose_dir }}/SECRET_KEY:/etc/tower/SECRET_KEY"
  - "{{ awx_docker_compose_dir }}/environment.sh:/etc/tower/conf.d/environment.sh"
  - "{{ awx_docker_compose_dir }}/credentials.py:/etc/tower/conf.d/credentials.py"
  #      - "{{ awx_docker_compose_dir }}/settings.py:/etc/tower/conf.d/settings.py"
  - "{{ awx_docker_compose_dir }}/nginx.conf:/etc/nginx/nginx.conf:ro"
  - "{{ awx_docker_compose_dir }}/redis_socket:/var/run/redis/:rw"

docker_stack__awx_backend: http://{{ docker_stack__internal_domain }}:{{ awx_host_port }}
docker_stack__awx_orig_backend: http://{{ docker_stack__internal_domain }}:{{ awx_orig_host_port }}
docker_stack__nginx_backend: https://nginx.example.int

docker_stack__stepca_use_host_cacerts: false
docker_stack__stepca_enable_signed: false
docker_stack__stepca_ca_force_create: false

## SSL settings
docker_stack__internal_ssl_cert_dir: /usr/local/ssl/certs
docker_stack__internal_ssl_certkey_dir: /usr/local/ssl/private
#docker_stack__internal_ssl_certkey_dir: "/etc/ssl/private"
#docker_stack__internal_ssl_cert_dir: "/etc/ssl/crt"

#docker_stack__ssl_internal_cacert_file: "ca.{{ docker_stack__internal_root_domain }}.pem"
docker_stack__ssl_internal_root_cacert_file: ca.{{ docker_stack__internal_root_domain }}.pem
docker_stack__ssl_internal_cacert_file: ca.{{ docker_stack__internal_domain }}.pem

#docker_stack__ssl_internal_cert_file: "{{ hostname_name_full }}.pem"
docker_stack__ssl_internal_cert_file: "{{ docker_stack__internal_domain }}.chain.pem"
#docker_stack__ssl_internal_cert_file: "{{ docker_stack__internal_domain }}.pem"
docker_stack__ssl_internal_csr_file: "{{ docker_stack__internal_domain }}.csr"

#docker_stack__ssl_internal_privatekey_file: "{{ hostname_name_full }}-key.pem"
docker_stack__ssl_internal_privatekey_file: "{{ docker_stack__internal_domain }}-key.pem"

docker_stack__external_ssl_cert_dir: "{{ docker_stack__dir }}/shared/certs"
docker_stack__external_ssl_certkey_dir: "{{ docker_stack__dir }}/shared/certs"

docker_stack__ssl_external_cert_file: "{{ docker_stack__external_domain }}.pem"
docker_stack__ssl_external_privatekey_file: "{{ docker_stack__external_domain }}-key.pem"

docker_stack__cloudflare_email: user@example.com
docker_stack__cloudflare_apikey: "000000000000000000000000000000011111"

docker_stack__script_dir: /opt/scripts

docker_stack__wordpress_db_user: wordpress
docker_stack__wordpress_db_password: passswOrd

docker_stack__phpmyadmin_port: 8802

docker_stack__jenkins_vmware_data_dir: /export/data/vmware

docker_stack__api_port: "2375"

docker_stack__app_config_dirs: {}
docker_stack__config_dirs: []
docker_stack__app_config_tpls: {}
docker_stack__app_config_files: {}
docker_stack__config_files: []
docker_stack__script_dirs:
  - path: "{{ docker_stack__script_dir }}"
    recurse: true

#docker_stack__scripts: []
docker_stack__scripts:
  - src: files/scripts/deploy-stack.sh
    dest: "{{ docker_stack__dir }}/deploy-stack.sh"
  - src: files/scripts/recreate-stack.sh
    dest: "{{ docker_stack__dir }}/recreate-stack.sh"
  - src: files/scripts/wait-for-it.sh
    dest: "{{ docker_stack__dir }}/wait-for-it.sh"
  - src: files/scripts/docker-image-sync.sh
    dest: "{{ docker_stack__dir }}/docker-image-sync.sh"
  - src: files/scripts/docker-image-pull-curl.sh
    dest: "{{ docker_stack__dir }}/docker-image-pull-curl.sh"
#  - src: 'files/mono_image/entrypoint.sh'
#    dest: "{{ docker_stack__script_dir }}/mono-entrypoint.sh"

docker_stack__service_templates:
  - src: compose.env.j2
    dest: "{{ __docker_stack__base__stack_dir }}/.env"
  - src: docker-compose.yml.j2
    dest: "{{ __docker_stack__base__stack_dir }}/docker-compose.yml"
  - src: scripts/deploy-stack.cfg.j2
    dest: "{{ docker_stack__dir }}/deploy-stack.cfg"

docker_stack__proxy_service_templates:
  - src: traefik/rules/proxy-services.yml.j2
    dest: "{{ __docker_stack__base__traefik_dir }}/rules/proxy-services.yml"

docker_stack__script_config_tpls: []
#  - { src: 'scripts/backups.cfg.j2', dest: "/root/.backups.cfg", mode: "0600" }
#  - { src: 'scripts/fwbackup.conf.j2', dest: "/root/.fwbackup.cfg", mode: "0600" }

docker_stack__email_from: admin@example.com
docker_stack__email_to: admin@example.com
docker_stack__email_default_suffix: "@example.com"

docker_stack__email_jenkins_admin_address: admin@example.com

docker_stack__smtp_host: mail.example.int

docker_stack__firewalld_enabled: true

docker_stack__firewalld_services: []
docker_stack__firewalld_app_services: {}
docker_stack__firewalld_app_ports: {}
#overwrite_configs: yes
## used from setting up registry service instance
#docker_stack__registry_service_name: "registry"
docker_stack__registry_service_domain: "{{ docker_stack__internal_domain }}"

## set registry endpoint namespace
## defaults to use docker hub endpoint namespace at `lj020326`
#docker_stack__registry_endpoint: "example.int:5000"
docker_stack__registry_endpoint: lj020326
#docker_stack__registry_url: "https://{{ docker_stack__registry_endpoint }}/v2/"

docker_stack__registry_login: false
docker_stack__registry_username: user
docker_stack__registry_password: password

docker_stack__service_group_configs_tpl: {}
docker_stack__config_tpls: []
docker_stack__container_configs: {}
######
## base docker stack configs
######

docker_stack__timezone: America/New_York

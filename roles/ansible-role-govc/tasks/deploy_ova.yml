# Copyright Â© 2017 VMware, Inc. All Rights Reserved.
# SPDX-License-Identifier: MIT OR GPL-3.0-only
---

- name: Check for existing VM
  command: "{{ govc_file }} vm.info {{ item.name |quote }}"
  environment:
    GOVC_HOST: "{{ govc_host }}"
    GOVC_URL: "https://{{ govc_host }}/sdk"
    GOVC_USERNAME: "{{ govc_username }}"
    GOVC_PASSWORD: "{{ govc_password }}"
    GOVC_INSECURE: "{{ govc_insecure }}"
    GOVC_DATASTORE: "{{ govc_datastore }}"
    GOVC_DATACENTER: "{{ govc_datacenter }}"
  changed_when: false
  register: govc_vm_info
  with_items: "{{ govc_ova_imports }}"

- debug: msg="{{ govc_vm_info }}"

# unless vm by this name already exists, import ova
- name: Import OVA
  command: >
    {{ govc_file }} import.ova
    {% if item.0.spec is defined %}
      -options={{ item.0.spec }}
    {% endif %}
    -name={{ item.0.name |quote }}
    {{ item.0.ova |quote }}
  environment:
    GOVC_HOST: "{{ govc_host }}"
    GOVC_URL: "https://{{ govc_host }}/sdk"
    GOVC_USERNAME: "{{ govc_username }}"
    GOVC_PASSWORD: "{{ govc_password }}"
    GOVC_INSECURE: "{{ govc_insecure }}"
    GOVC_DATASTORE: "{{ govc_datastore }}"
    GOVC_DATACENTER: "{{ govc_datacenter }}"
    GOVC_CLUSTER: "{{ govc_cluster }}"
  register: command_result
  when: "item.1.rc != 0 or 'UUID' not in item.1.stdout"

  with_together:
    - "{{ govc_ova_imports }}"
    - "{{ govc_vm_info.results }}"

- debug: msg="{{ command_result }}"

- name: On Import Failed
  fail:
    msg: "Failed to import vm {{ item.item.0.name }}"
  when: "item.skipped is defined and not item.skipped and item.rc != 0"
  with_items: "{{ command_result.results }}"

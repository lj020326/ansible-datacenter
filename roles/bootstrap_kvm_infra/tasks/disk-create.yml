---
# Create the disks for VMs
# We only create disks if they don't already exist
# and if the VM is not going to be undefined
# Disks have the option to be kept, so we need to check for boot
# If boot already exists and it's set to keep, we don't sysprep it
# Ideally, boot should be defined first in virt_infra_disks so that it's /dev/sda

- name: Check if boot disk already exists
  when:
    - inventory_hostname not in groups['kvmhost']
    - inventory_hostname not in hostvars[groups['kvmhost'][0]].result_all_vms.list_vms
  ansible.builtin.stat:
    path: "{{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ inventory_hostname }}-boot.qcow2"
  register: result_stat_boot
  delegate_to: "{{ groups['kvmhost'][0] }}"

- name: Check if boot disk is set to keep
  when:
    - inventory_hostname not in groups['kvmhost']
    - inventory_hostname not in hostvars[groups['kvmhost'][0]].result_all_vms.list_vms
    - item.name == "boot"
    - item.keep is defined and item.keep
  ansible.builtin.set_fact:
    keep_boot: "{{ item.keep }}"
  loop: "{{ virt_infra_disks }}"

- name: Create disks for VM
  when:
    - inventory_hostname not in groups['kvmhost']
    - inventory_hostname not in hostvars[groups['kvmhost'][0]].result_all_vms.list_vms
    - virt_infra_state != "undefined"
  ansible.builtin.command: >
    qemu-img create -f qcow2
    {% if item.name == 'boot' %}
    -b {{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ virt_infra_distro_image }} -F qcow2
    {% endif %}
    {{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ inventory_hostname }}-{{ item.name }}.qcow2
    {{ item.size | default(virt_infra_disk_size) }}G
  args:
    creates: "{{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ inventory_hostname }}-{{ item.name }}.qcow2"
  register: result_disk_create
  become: true
  delegate_to: "{{ groups['kvmhost'][0] }}"
  loop: "{{ virt_infra_disks }}"

# Due to the way NVME works with qemu (as args),
# we need specific permissions on the image
- name: Set permissions on NVMe disk images
  when:
    - inventory_hostname not in groups['kvmhost']
    - inventory_hostname not in hostvars[groups['kvmhost'][0]].result_all_vms.list_vms
    - virt_infra_state != "undefined"
    - item.bus is defined and item.bus == "nvme"
  ansible.builtin.file:
    path: "{{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ inventory_hostname }}-{{ item.name }}.qcow2"
    owner: "{{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_owner | default('root') }}"
    group: "{{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_group | default('qemu') }}"
    mode: "{{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_mode | default('0660') }}"
  become: true
  delegate_to: "{{ groups['kvmhost'][0] }}"
  loop: "{{ virt_infra_disks }}"

## Create cloudinit iso
- name: Create temporary dir to build cloud-init config
  when:
    - inventory_hostname not in groups['kvmhost']
    - inventory_hostname not in hostvars[groups['kvmhost'][0]].result_all_vms.list_vms
    - virt_infra_state != "undefined"
  ansible.builtin.tempfile:
    state: directory
    suffix: cloudinit
  register: result_tempdir
  become: true
  delegate_to: "{{ groups['kvmhost'][0] }}"

- name: Create cloud init meta-data for guest
  when:
    - inventory_hostname not in groups['kvmhost']
    - inventory_hostname not in hostvars[groups['kvmhost'][0]].result_all_vms.list_vms
    - virt_infra_state != "undefined"
  ansible.builtin.template:
    src: templates/meta-data.j2
    dest: "{{ result_tempdir.path }}/meta-data"
    mode: '0644'
  become: true
  delegate_to: "{{ groups['kvmhost'][0] }}"

- name: Create cloud init user-data for guest
  when:
    - inventory_hostname not in groups['kvmhost']
    - inventory_hostname not in hostvars[groups['kvmhost'][0]].result_all_vms.list_vms
    - virt_infra_state != "undefined"
  ansible.builtin.template:
    src: templates/user-data.j2
    dest: "{{ result_tempdir.path }}/user-data"
    mode: '0644'
  become: true
  delegate_to: "{{ groups['kvmhost'][0] }}"

- name: Make cloud-init iso for guest
  when:
    - inventory_hostname not in groups['kvmhost']
    - inventory_hostname not in hostvars[groups['kvmhost'][0]].result_all_vms.list_vms
    - virt_infra_state != "undefined"
  ansible.builtin.shell: >
    {{ hostvars[groups['kvmhost'][0]].virt_infra_mkiso_cmd | default(virt_infra_mkiso_cmd) }} -J -l -R -V "cidata" -iso-level 4
    -o {{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ inventory_hostname }}-cloudinit.iso
    {{ result_tempdir.path }}/user-data
    {{ result_tempdir.path }}/meta-data
  args:
    creates: "{{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ inventory_hostname }}-cloudinit.iso"
    executable: /bin/bash
  become: true
  delegate_to: "{{ groups['kvmhost'][0] }}"

- name: Clean up temporary dir
  when:
    - inventory_hostname not in groups['kvmhost']
    - result_tempdir.path is defined
  ansible.builtin.file:
    path: "{{ result_tempdir.path }}"
    state: absent
  become: true
  delegate_to: "{{ groups['kvmhost'][0] }}"

- name: Install cloud-init and qemu-guest-agent in guest disk
  when:
    - inventory_hostname not in groups['kvmhost']
    - inventory_hostname not in hostvars[groups['kvmhost'][0]].result_all_vms.list_vms
    - virt_infra_state != "undefined"
    - not result_stat_boot.stat.exists or (result_stat_boot.stat.exists and (keep_boot is not defined or keep_boot is defined and not keep_boot))
    - not ((virt_infra_variant is defined and 'rhel' in virt_infra_variant) and (virt_infra_sm_creds is undefined or virt_infra_sm_creds is defined and not virt_infra_sm_creds))
  changed_when: false
  ansible.builtin.command: >
    virt-customize
    -a {{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ inventory_hostname }}-boot.qcow2
    {% if virt_infra_sm_creds is defined and virt_infra_sm_creds %}
    --sm-register
    --sm-credentials {{ virt_infra_sm_creds }}
    --sm-attach {{ virt_infra_sm_attach | default("auto") }}
    {% endif %}
    --install qemu-guest-agent,cloud-init
  register: result_disk_deps
  retries: 10
  delay: 2
  until: result_disk_deps is succeeded
  become: true
  delegate_to: "{{ groups['kvmhost'][0] }}"

- name: Remove RHEL registration
  when:
    - inventory_hostname not in groups['kvmhost']
    - inventory_hostname not in hostvars[groups['kvmhost'][0]].result_all_vms.list_vms
    - virt_infra_sm_creds is defined and virt_infra_sm_creds
    - virt_infra_state != "undefined"
  changed_when: false
  ansible.builtin.command: >
    virt-customize
    -a {{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ inventory_hostname }}-boot.qcow2
    {% if virt_infra_sm_creds is defined and virt_infra_sm_creds %}
    --sm-remove
    --sm-unregister
    --sm-credentials {{ virt_infra_sm_creds }}
    {% endif %}
  register: result_disk_unregister
  retries: 10
  delay: 2
  until: result_disk_unregister is succeeded
  become: true
  delegate_to: "{{ groups['kvmhost'][0] }}"

- name: Sysprep guest disk
  when:
    - inventory_hostname not in groups['kvmhost']
    - inventory_hostname not in hostvars[groups['kvmhost'][0]].result_all_vms.list_vms
    - not result_stat_boot.stat.exists or (result_stat_boot.stat.exists and keep_boot is not defined or keep_boot is defined and not keep_boot)
    - virt_infra_state != "undefined"
  changed_when: false
  ansible.builtin.command: >
    virt-sysprep
    --selinux-relabel
    {% if virt_infra_root_password is defined and virt_infra_root_password %}
    --root-password password:{{ virt_infra_root_password }}
    {% endif %}
    --add {{ hostvars[groups['kvmhost'][0]].virt_infra_host_image_path | default(virt_infra_host_image_path) }}/{{ inventory_hostname }}-boot.qcow2
  register: result_disk_sysprep
  become: true
  delegate_to: "{{ groups['kvmhost'][0] }}"

---
- name: (network) get portgroups list
  # skip header (first 2 lines) and Management, print group, vswitch and vlan tag
  ansible.builtin.shell: |
    set -o pipefail # <-- adding this will prevent surprises
    esxcli network vswitch standard portgroup list | awk -F'  +' 'NR > 2 \
      && !/^(Management Network) / {print $2, $4, $3, $1}'
  register: portgroup_list_res
  changed_when: false
  check_mode: false

- name: (network) convert portgroup list to structure
  ansible.builtin.set_fact:
    # steps:
    # - split to to array of tuples like ['adm-srv', 'vSwitch0', '210']
    # - convert to records like {'name': 'adm-srv', 'switch': 'vSwitch0', 'tag': '210'}
    # - convert list of those records to dict keyed by name
    #   - alt: replace "to_dict()" by "list" to get a list of records)
    # - result is structured like 'esxi_portgroups' from group_vars (keyed by name)
    portgroups: "{{ portgroup_list_res.stdout_lines
                    | map('split', ' ', 3)
                    | map('record', ['vswitch', 'tag', 'clients', 'name'])
                    | to_dict('name') }}"
    pgmod: esxcli network vswitch standard portgroup

- name: (network) add missed portgroups
  when: item.key not in portgroups
  changed_when: false
  ansible.builtin.command: "{{ pgmod }} add -p '{{ item.key }}' -v {{ item.value.vswitch | d(esx_vswitch_def) }}"
  with_dict: "{{ esxi_portgroups }}"

- name: (network) check that deleted portgroups are free from clients
  when: item not in esxi_portgroups
  ansible.builtin.assert:
    that: (portgroups[item].clients|int == 0)
  loop: "{{ portgroups.keys() }}"

- name: (network) delete extra portgroups
  when: (item.key not in esxi_portgroups) and (item.value.clients|int == 0)
  changed_when: false
  ansible.builtin.command: "{{ pgmod }} remove -p '{{ item.key }}' -v {{ item.value.vswitch | d(esx_vswitch_def) }}"
  with_dict: "{{ portgroups }}"
  # loop_control does not work with "command"
  # loop_control:
  #   label: "{{ item.key }}"

- name: (network) set vlan tags to correct values
  when: (item.key not in portgroups) or (item.value.tag != portgroups[item.key]['tag']|int)
  changed_when: false
  ansible.builtin.command: "{{ pgmod }} set -p '{{ item.key }}' --vlan-id {{ item.value.tag }}"
  with_dict: "{{ esxi_portgroups }}"

- name: (network) check if BPDUs are blocked
  ansible.builtin.shell: |
    set -o pipefail # <-- adding this will prevent surprises
    esxcli system settings advanced list -o /Net/BlockGuestBPDU | awk '/^   Int Value:/ {print $3}'
  register: bpdu_block_res
  changed_when: false
  check_mode: false

- name: (network) block BPDUs from guests
  when: 1 != bpdu_block_res.stdout|int
  changed_when: false
  ansible.builtin.command: esxcli system settings advanced set -o /Net/BlockGuestBPDU -i 1

- name: (network) create interface for vMotion
  when: esx_create_vmotion_iface
  block:
    - name: (network) get ipv4 interfaces list
      ansible.builtin.command: esxcli network ip interface ipv4 get
      register: ipv4_ifaces_res
      changed_when: false
      check_mode: false

    - name: (network) parse ip interface list
      ansible.builtin.set_fact:
        # have 2 junk entries from header (with keys "Name" and "----")
        # safe to ignore (filter out with e.g. "rejectattr" if not)
        ip_by_nic: "{{ ipv4_ifaces_res.stdout_lines
                       | map('split', None, 2)
                       | map('record', ['name', 'address', 'rest'])
                       | to_dict('name') }}"

    - name: (network) create interface for vMotion
      when: esx_vmotion_iface_name not in ipv4_ifaces_res.stdout
      changed_when: false
      ansible.builtin.command: esxcli network ip interface add -i {{ esx_vmotion_iface_name }} -p '{{ esx_vmotion_portgroup_name }}'

    - name: (network) calculate vmotion addr
      ansible.builtin.set_fact:
        # be careful not to include "." in RE: \1 became \1241 :)
        vmotion_addr: "{{ ip_by_nic['vmk0'].address | regex_replace('^(\\d+\\.\\d+)\\.\\d+', '\\1.' + (esx_vmotion_subnet_number|string)) }}"

    - name: (network) set ip address on vMotion interface
      when: ip_by_nic[esx_vmotion_iface_name]['address'] != vmotion_addr
      changed_when: false
      ansible.builtin.command: esxcli network ip interface ipv4 set -i {{ esx_vmotion_iface_name }} -I {{ vmotion_addr }} -N 255.255.255.0 -t static

    - name: (network) get tag on vMotion interface
      ansible.builtin.command: esxcli network ip interface tag get -i {{ esx_vmotion_iface_name }}
      register: vmotion_tag_res
      changed_when: false
      check_mode: false

    - name: (network) assign vMotion interface tag
      when: ('VMotion' not in vmotion_tag_res.stdout)
      changed_when: false
      ansible.builtin.command: esxcli network ip interface tag add -i {{ esx_vmotion_iface_name }} -t VMotion

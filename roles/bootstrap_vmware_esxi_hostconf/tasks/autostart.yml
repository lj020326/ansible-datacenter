---
# mostly dealing with autostart now

- name: (autostart) get autostart options list
  ansible.builtin.shell: |
    {{ esx_asm_cmd }}/get_defaults | awk 'NR > 1 && !/^}/ {print $1, $3}' | sed -e 's/,$//'
  register: autostart_opts_list_res
  changed_when: false
  check_mode: false

- name: Display autostart_opts_list_res
  ansible.builtin.debug:
    var: autostart_opts_list_res

- name: (autostart) convert autostart options to structure
  ansible.builtin.set_fact:
    # convert to flat dict "name" -> "value" (key is 1st record element, value is 2nd)
    autostart_opts: "{{ autostart_opts_list_res.stdout_lines | map('split', None, 1) | to_dict_flat }}"

- name: print autostart_opts
  ansible.builtin.debug:
    var: autostart_opts

- name: (autostart) enable autostart
  when: autostart_opts.enabled != "true"
  changed_when: false
  ansible.builtin.command: "{{ esx_asm_cmd }}/enable_autostart true"

- name: (autostart) set autostart defaults
  when: autostart_opts.stopAction != '"guestShutdown"'
  changed_when: false
  ansible.builtin.command: "{{ esx_asm_cmd }}/update_defaults 120 120 'guestShutdown' true"

- name: (autostart) get list of VMs
  esxi_vm_info:
    get_start_state: true
  register: vm_info

# autostart list is not defined by default (to prevent stopping them all)
- name: (autostart) enable autostart for VMs in autostart list
  when:
    - vms_to_autostart is defined
    - item.key in vm_info.id_by_vm
    # optional, to simplify startup
    - item.key not in vm_info.start_by_vm
  esxi_autostart:
    name: "{{ item.key }}"
    enabled: true
    order: "{{ item.value.order | default(omit) }}"
  with_dict: "{{ vms_to_autostart }}"

- name: (autostart) disable autostart for VMs not in autostart list
  when:
    - esx_autostart_only_listed
    - item.key not in vms_to_autostart
  esxi_autostart:
    name: "{{ item.key }}"
    enabled: false
  with_dict: "{{ vm_info.start_by_vm }}"

# todo: enable autostart for machines from list
# - get list: `vim-cmd hostsvc/autostartmanager/get_autostartseq`
#     - not sure how to parse it w/o custom module
# - get list of vm name to id mappings with `vim-cmd vmsvc/getallvms`
# - compare and fix autostart entries
# - most probably will need a module like "service"

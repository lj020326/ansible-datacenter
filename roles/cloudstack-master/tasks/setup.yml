---
#########################################################################################
##
## ref: https://blog.sonstebo.com/2015/01/22/apache-cloudstack-ansible-playbook/
## ref: https://github.com/dagsonstebo/CloudStack-Ansible-Playbook/blob/master/cloudstack.yml
## ref: https://github.com/shapeblue/cloudstack-ansible
##		forks with helpful/recent updates:
##		-> https://github.com/LeoTaoSH/cloudstack-ansible
##		-> https://github.com/pykiki/cloudstack-ansible
##
#########################################################################################

#######################################################
# Configure NTP
#
- name: Install NTP
  package:
    name: ntp
    state: present
  tags:
    - ntp
    - base

- name: Configure NTP file
  template:
    src: templates/ntp.conf.j2
    dest: /etc/ntp.conf
  notify: restart ntp
  tags:
    - ntp
    - base

- name: Start the NTP daemon
  service: name=ntpd state=started enabled=true
  tags:
    - ntp
    - base

#######################################################
# Configure SElinux settings
#
- name: Set SELinux to permissive
  selinux: policy=targeted state=permissive
  tags:
    - selinux
    - base

#######################################################
#  Configure MySQL yum repo
#
- name: Configure MySQL repo
  template:
    src: mysql.repo.j2
    dest: /etc/yum.repos.d/mysql-community.repo
    mode: 0644

#######################################################
#  Configure CloudStack yum repo
#
- name: Configure CloudStack repo
  template:
    src: templates/cloudstack.repo.j2
    dest: /etc/yum.repos.d/cloudstack.repo
    mode: 0644
  tags:
    - base
    - yumrepo

#######################################################
# setup utility scripts
#
- name: Install utility cloudstack script files
  copy:
    src: "{{ item }}"
    dest: "/opt/scripts/{{ item | basename }}"
    mode: "0755"
  with_fileglob:
    - "files/scripts/cloudstack/*"

- name: "Create /opt/scripts/.env"
  template:
    src: "scripts/.env.j2"
    dest: /opt/scripts/.env

- name: Install python dependencies for cloudstack db/management scripts
  pip:
    name: dnspython

#######################################################
#  Install cloudstack dependent packages:
#  MySQL, mysql-python, etc
#
- name: "Install cloudstack dependent packages"
  package:
    name: "{{ cloudstack_dependent_packages }}"
    state: present
#    state: latest
  tags:
    - epelrepo
    - base
    - mysql

- name: configure firewall for cloudstack node
  when: cloudstack_firewalld_enabled | default(True) | bool
  tags: [ firewall-config-cloudstack ]
  include_role:
    name: firewall-config
  vars:
    firewalld_services: [ "{{ cloudstack_firewalld_services | default(omit) }}" ]
    firewalld_ports: [ "{{ cloudstack_firewalld_ports | default(omit) }}" ]

#######################################################
# Install vhd-util on management server
#
- name: Download vhd-util for Xenserver hypervisors
  get_url:
    url: "{{ CMConfig.VhdUtilURL }}"
    dest: "{{ item }}"
    mode: "0755"
    timeout: 20
  with_items:
    - /usr/share/cloudstack-common/scripts/vm/hypervisor/xenserver/
#    - /usr/share/cloudstack-common/scripts/vm/hypervisor/xenserver/xenserver60/
#    - /usr/share/cloudstack-common/scripts/vm/hypervisor/xenserver/xenserver62/
#    - /usr/share/cloudstack-common/scripts/vm/hypervisor/xenserver/xenserver65/
  tags:
    - csmanagement
    - csmanagementadd

- name: Copy vhd-util for Xenserver hypervisors
  copy:
    remote_src: yes
    src: "/usr/share/cloudstack-common/scripts/vm/hypervisor/xenserver/vhd-util"
    dest: "{{ item }}"
    mode: "0755"
  with_items:
    - /usr/share/cloudstack-common/scripts/vm/hypervisor/xenserver/xenserver60/
    - /usr/share/cloudstack-common/scripts/vm/hypervisor/xenserver/xenserver62/
    - /usr/share/cloudstack-common/scripts/vm/hypervisor/xenserver/xenserver65/
  tags:
    - csmanagement
    - csmanagementadd

#######################################################
#  Install and setup Cloudstack Database
#
- name: Install and setup Cloudstack Database
  include_tasks: ./setupdb.yml

#######################################################
#  Install cloudstack packages
#  and MySQL
#  and (required for cloudmonkey), vim
#
- name: "Install cloudstack packages"
  package:
    name: "{{ cloudstack_packages }}"
    state: present
#    state: latest
  tags:
    - csmanagementadd

- name: "Stop cloudstack services"
  service:
    enabled: yes
    name: "{{ item }}"
    state: stopped
  with_items:
    - cloudstack-management
    - cloudstack-agent
  ignore_errors: yes

#######################################################
#  Apply CloudStack log settings
#
- name: "create link /etc/cloudstack/management/commons-logging.properties -> /etc/cloudstack/management/logging.properties"
  file:
    src: /etc/cloudstack/management/commons-logging.properties
    dest: /etc/cloudstack/management/logging.properties
    state: link
  tags:
    - cmlogconfig

- name: "Update /etc/logrotate.d/cloudstack-catalina"
  template:
    src: cloudstack-catalina.json.j2
    dest: /etc/logrotate.d/cloudstack-catalina
  tags:
    - cmlogconfig

#
#- name: "Allow logging from cloud user"
#  file:
#    path: /var/log/cloudstack
#    state: directory
#    mode: 0755
#    recurse: true
#    owner: "{{ CSMySQL.CloudDBUser }}"
#    group: "{{ CSMySQL.CloudDBUser }}"


#######################################################
# Configure CloudStack DB
# ref: https://blog.sonstebo.com/2015/01/22/apache-cloudstack-ansible-playbook/
#
- name: "Run cloudstack-setup-databases"
  when: dbstatus.rc != 0
  shell: >-
    cloudstack-setup-databases {{ CSMySQL.CloudDBUser }}:{{ CSMySQL.CloudDBPass | mandatory }}@localhost
    --deploy-as=root:{{ CSMySQL.RootPassword }}
    -m {{ CSMySQL.RootPassword }}
    -k {{ CSMySQL.CloudDBPass }} > /root/cs_dbinstall.out 2>&1
  register: db_created
  tags:
    - mysql

- name: "Display cloudstack-setup-databases output"
  when: db_created.changed
  debug: msg={{ db_created.stdout }}
  tags:
    - mysql

- name: "Display cloudstack-setup-databases errors"
  when: db_created.changed
  debug: msg={{ db_created.stderr }}
  tags:
    - mysql

- name: "Run cloudstack-setup-management"
  when: dbstatus.rc != 0
  shell: "cloudstack-setup-management >> /root/cs_mgmt_install.out 2>&1"
  register: dbsetup_status
  tags:
    - mysql

- name: "Run cloudstack-setup-management output"
  when: dbstatus.rc != 0 and dbsetup_status.rc != 0
  debug: msg={{ dbsetup_status.stdout }}
  tags:
    - mysql

- name: "Run cloudstack-setup-management error"
  when: dbstatus.rc != 0 and dbsetup_status.rc != 0
  debug: msg={{ dbsetup_status.stderr }}
  tags:
    - mysql

#######################################################
# Configure storage
# ref: http://docs.cloudstack.apache.org/projects/archived-cloudstack-installation/en/4.11/storage_setup.html#network-configuration-for-storage
#
# Mount secondary NFS share and install system VM
# template. Check size of mounted folder before
# installation to ensure previous data not being
# overwritten.
#
## Small-Scale Setup
#  In a small-scale setup, a single NFS server can function as both primary and secondary storage.
#  The NFS server must export two separate shares, one for primary storage and the other for secondary storage.
#  This could be a VM or physical host running an NFS service on a Linux OS or a virtual software appliance.
#  Disk and network performance are still important in a small scale setup to get a good experience when deploying, running or snapshotting VMs.
#
#  ref: http://docs.cloudstack.apache.org/projects/archived-cloudstack-installation/en/4.11/storage_setup.html#small-scale-setup
#
- block:
  - name: Mount NFS primary storage
    mount:
      name: "{{ CMConfig.PrimaryMount }}"
      src: "{{ CMConfig.NFSHost }}:{{ CMConfig.NFSPrimaryShare}}"
      fstype: nfs
      state: mounted

  - name: Mount NFS secondary storage
    mount:
      name: "{{ CMConfig.SecondaryMount }}"
      src: "{{ CMConfig.NFSHost }}:{{ CMConfig.NFSSecondaryShare}}"
      fstype: nfs
      state: mounted

  when: cloudstack_mount_nfs_share|bool
  tags:
    - secstorage
    - nfs

## if setting up local nfs share
- block:
  ## Using the Management Server as the NFS Server
  ## ref: https://cloudstack-installation.readthedocs.io/en/4.3/installation.html
  - name: "Create /etc/exports"
    copy:
      src: exports
      dest: /etc/exports

  ## ref: https://cloudstack-installation.readthedocs.io/en/4.3/installation.html
  - name: "Run exportfs -a"
    shell: "exportfs -a"

  - name: "Create /etc/sysconfig/nfs"
    copy:
      src: sysconfig-nfs
      dest: /etc/sysconfig/nfs

  when: cloudstack_setup_nfs_share|bool
  tags:
    - nfs
    - secstorage

#######################################################
# Download and install CS system VM templates
#
## ref: http://docs.cloudstack.apache.org/projects/archived-cloudstack-getting-started/en/latest/ansible.html
- block:
  - name: Create template file directory if not exists
    file:
      path: "{{ CMConfig.SecondaryMount }}/template"
      state: directory

#  ## ref: https://blog.sonstebo.com/2015/01/22/apache-cloudstack-ansible-playbook/
#  - name: Check size of mounted secondary storage template folder
#    shell: du {{ CMConfig.SecondaryMount }}/template/ --max-depth=0 | awk '{print $1}'
#    register: TemplateFolderSize

  - name: "Seed secondary storage"
#    shell: "{{ system_cs_script_dir }}/cloud-install-sys-tmplt -m {{ CMConfig.SecondaryMount }} -u {{ item.url }} -h {{ item.hypervisor }} -F"
    shell: >-
      {{ system_cs_script_dir }}/cloud-install-sys-tmplt
      -m {{ CMConfig.SecondaryMount }} -u {{ item.url }} -h {{ item.hypervisor_tmpl }}
      -o localhost -r {{ CSMySQL.CloudDBUser }} -d {{ CSMySQL.CloudDBPass }}
#    when: TemplateFolderSize.stdout|int < 1024
    with_items: "{{ VMSystemTemplates }}"
#    ignore_errors: yes
    register: shell_cmd
    failed_when: shell_cmd.rc >= 0 and "Data already exists at destination" not in shell_cmd.stdout

  - name: Print seed results info
    debug: var=shell_cmd

  ## ref: http://docs.cloudstack.apache.org/projects/cloudstack-installation/en/latest/management-server/_systemvm.html
  - name: Unmount NFS secondary storage after seeding
    mount:
      name: "{{ CMConfig.SecondaryMount }}"
      src: "{{ CMConfig.NFSHost }}:{{ CMConfig.NFSSecondaryShare}}"
      fstype: nfs
      state: unmounted

#  - name: Remove {{ CMConfig.SecondaryMount }}
#    file:
#      state: absent
#      path: "{{ CMConfig.SecondaryMount }}"

  tags:
    - secstorage

## ref: https://cloudstack-installation.readthedocs.io/en/4.3/installation.html
- name: "Create /etc/idmapd.conf"
  template:
    src: idmapd.conf.j2
    dest: /etc/idmapd.conf
  tags:
    - nfs
    - secstorage

- name: "Start rpcbind"
  systemd:
    enabled: true
    state: started
    name: rpcbind
  tags:
    - nfs
    - secstorage

- name: "Start nfs"
  systemd:
    enabled: true
    state: started
    name: nfs
  tags:
    - nfs
    - secstorage

- name: "Enable and start cloudstack-management Service"
  service:
    enabled: yes
    name: cloudstack-management
    state: started

#######################################################
# Install cloudmonkey
#######################################################
- block:
  #- name: Install CloudMonkey
  #  pip:
  #    name: cloudmonkey
  #  tags:
  #    - csmanagementadd
  #    - cloudmonkey

  ## cloudmonkey v6+ is distributed using snapd
  ## need snapd running to install cloudmonkey(>=6)
  ## ref: https://snapcraft.io/install/cloudmonkey/centos
  ## ref: https://computingforgeeks.com/install-snapd-snap-applications-centos-7/
  - name: Make sure snapd is running
#    systemd:
    service:
      state: started
      name: snapd

  ## cloudmonkey v6 now golang based and distributed via snap
  - name: Install cloudmonkey
    snap:
      name:
        - cloudmonkey

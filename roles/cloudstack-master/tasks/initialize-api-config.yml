
#######################################################
# Install cs-utils script to initialize CS api token
#######################################################
# Setup API setup helper
- name: "Setup script dir"
  file:
    path: /opt/cs-utils
    state: directory
    mode: 0755
    recurse: true
#    owner: "{{ CSMySQL.CloudDBUser }}"
#    group: "{{ CSMySQL.CloudDBUser }}"

- name: "Setup cs-utils in {{ CSUtils.AppDir }}"
  copy:
    src: cs-utils
#    dest: "/opt"
    dest: "{{ CSUtils.AppDir | basename }}"
#    owner: "{{ CSMySQL.CloudDBUser }}"
#    group: "{{ CSMySQL.CloudDBUser }}"

- name: Setup cs-utils conf
  template:
    src: "cs-utils.conf.j2"
    dest: "~/.cs-utils.conf"
    owner: root
    group: root
    mode: 0600

- name: install python packages into cs-utils venv
  pip:
    requirements: "{{ CSUtils.AppDir }}/requirements.txt"
    virtualenv: "{{ CSUtils.VenvDir }}"
    virtualenv_python: python{{ python_dist_version }}

## ref: https://gist.github.com/mikeifomin/67e233cd461331de16707ef59a07e372
## ref: https://docs.ansible.com/ansible/latest/modules/uri_module.html
## ref: https://github.com/ansible/ansible/issues/34989
- name: "Wait for {{ CSMgtClientEndpoint }} to come up"
  tags:
    - check-connectivity-csmaster
  uri:
    url: "{{ CSMgtClientEndpoint }}"
    method: GET
    status_code: 200
  register: _result
  until: ('status' in _result) and (_result.status == 200)
  retries: 30 # retry X times
  delay: 5 # pause for X sec b/w each call
  changed_when: false

- name: "stat {{ cloudstack_conf_file }}"
  tags:
    - get-csmaster-apikey
  stat:
    path: "~/{{ cloudstack_conf_file }}"
  register: cs_ini_stat

- block:
  - name: "Move {{ cloudstack_conf_file }} to {{ cloudstack_conf_file }}.{{ snap_date }}"
    vars:
        snap_date: "{{ lookup('pipe', 'date +%Y%m%d_%H%M') }}"
    tags:
      - get-csmaster-apikey
    command: "mv ~/{{ cloudstack_conf_file }} ~/{{ cloudstack_conf_file }}.{{ snap_date }}"
    when: cs_ini_stat.stat.exists

  - name: "create {{ cloudstack_conf_file }} on {{ ansible_host }}"
    tags:
      - get-csmaster-apikey
    command: "{{ CSUtils.VenvDir }}/bin/python {{ CSUtils.AppDir }}/cs-utils.py"
    args:
        creates: "~/{{ cloudstack_conf_file }}"

  - name: "Fetch file {{ cloudstack_conf_file }}"
    tags:
      - get-csmaster-apikey
    fetch:
      src: "~/{{ cloudstack_conf_file }}"
  #      dest: "~/{{ cloudstack_conf_file }}"
      dest: "{{ cloudstack_conf_file }}"
      flat: yes

  - debug: msg="apikey is {{ lookup('ini', 'key section=cloudstack file=.cloudstack.ini') }}"
    tags:
      - get-csmaster-apikey

  - name: "Get API key from {{ cloudstack_conf_file }}"
    tags:
      - get-csmaster-apikey
    set_fact:
        cloudstack_api_key: "{{ lookup('ini', 'key section=cloudstack file=.cloudstack.ini') }}"

  when: cloudstack_reset_api_client_token or not cs_ini_stat.stat.exists

## ref:
- name: Fetch file {{ cloudstack_conf_file }}
  tags:
    - get-csmaster-apikey
  fetch:
    src: "~/{{ cloudstack_conf_file }}"
    dest: "cloudstack.ini"
    flat: yes

- name: Fetch file {{ cloudstack_conf_file }}
  tags:
    - get-csmaster-apikey
  fetch:
    src: "~/{{ cloudstack_conf_file }}"
    dest: "~/{{ cloudstack_conf_file }}"
    flat: yes

- debug: msg="apikey is {{ lookup('ini', 'key section=cloudstack file=.cloudstack.ini') }}"
  tags:
    - get-csmaster-apikey

- name: Get API key from {{ cloudstack_conf_file }}
  tags:
    - get-csmaster-apikey
  set_fact:
      cloudstack_endpoint: "{{ lookup('ini', 'endpoint section=cloudstack file=.cloudstack.ini') }}"
      cloudstack_api_key: "{{ lookup('ini', 'key section=cloudstack file=.cloudstack.ini') }}"
      cloudstack_api_secret: "{{ lookup('ini', 'secret section=cloudstack file=.cloudstack.ini') }}"

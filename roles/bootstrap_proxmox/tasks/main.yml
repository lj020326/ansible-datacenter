# tasks file for bootstrap_proxmox
---
- name: Run load_variables.yml
  ansible.builtin.import_tasks: load_variables.yml

- name: Ensure that facts are present for all cluster hosts
  ansible.builtin.assert:
    that:
      - hostvars[item].ansible_facts
    msg: Could not load facts for {{ item }}. Please run your playbook against all hosts in {{ pve_group }}.
  loop: "{{ groups[pve_group] }}"

- name: Ensure this host is in the group specified
  when: pve_cluster_enabled | bool
  ansible.builtin.assert:
    that:
      - inventory_hostname in groups[pve_group]
    msg: This host does not appear to be in the group {{ pve_group }}, did you specify the pve_group host variable correctly?

- name: Run ssh_cluster_config.yml
  when:
    - pve_manage_ssh | bool
    - pve_cluster_enabled | bool
  ansible.builtin.import_tasks: ssh_cluster_config.yml

- name: Run handlers if needed (sshd reload)
  ansible.builtin.meta: flush_handlers

- name: Enumerate all cluster hosts within the hosts file
  when: pve_cluster_enabled | bool
  ansible.builtin.blockinfile:
    dest: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED: Proxmox Cluster Hosts"
    content: "\
      {% for host in groups[pve_group] %}\
        {{ hostvars[host].pve_cluster_addr0 }}
        {{ hostvars[host].ansible_fqdn }}
        {{ hostvars[host].ansible_hostname }}


      {% endfor %}"

- name: Remove conflicting lines in hosts files
  when: pve_cluster_enabled | bool
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    # expanded, this turns out to be, for example:
    # regexp: "^(?!10\.0\.3\.17\\ test01\.lxc\\ test01)(?!10\.0\.3\.17)[0-9a-f:.]+(\s+.*)?\s(test01\.lxc|test01)(\s+.*|\s*)$'
    # basically first we ignore lines that match from the host enumeration task
    # above, then we match against different IPs (e.g. NOT 10.0.3.17) that have
    # the hostname/fqdn we inserted a record for previously, taking care also to
    # detect word boundaries (\b wasn't working for some reason)
    regexp: "\
      ^(?!\
        {{ _correct_line | regex_escape() }}\
      )\
      {# Ignore lines starting with the current cluster host #}\
      (?!{{ _correct_ip | regex_escape() }})\
      {# Match an IPv4/v6 address at the start #}\
      [0-9a-f:.]\
      {# Match any hostnames, surrounded by whitespace #}\
      +(\\s+.*)?\\s\
      (\
        {{ _match_hosts | map('regex_escape') | join('|') }}\
      )\
      (\\s+.*|\\s*)$"
    state: absent
    backup: true
  loop: "{{ groups[pve_group] }}"
  vars:
    _correct_line: "\
      {{ hostvars[item].pve_cluster_addr0 }}
      {{ hostvars[item].ansible_fqdn }}
      {{ hostvars[item].ansible_hostname }}"
    _correct_ip: "{{ hostvars[item].pve_cluster_addr0 }}"
    _match_hosts: >-
      [
        "{{ hostvars[item].ansible_fqdn }}",
        "{{ hostvars[item].ansible_hostname }}"
      ]

- name: Ensure gpg is installed
  ansible.builtin.apt:
    name: gpg
    state: present

- name: Trust Proxmox' packaging key
  ansible.builtin.apt_key:
    data: "{{ lookup('file', pve_release_key) }}"
    id: "{{ pve_release_key_id }}"
    state: present

- name: Remove os-prober package
  ansible.builtin.apt:
    name: os-prober
    state: absent

- name: Add Proxmox repository
  ansible.builtin.apt_repository:
    repo: "{{ pve_repository_line }}"
    filename: proxmox
    state: present
  register: _pve_repo

- name: Add Proxmox Ceph repository
  when: pve_ceph_enabled | bool
  ansible.builtin.apt_repository:
    repo: "{{ pve_ceph_repository_line }}"
    filename: ceph
    state: present
  register: _pve_ceph_repo

- name: Run apt-get dist-upgrade on repository changes
  when: _pve_repo is changed or _pve_ceph_repo is changed
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
    upgrade: dist
  retries: 2
  register: _dist_upgrade
  until: _dist_upgrade is succeeded

- name: Perform system upgrades
  when: pve_run_system_upgrades | bool
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
    upgrade: dist
  retries: 2
  register: _system_upgrade
  until: _system_upgrade is succeeded

- name: Run identify_needed_packages.yml
  ansible.builtin.import_tasks: identify_needed_packages.yml

- name: Install Proxmox VE and related packages
  ansible.builtin.apt:
    name: "{{ _pve_install_packages }}"
    state: "{{ 'latest' if pve_run_proxmox_upgrades else 'present' }}"
  retries: 2
  register: _proxmox_install
  until: _proxmox_install is succeeded

- name: Remove automatically installed PVE Enterprise repo configuration
  when: "'pve-no-subscription' in pve_repository_line"
  block:
    - name: Remove automatically installed PVE Enterprise repo configuration
      ansible.builtin.apt_repository:
        repo: "{{ item }}"
        filename: pve-enterprise
        state: absent
      loop:
        - deb https://enterprise.proxmox.com/debian {{ ansible_distribution_release }} pve-enterprise
        - deb https://enterprise.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-enterprise

    - name: Remove subscription check wrapper function in web UI
      ansible.posix.patch:
        src: 00_remove_checked_command_{{ ansible_distribution_release }}.patch
        basedir: /
        strip: 1
        backup: true
      when:
        - pve_remove_subscription_warning | bool

- name: Run kernel_updates.yml
  ansible.builtin.import_tasks: kernel_updates.yml

- name: Run ipmi_watchdog.yml
  when: pve_watchdog == 'ipmi'
  ansible.builtin.import_tasks: ipmi_watchdog.yml

- name: Run zfs.yml
  when: pve_zfs_enabled | bool
  ansible.builtin.import_tasks: zfs.yml

- name: Run kernel_module_cleanup.yml
  ansible.builtin.import_tasks: kernel_module_cleanup.yml

- name: "[TEMPFIX] Fix cluster joins on PVE 6"
  when:
    - ansible_distribution_release == 'buster'
    - pve_cluster_enabled | bool
  ansible.posix.patch:
    src: 01_pass_correct_format_for_linkX.patch
    basedir: /
    strip: 1

- name: Run pve_cluster_config.yml
  when: pve_cluster_enabled | bool
  ansible.builtin.import_tasks: pve_cluster_config.yml

- name: Run ceph.yml
  when: pve_ceph_enabled | bool
  ansible.builtin.import_tasks: ceph.yml

- name: Configure Proxmox roles
  when: not pve_cluster_enabled | bool or (pve_cluster_enabled | bool and inventory_hostname == groups[pve_group][0])
  proxmox_role:
    name: "{{ item.name }}"
    privileges: "{{ item.privileges }}"
    state: "{{ item.state | default('present') }}"
  loop: "{{ pve_roles }}"

- name: Configure Proxmox groups
  when: not pve_cluster_enabled or (pve_cluster_enabled | bool and inventory_hostname == groups[pve_group][0])
  proxmox_group:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    comment: "{{ item.comment | default(omit) }}"
  loop: "{{ pve_groups }}"

- name: Configure Proxmox user accounts
  when: not pve_cluster_enabled | bool or (pve_cluster_enabled | bool and inventory_hostname == groups[pve_group][0])
  proxmox_user:
    name: "{{ item.name }}"
    state: "{{ item.state | default('present') }}"
    enable: "{{ item.enable | default(omit) }}"
    groups: "{{ item.groups | default([]) }}"
    comment: "{{ item.comment | default(omit) }}"
    email: "{{ item.email | default(omit) }}"
    firstname: "{{ item.firstname | default(omit) }}"
    lastname: "{{ item.lastname | default(omit) }}"
    password: "{{ item.password | default(omit) }}"
    expire: "{{ item.expire | default(omit) }}"
  loop: "{{ pve_users }}"

- name: Configure Proxmox ACLs
  when: not pve_cluster_enabled | bool or (pve_cluster_enabled | bool and inventory_hostname == groups[pve_group][0])
  proxmox_acl:
    path: "{{ item.path }}"
    roles: "{{ item.roles }}"
    state: "{{ item.state | default('present') }}"
    groups: "{{ item.groups | default([]) }}"
    users: "{{ item.users | default([]) }}"
  loop: "{{ pve_acls }}"

- name: Configure Proxmox Storage
  when: not pve_cluster_enabled | bool or (pve_cluster_enabled | bool and inventory_hostname == groups[pve_group][0])
  proxmox_storage:
    name: "{{ item.name }}"
    type: "{{ item.type }}"
    disable: "{{ item.disable | default(False) }}"
    path: "{{ item.path | default(omit) }}"
    content: "{{ item.content | default([]) }}"
    nodes: "{{ item.nodes | default(omit) }}"
    username: "{{ item.username | default(omit) }}"
    pool: "{{ item.pool | default(omit) }}"
    monhost: "{{ item.monhost | default(omit) }}"
    maxfiles: "{{ item.maxfiles | default(omit) }}"
    krbd: "{{ item.krbd | default(omit) }}"
    state: "{{ item.state | default('present') }}"
    server: "{{ item.server | default(omit) }}"
    export: "{{ item.export | default(omit) }}"
    options: "{{ item.options | default(omit) }}"
    vgname: "{{ item.vgname | default(omit) }}"
    thinpool: "{{ item.thinpool | default(omit) }}"
  loop: "{{ pve_storages }}"

- name: Check datacenter.cfg exists
  when:
    - not pve_cluster_enabled | bool or (pve_cluster_enabled | bool and inventory_hostname == groups[pve_group][0])
    - pve_datacenter_cfg | length > 0
  ansible.builtin.stat:
    path: /etc/pve/datacenter.cfg
  register: _datacenter_cfg

- name: Create datacenter.cfg if it does not exist
  when:
    - not pve_cluster_enabled | bool or (pve_cluster_enabled | bool and inventory_hostname == groups[pve_group][0])
    - pve_datacenter_cfg | length > 0
    - not _datacenter_cfg.stat.exists
  ansible.builtin.file:
    path: /etc/pve/datacenter.cfg
    state: touch
    mode: "0644"

- name: Configure datacenter.cfg
  when:
    - not pve_cluster_enabled | bool or (pve_cluster_enabled | bool and inventory_hostname == groups[pve_group][0])
    - pve_datacenter_cfg | length > 0
  ansible.builtin.copy:
    dest: /etc/pve/datacenter.cfg
    owner: root
    group: www-data
    mode: "0640"
    content: |
      {% for k,v in pve_datacenter_cfg.items() %}
      {{ k }}: {{ v }}
      {% endfor %}

- name: Run ssl_config.yml
  when:
    - pve_ssl_private_key is defined
    - pve_ssl_certificate is defined
  ansible.builtin.import_tasks: ssl_config.yml

- name: Run ssl_letsencrypt.yml
  when: pve_ssl_letsencrypt | bool
  ansible.builtin.import_tasks: ssl_letsencrypt.yml

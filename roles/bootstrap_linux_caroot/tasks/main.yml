---

- name: Load os-specific configs
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"

#- name: "Ensure keyring dirs exist in {{ cacert_base_dir }}"
#  become: false
#  delegate_to: "localhost"
#  ansible.builtin.file:
#    path: "{{ item.path }}"
#    state: directory
#    mode: "{{ item.mode | d('0755') }}"
#  loop:
#    - { path: "{{ cacert_certs_dir }}" }
#    - { path: "{{ cacert_keys_dir }}", mode: '0700' }

- name: "Ensure cert dir exist in {{ cacert_local_cert_dir }}"
  delegate_to: "localhost"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode | d('0755') }}"
  loop:
    - path: "{{ cacert_local_cert_dir }}"

- name: "Display ca_cert fetch info"
  ansible.builtin.debug:
    msg:
      - "cacert_keystore_base_dir={{ cacert_keystore_base_dir }}"
      - "ca_domain={{ ca_domain }}"
      - "ca_domains_hosted={{ ca_domains_hosted }}"

## ref: https://unix.stackexchange.com/questions/240814/rsync-with-different-user
#- name: "Fetch certs to {{ cacert_certs_dir }}"
#  become: false
##  become: true
##  become_user: "{{ ansible_local_user }}"
#  delegate_to: "localhost"
#  ansible.builtin.shell: >
#    rsync -arP -e'ssh -o StrictHostKeyChecking=no'
#    {{ ansible_ssh_user }}@{{ bootstrap_linux_caroot__keystore_host }}:{{ item.src }}
#    {{ item.dest }}
##  ansible.builtin.shell: >
##    rsync -arP -e'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no'
##    {{ ansible_ssh_user }}@{{ bootstrap_linux_caroot__keystore_host }}:{{ item.src }}
##    {{ item.dest }}
##  args:
##    warn: False
#  loop:
#    - src: "{{ cacert_keystore_base_dir }}/{{ ca_root_cn }}/{{ pki_caroot_cert }}"
#      dest: "{{ cacert_certs_dir }}/{{ pki_caroot_cert }}"
#
#- name: "Copy root cert [{{ pki_caroot_cert }}] to {{ cacert_local_cert_dir }}"
#  ansible.builtin.copy:
#    backup: true
#    src: "{{ item.src }}"
#    dest: "{{ item.dest }}"
#    mode: "0644"
#  loop:
#    - src: "{{ cacert_certs_dir }}/{{ pki_caroot_cert }}"
#      dest: "{{ cacert_local_cert_dir }}/{{ pki_caroot_cert }}"

#- name: "Fetch root ca-cert to {{ cacert_local_cert_dir }}" # noqa: command-instead-of-module
#  changed_when: false
#  ansible.builtin.shell: >
#    rsync -arP -e 'ssh -o StrictHostKeyChecking=no'
#    --rsync-path 'sudo -u root rsync'
#    {{ ansible_ssh_user }}@{{ bootstrap_linux_caroot__keystore_host }}:{{ item.src }}
#    {{ item.dest }}
#  loop:
#    - src: "{{ cacert_keystore_base_dir }}/{{ ca_root_cn }}/{{ pki_caroot_cert }}"
#      dest: "{{ cacert_local_cert_dir }}/{{ pki_caroot_cert }}"

- name: "Slurp up {{ cacert_keystore_base_dir }}/{{ ca_root_cn }}/{{ pki_caroot_cert }}"
  delegate_to: "{{ bootstrap_linux_caroot__keystore_host }}"
  ansible.builtin.slurp:
    src: "{{ cacert_keystore_base_dir }}/{{ ca_root_cn }}/{{ pki_caroot_cert }}"
  register: __slurped_cert

## ref: https://codeblog.dotsandbrackets.com/private-registry-swarm/
- name: "Copy slurped cert content to {{ cacert_local_cert_dir }}/{{ pki_caroot_cert }}"
  ansible.builtin.copy:
    content: "{{ __slurped_cert.content | b64decode }}"
    dest: "{{ cacert_local_cert_dir }}/{{ pki_caroot_cert }}"
    backup: true
    owner: root
    mode: "0644"

- name: "ensure trust dir exists"
  ansible.builtin.file:
    state: directory
    path: "{{ ca_trust_info[ansible_os_family].ca_trust_cert_dir }}"
    mode: "0755"

- name: "Remove all existing old CA certs from {{ trust_ca_cacert_dir }}"
  when: ca_force_distribute_nodes or ca_force_create
  changed_when: false
  ansible.builtin.shell: "/bin/rm -rf {{ ca_trust_info[ansible_os_family].ca_trust_cert_dir }}/*"

#- name: "Remove all existing old CA certs from {{ trust_ca_cacert_dir }}"
#  when: ca_force_distribute_nodes or ca_force_create
#  ansible.builtin.shell: "/bin/rm -rf {{ trust_ca_cacert_dir }}/*"

### ref: https://stackoverflow.com/questions/37043442/how-to-add-certificate-authority-file-in-centos-7
### ref: https://www.techrepublic.com/article/how-to-install-ca-certificates-in-ubuntu-server/
### ref: https://gist.github.com/aseigneurin/4902819f17218340d11f
- name: "Copy root cert to {{ ca_trust_info[ansible_os_family].ca_trust_cert_dir }} for importing"
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: true
    mode: "0644"
  loop:
    - src: "{{ cacert_local_cert_dir }}/{{ pki_caroot_cert }}"
      dest: "{{ ca_trust_info[ansible_os_family].ca_trust_cert_dir }}/{{ ca_root_cn }}.{{ ca_trust_info[ansible_os_family].ca_trust_cert_extension }}"
  register: trust_ca_cacertinstalled

#- name: "Get list of certs"
#  ansible.builtin.shell: "ls -lR {{ trust_ca_cacert_dir }}/"
#  register: ls
#  changed_when: false
#
#- ansible.builtin.debug: var=ls.stdout_lines
#  when: debug is defined

## need to research for centos how to add multiple CAs - if even possible
## ref: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/using-shared-system-certificates_security-hardening
## ref: https://techjourney.net/update-add-ca-certificates-bundle-in-redhat-centos/
- name: "update CA trust"
  changed_when: false
  ansible.builtin.command: '{{ ca_trust_info[ansible_os_family].ca_update_trust_cmd }}'
#  when: trust_ca_cacertinstalled is changed or ca_force_distribute_nodes|bool

#- name: convert to pkcs12
#  ansible.builtin.command: openssl pkcs12 -export -in {{ ca_path }}/{{ cert_node.domainName }}/{{ cert_node.commonName }}.crt -inkey {{ ca_path }}/{{ cert_node.domainName}}/{{ cert_node.commonName }}.key -out {{ ca_path }}/{{ cert_node.domainName }}/{{ cert_node.commonName }}.p12 -name "{{ cert_node.commonName }}" -passout pass:{{ keystore_password }}

## only need to do this for CentOS
## For Ubuntu/Debian - update-ca-certificates updates /etc/ssl/certs/java/cacerts
## ref: https://github.com/anapsix/docker-alpine-java/issues/27
- name: "Add ca root cert to keystore at {{ ca_java_keystore }} - RedHat method"
  when:
    - ca_java_keystore_enabled|bool
    - ansible_os_family == "RedHat"
  changed_when: false
#  ansible.builtin.command: |
  ansible.builtin.command: |
    keytool -importcert -v \
      -storepass {{ ca_java_keystore_pass }} \
      -noprompt \
      -cacerts \
      -alias {{ ca_root_cn }} \
      -file {{ item }}
  register: shell_cmd
  failed_when: shell_cmd.rc > 0 and not ( shell_cmd.stderr | regex_search("Certificate not imported, alias .* already exists") )
#  failed_when: shell_cmd.rc > 0 and not ( shell_cmd.stdout | regex_search("Certificate not imported, alias .* already exists") )
#  loop: "{{ ca_service_routes_list }}"
  loop:
    - "{{ cacert_local_cert_dir }}/{{ pki_caroot_cert }}"

#- name: "Add ca root cert to keystore - Debian method"
#  when:
#    - ca_java_keystore_enabled|bool
#    - ansible_os_family == "Debian"
#  ansible.builtin.command: |
#    keytool -importcert -v \
#      -storepass {{ ca_java_keystore_pass }} \
#      -keystore {{ ca_java_keystore }} \
#      -noprompt \
#      -cacerts \
#      -alias {{ ca_root_cn }} \
#      -file {{ item }}
#  register: shell_cmd
#  failed_when: shell_cmd.rc > 0 and not ( shell_cmd.stdout | regex_search("Certificate not imported, alias .* already exists") )
##  loop: "{{ ca_service_routes_list }}"
#  loop:
#    - "{{ cacert_local_cert_dir }}/{{ pki_caroot_cert }}"

- name: "Add ca root cert to keystore - Debian method"
  when:
    - ca_java_keystore_enabled|bool
    - ansible_os_family == "Debian"
  changed_when: false
#  ansible.builtin.command: |
  ansible.builtin.command: |
    keytool -importcert -v \
      -storepass {{ ca_java_keystore_pass }} \
      -noprompt \
      -alias {{ ca_root_cn }} \
      -file {{ item }}
  register: shell_cmd_result
  failed_when: 
    - shell_cmd_result.rc > 0
    - not ( shell_cmd_result.stdout | regex_search("Certificate not imported, alias .* already exists") )
#  loop: "{{ ca_service_routes_list }}"
  loop:
    - "{{ cacert_local_cert_dir }}/{{ pki_caroot_cert }}"

- name: Display shell_cmd_result
  ansible.builtin.debug:
    var: shell_cmd_result

---

## ref: https://www.redhat.com/en/blog/full-stack-automation-ansible-and-openstack

- name: Create networks
  os_network:
    name: "{{ item.name }}"
    state: present
    external: "{{ item.external | default(omit) }}"
    project: "{{ item.project | default(omit) }}"
    shared: "{{ item.shared | default(omit) }}"
    provider_network_type: "{{ item.provider_network_type | default(omit) }}"
    provider_physical_network: "{{ item.provider_physical_network | default(omit) }}"
    provider_segmentation_id: "{{ item.provider_segmentation_id | default(omit) }}"
  with_items: "{{ openstack_cloud_networks }}"
  register: os_networks_results

#    - name: Display os networks results
#      debug:
#        msg: "{{ os_networks_results }}"

- name: Create subnets
  os_subnet:
    state: present
    network_name: "{{ item.0.name }}"
    name: "{{ item.1.name }}"
    gateway_ip: "{{ item.1.gateway_ip }}"
    cidr: "{{ item.1.cidr }}"
    project: "{{ item.0.project | default(omit) }}"
    enable_dhcp: "{{ item.1.enable_dhcp | default(omit) }}"
    dns_nameservers: "{{ item.1.dns_nameservers | default(omit) }}"
    allocation_pool_start: "{{ item.1.allocation_pool_start | default(omit) }}"
    allocation_pool_end: "{{ item.1.allocation_pool_end | default(omit) }}"
    host_routes: "{{ item.1.host_routes | default(omit) }}"
  loop: "{{ openstack_cloud_networks | subelements('subnets', { 'skip_missing': true }) }}"
  register: os_subnets_results
  failed_when: os_subnets_results.failed and not ( os_subnets_results.msg | regex_search("Current gateway ip .* already in use by port") )

#    - name: Display os subnets results
#      debug:
#        msg: "{{ os_subnets_results }}"

- name: Create routers
  os_router:
    cloud: "{{ openstack_admin_cloud_name }}"
    state: present
    name: "{{ item.name }}"
    network: "{{ item.network }}"
    project: "{{ item.project | default(omit) }}"
    external_fixed_ips: "{{ item.external_fixed_ips }}"
    interfaces: "{{ item.interfaces }}"
  with_items: "{{ openstack_cloud_routers }}"
  register: os_routers_results
#  failed_when: os_routers_results.failed and not ( os_routers_results.msg | regex_search("TypeError.* object is not subscriptable") )
  failed_when: os_routers_results.failed and not ( os_routers_results.msg | regex_search("MODULE FAILURE\nSee stdout/stderr for the exact error") )

#    - name: Create routers
#      os_router:
#        cloud: "{{ openstack_admin_cloud_name }}"
#        state: present
#        name: "{{ item.0.name }}"
#        network: "{{ item.0.network }}"
#        external_fixed_ips: "{{ item.0.external_fixed_ips }}"
#        interfaces: "{{ item.0.interfaces }}"
#        project: "{{ item.1 | default(omit) }}"
#      loop: "{{ openstack_cloud_routers | subelements('projects') }}"
#      register: os_routers_results

- name: Display os routers results
  debug:
    msg: "{{ os_routers_results }}"


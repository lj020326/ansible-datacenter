---
- name: "{{ __bootstrap_pip__log_prefix_pipenv }} Display __bootstrap_pip_env"
  ansible.builtin.debug:
    var: __bootstrap_pip_env

- name: "{{ __bootstrap_pip__log_prefix_pipenv }} Update system pip via package manager"
  when:
#    - not __bootstrap_pip__system_pip_upgrade_enabled|bool
    - __bootstrap_pip_env.virtualenv is not defined
    - __bootstrap_pip_env.pip_version|d('')=='latest'
    - __bootstrap_pip_env.system|d(False)|bool
  ansible.builtin.package:
    name: "{{ bootstrap_pip__packages }}"
    state: latest

- name: "{{ __bootstrap_pip__log_prefix_pipenv }} Update pip using get-pip.yml"
  when:
#    - __bootstrap_pip__system_pip_upgrade_enabled|bool
    - __bootstrap_pip_env.virtualenv is not defined
    - __bootstrap_pip_env.pip_version|d('')=='latest'
    - not __bootstrap_pip_env.system|d(False)|bool
  ansible.builtin.include_tasks: run-get-pip.yml

- name: "{{ __bootstrap_pip__log_prefix_pipenv }} Set up venv: {{ __bootstrap_pip_env.virtualenv }}"
  when: __bootstrap_pip_env.virtualenv is defined
  block:
    - name: "{{ __bootstrap_pip__log_prefix_pipenv }} Set __virtual_env_python"
      ansible.builtin.set_fact:
        __virtual_env_python: "{{ __bootstrap_pip_env.virtualenv | expanduser }}/bin/python3"

    - name: "{{ __bootstrap_pip__log_prefix_pipenv }} Display python interpreter info"
      ansible.builtin.debug:
        msg:
          - __virtual_env_python={{ __virtual_env_python }}
          - ansible_python_interpreter={{ ansible_python_interpreter }}
          - ansible_playbook_python={{ ansible_playbook_python | d('') }}
          - discovered_interpreter_python={{ discovered_interpreter_python | d('') }}

    - name: "{{ __bootstrap_pip__log_prefix_pipenv }} Remove existing virtualenv if rebuilding venv"
      when:
        - bootstrap_pip__env_force_rebuild|d(False)|bool
        - __virtual_env_python != __bootstrap_pip__python_interpreter
      ansible.builtin.file:
        path: "{{ __bootstrap_pip_env.virtualenv }}"
        state: absent

    - name: "{{ __bootstrap_pip__log_prefix_pipenv }} Set up venv for {{ __bootstrap_pip_env.virtualenv }}"
      block:
        - name: "{{ __bootstrap_pip__log_prefix_pipenv }} Set up venv: {{ __bootstrap_pip_env.virtualenv }}"
          ansible.builtin.pip:
            name: pip
            state: present
            virtualenv: "{{ __bootstrap_pip_env.virtualenv }}"
            #      virtualenv_python: "{{ __bootstrap_pip_env.python_executable | d(__bootstrap_pip__python_executable) }}"
            #      virtualenv_site_packages: "{{ __bootstrap_pip_env.virtualenv_site_packages | d(True) }}"
            #      virtualenv_command: "{{ __bootstrap_pip_env.virtualenv_command | d(omit) }}"
            virtualenv_command: "{{ __bootstrap_pip_env.virtualenv_command | d(__bootstrap_pip__virtualenv_command) }}"
          register: __pip_update_result

        - name: "{{ __bootstrap_pip__log_prefix_pipenv }} Set up latest pip"
          when: __bootstrap_pip_env.pip_version|d('')=='latest'
          ansible.builtin.pip:
            name: pip
            state: latest
            virtualenv: "{{ __bootstrap_pip_env.virtualenv | d(omit) }}"
            virtualenv_command: "{{ __bootstrap_pip_env.virtualenv_command | d(omit) }}"
          #      virtualenv_command: "{{ __bootstrap_pip_env.virtualenv_command | d(__bootstrap_pip__virtualenv_command) }}"
          environment: "{{ __bootstrap_pip__environment_ignore_root_user_action | d(omit) }}"
          register: __pip_update_result

        - name: "{{ __bootstrap_pip__log_prefix_pipenv }} Ensure pip version is at [{{ __bootstrap_pip_env.pip_version }}]"
          when: __bootstrap_pip_env.pip_version|d('')!='latest'
          ansible.builtin.pip:
            name: pip=={{ __bootstrap_pip_env.pip_version }}
            state: present
            executable: "{{ __bootstrap_pip_env.pip_executable | d(__bootstrap_pip__pip_executable) }}"
            virtualenv: "{{ __bootstrap_pip_env.virtualenv | d(omit) }}"
            virtualenv_command: "{{ __bootstrap_pip_env.virtualenv_command | d(omit) }}"
          #      virtualenv_command: "{{ __bootstrap_pip_env.virtualenv_command | d(__bootstrap_pip__virtualenv_command) }}"
          register: __pip_update_result

      rescue:
        ## ref: https://stackoverflow.com/questions/69503329/pip-is-not-working-for-python-3-10-on-ubuntu/69527217#69527217
        ## ref: https://stackoverflow.com/questions/70431655/importerror-cannot-import-name-html5lib-from-pip-vendor-usr-lib-python3
        - name: "{{ __bootstrap_pip__log_prefix_pipenv }} Install pip using downloaded pip installer"
          #    when:
          #      - __pip_update_result.msg | regex_search("cannot import name .* from 'pip._vendor'")
          ansible.builtin.include_tasks: run-get-pip.yml

- name: "{{ __bootstrap_pip__log_prefix_pipenv }} Init __bootstrap_pip_env_libs_list_by_priority"
  when: __bootstrap_pip__library_list_by_priority|d([])|length>0
  block:
    - name: "{{ __bootstrap_pip__log_prefix_pipenv }} Display __bootstrap_pip__library_list_by_priority"
      ansible.builtin.debug:
        var: __bootstrap_pip__library_list_by_priority

    - name: "{{ __bootstrap_pip__log_prefix_pipenv }} Init __bootstrap_pip_env_libs_list_by_priority"
      ansible.builtin.set_fact:
        __bootstrap_pip_env_libs_list_by_priority: "{{ __bootstrap_pip__library_list_by_priority }}"

- name: "{{ __bootstrap_pip__log_prefix_pipenv }} Set __bootstrap_pip_env_libs_list_by_priority"
  when: __bootstrap_pip_env.libraries|d([])|length>0
  block:
    - name: "{{ __bootstrap_pip__log_prefix_pipenv }} Set __bootstrap_pip_env_libs_list_by_priority"
      ansible.builtin.set_fact:
        __bootstrap_pip_env_libs_list_by_priority: "{{ __bootstrap_pip_env_libs_list_by_priority | d({}) | combine({ (item.priority | default(bootstrap_pip__lib_priority_default)|int):
          { item.state | default(bootstrap_pip__lib_state): { ((item is mapping) | ternary( item.name, item)): {} } } }, recursive=True) }}"
      loop: "{{ __bootstrap_pip_env.libraries }}"

- name: "{{ __bootstrap_pip__log_prefix_pipenv }} Display __bootstrap_pip_env_libs_list_by_priority"
  ansible.builtin.debug:
    var: __bootstrap_pip_env_libs_list_by_priority

- name: "{{ __bootstrap_pip__log_prefix_pipenv }} Ensure virtualenv pip libraries are installed for virtualenv"
  when:
    - not __bootstrap_pip_env.system|bool
    - __bootstrap_pip_env.virtualenv is defined
    - __bootstrap_pip_env_libs_list_by_priority[item].present is defined
    - __bootstrap_pip_env_libs_list_by_priority[item].present.keys()|d([])|length>0
  environment: "{{ bootstrap_pip__venv_environment_vars | d({}) }}"
  ansible.builtin.pip:
    name: "{{ __bootstrap_pip_env_libs_list_by_priority[item].present.keys() | list }}"
    state: present
    extra_args: "{{ __bootstrap_pip_env.extra_args | d(omit) }}"
    #    executable: "{{ __bootstrap_pip_env.pip_executable | d(omit) }}"
    virtualenv: "{{ __bootstrap_pip_env.virtualenv | d(omit) }}"
    virtualenv_command: "{{ __bootstrap_pip_env.virtualenv_command | d(__bootstrap_pip__virtualenv_command) }}"
  #    virtualenv_command: "{{ __bootstrap_pip_env.virtualenv_command | d(omit) }}"
    virtualenv_site_packages: "{{ __bootstrap_pip_env.virtualenv_site_packages | d(omit) }}"
  loop: "{{ __bootstrap_pip_env_libs_list_by_priority.keys()|sort }}"
  loop_control:
    label: installing pip packages with priority={{ item }}

- name: "{{ __bootstrap_pip__log_prefix_pipenv }} Ensure system pip libraries are installed"
  when:
#    - __bootstrap_pip_env.virtualenv is not defined
    - __bootstrap_pip_env.system|bool
    - __bootstrap_pip__system_pip_install_libs_allowed|bool
    - __bootstrap_pip_env_libs_list_by_priority[item].present is defined
    - __bootstrap_pip_env_libs_list_by_priority[item].present.keys()|d([])|length>0
  #  environment: "{{ bootstrap_pip__venv_environment_vars | d({}) }}"
  environment:
    #    PATH: "$PATH:/usr/bin:/usr/local/bin"
    PIP_ROOT_USER_ACTION: ignore
  ansible.builtin.pip:
    name: "{{ __bootstrap_pip_env_libs_list_by_priority[item].present.keys() | list }}"
    state: present
    extra_args: "{{ __bootstrap_pip_env.extra_args | d(omit) }}"
    executable: "{{ __bootstrap_pip_env.pip_executable | d(__bootstrap_pip__pip_executable) }}"
    virtualenv_command: "{{ __bootstrap_pip__virtualenv_command }}"
    virtualenv_python: "{{ __bootstrap_pip__python_executable }}"
  loop: "{{ __bootstrap_pip_env_libs_list_by_priority.keys()|sort }}"
  loop_control:
    label: installing pip packages with priority={{ item }}

### NOTE: Unable to find pip in the virtualenv (python 3.10)
### https://github.com/ansible/ansible/issues/77604
#- name: "{{ __bootstrap_pip__log_prefix_pipenv }} Install python libraries into virtualenv"
#  when:
#    - __bootstrap_pip_env.virtualenv is defined
#    - item.name | d()
#  ansible.builtin.pip:
#    name: >
#      {{ item.name }}{% if item.version|d('')|length>0 %}=={{ item.version }}{% endif %}
#    state: "{{ item.virtualenv_state | d('present') }}"
#    executable: "{{ __bootstrap_pip_env.pip_executable | d(omit) }}"
#    virtualenv: "{{ __bootstrap_pip_env.virtualenv | d(omit) }}"
#    virtualenv_command: "{{ __bootstrap_pip_env.virtualenv_command | d(__bootstrap_pip__virtualenv_command) }}"
##    virtualenv_command: "{{ __bootstrap_pip_env.virtualenv_command | d(omit) }}"
#  loop: "{{ bootstrap_pip__packages }}"
#  environment:
#    SETUPTOOLS_USE_DISTUTILS: stdlib

---
- name: Set OS specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
    - default.yml

- name: Display role vars
  ansible.builtin.debug:
    msg:
      - __bootstrap_pip__virtualenv_command={{ __bootstrap_pip__virtualenv_command }}
      - __bootstrap_pip__python_executable={{ __bootstrap_pip__python_executable }}
      - __bootstrap_pip__pip_executable={{ __bootstrap_pip__pip_executable }}
      - __bootstrap_pip__pip_version={{ __bootstrap_pip__pip_version }}
      - bootstrap_pip__packages={{ bootstrap_pip__packages }}
      - bootstrap_pip__config_dir={{ bootstrap_pip__config_dir }}
      - bootstrap_pip__env_force_rebuild={{ bootstrap_pip__env_force_rebuild }}

- name: Install pip env OS packages
  ansible.builtin.set_fact:
    __bootstrap_pip__packages: "{{ bootstrap_pip__packages }}"

#- name: "Add __bootstrap_pip__python_executable to __bootstrap_pip__packages if not python3"
#  when: __bootstrap_pip__python_executable != 'python3'
#  ansible.builtin.set_fact:
#    __bootstrap_pip__packages: "{{ (__bootstrap_pip__packages + [__bootstrap_pip__python_executable])
#      | flatten | sort | unique }}"

- name: Display __bootstrap_pip__packages
  ansible.builtin.debug:
    var: __bootstrap_pip__packages

- name: Install __bootstrap_pip__packages
  ansible.builtin.package:
    state: present
    name: "{{ __bootstrap_pip__packages }}"

## ref: https://pip.pypa.io/en/stable/topics/configuration/
- name: Ensure /etc/pip.conf
  ansible.builtin.copy:
    src: pip.conf
    dest: /etc/pip.conf
    mode: "0644"
    backup: true

#- name: "Create pip user config directory"
#  ansible.builtin.file:
#    path: "{{ bootstrap_pip__config_dir }}"
#    state: directory
#    mode: "0755"
#    owner: "{{ ansible_user }}"
#    group: "{{ ansible_user }}"
#
#- name: "Ensure {{ bootstrap_pip__config_dir }}//pip.conf"
#  ansible.builtin.copy:
#    src: pip.conf
#    dest: "{{ bootstrap_pip__config_dir }}/pip.conf"
#    mode: "0644"
#    owner: "{{ ansible_user }}"
#    backup: true

- name: Install system level virtualenv
  environment:
    #    PATH: "$PATH:/usr/bin:/usr/local/bin"
    PIP_ROOT_USER_ACTION: ignore
  ansible.builtin.pip:
    name: virtualenv
    state: present
    virtualenv_command: "{{ __bootstrap_pip__virtualenv_command }}"
    virtualenv_python: "{{ __bootstrap_pip__python_executable }}"

- name: Display __bootstrap_pip__libs
  ansible.builtin.debug:
    var: __bootstrap_pip__libs

- name: Set __bootstrap_pip__library_list_by_priority
  ansible.builtin.set_fact:
    __bootstrap_pip__library_list_by_priority: "{{ __bootstrap_pip__library_list_by_priority | d({}) | combine({ (item.priority | default(bootstrap_pip__lib_priority_default)|int):
      { item.state | default(bootstrap_pip__lib_state): { ((item is mapping) | ternary( item.name, item)): {} } } }, recursive=True) }}"
  loop: "{{ __bootstrap_pip__libs }}"

- name: Display __bootstrap_pip__library_list_by_priority
  ansible.builtin.debug:
    var: __bootstrap_pip__library_list_by_priority

- name: Set {{ role_name }} var prefix
  ansible.builtin.set_fact:
    role_var_prefix: "{{ role_name | replace('-','_') }}"

- name: Set {{ role_name }} list var prefixes
  ansible.builtin.set_fact:
    role_pip_env_list_var_prefix: "{{ role_var_prefix }}__env_list__"

- name: Set {{ role_name }} var regex's
  ansible.builtin.set_fact:
    role_pip_env_list_var_regex: ^{{ role_pip_env_list_var_prefix }}

- name: Init __bootstrap_pip__env_list
  ansible.builtin.set_fact:
    __bootstrap_pip__env_list: "{{ __bootstrap_pip__env_list__default }}"

- name: Display __bootstrap_pip__env_list[0]
  ansible.builtin.debug:
    var: __bootstrap_pip__env_list

- name: Show variable names with '{{ role_pip_env_list_var_regex }}' regex
  ansible.builtin.debug:
    msg: "{{ lookup('varnames', role_pip_env_list_var_regex, wantlist=True) }}"

#- name: "Show variable values with '{{ role_pip_env_list_var_regex }}' regex"
#  ansible.builtin.debug:
#    var: "{{ lookup('vars', item) }}"
#  loop: "{{ lookup('varnames', role_pip_env_list_var_regex, wantlist=True) }}"

- name: Coalesce lists from {{ role_pip_env_list_var_prefix }}* vars into merged list
  ansible.builtin.set_fact:
    __bootstrap_pip__env_list: "{{ __bootstrap_pip__env_list|d([]) + lookup('vars', item)|d([]) }}"
  loop: "{{ lookup('varnames', role_pip_env_list_var_regex, wantlist=True) }}"

- name: Display __bootstrap_pip__env_list
  ansible.builtin.debug:
    var: __bootstrap_pip__env_list

- name: Set __bootstrap_pip__env_by_name
  ansible.builtin.set_fact:
    __bootstrap_pip__env_by_name: "{{ _bootstrap_pip__env_by_name_yaml | from_yaml }}"
  vars:
    _bootstrap_pip__env_by_name_yaml: |-
      {% set _bootstrap_pip_env_by_name = {} %}
      {% for item in __bootstrap_pip__env_list %}
        {% set _bootstrap_pip_env = item %}
        {% set _env_name = item.virtualenv | d(item.pip_executable) | d(__bootstrap_pip__pip_executable) %}
        {% set __ = _bootstrap_pip_env.update({'name': _env_name }) %}
        {% if item.virtualenv is defined %}
          {% set __ = _bootstrap_pip_env.update({'python_executable': item.python_executable | d(item.virtualenv + '/bin/python3') }) %}
        {% else %}
          {% set __ = _bootstrap_pip_env.update({'python_executable': item.python_executable | d(__bootstrap_pip__python_executable) }) %}
        {% endif %}
        {% set __ = _bootstrap_pip_env.update({'pip_executable': item.pip_executable | d(__bootstrap_pip__pip_executable) }) %}
        {% set __ = _bootstrap_pip_env.update({'pip_version': item.version | d(__bootstrap_pip__pip_version) }) %}
        {% set __ = _bootstrap_pip_env_by_name.update({ _env_name: _bootstrap_pip_env }) %}
      {% endfor %}
      {{ _bootstrap_pip_env_by_name }}

- name: Display __bootstrap_pip__env_by_name
  ansible.builtin.debug:
    var: __bootstrap_pip__env_by_name

- name: Install | Install pip libs
  ansible.builtin.include_tasks: install-pip-libs.yml
  loop: "{{ __bootstrap_pip__env_by_name.values() | list }}"
  loop_control:
    loop_var: __bootstrap_pip_env

---

- name: Playbook for role testing
  hosts: localhost
  connection: local
  become: true
  tasks:

    - name: Remove 20 random files from remote
      delegate_to: "{{ remote_host }}"
      ansible.builtin.shell: find . -type f | sort -R | tail -n 20 | xargs rm
      args:
        chdir: "{{ remote_filesystem_path }}"
      register: remove_random_files

    - name: Display remove_random_files
      ansible.builtin.debug:
        var: remove_random_files

    - name: Compare source and remote content before rsync
      ansible.builtin.include_tasks: tasks/diff-source-and-remote.yml

    - name: install rsync if not present
      ansible.builtin.package:
        name: rsync
        state: present
      register: rsync_out
      delegate_to: "{{ item }}"
      loop:
        - "{{ remote_host }}"
        - "{{ source_host }}"

    - name: set facts
      ansible.builtin.set_fact:
        rsync_dict: "{{ rsync_dict | default([]) | union([{'status': item.changed, 'ip': item.item }]) }}"
      loop: "{{ rsync_out.results }}"

    #- name: backup the rsyncd.conf
    #  ansible.builtin.command: "cp /etc/rsyncd.conf /etc/rsyncd.conf.bkup"
    #  when: item.status == false
    #  delegate_to: "{{ item.ip }}"
    #  ignore_errors: true
    #  loop: "{{ rsync_dict }}"
    #

    - name: configure the /etc/rsync.conf file
      ansible.builtin.template:
        src: rsyncd.conf.j2
        dest: /etc/rsyncd.conf
        backup: true
      delegate_to: "{{ remote_host }}"

    - name: start and enable the service
      ansible.builtin.service:
        name: rsyncd
        state: restarted
        enabled: yes
      delegate_to: "{{ item }}"
      loop:
        - "{{ remote_host }}"
    #     - "{{ source_host }}"

    - name: restart rsyncd
      ansible.builtin.service:
        name: rsyncd
        state: restarted
      become: yes
      delegate_to: "{{ remote_host }}"

    - name: run rsync commnad
      #  ansible.builtin.command: "rsync -avz --delete-before {{ local_filesystem_path }} {{ remote_host }}::files"
      ansible.builtin.shell: >
        rsync -arP
        --rsync-path 'sudo -u root rsync'
        --update
        --delete
        {{ local_filesystem_path }}
        {{ ansible_ssh_user }}@{{ remote_host }}::files
      #    {{ ansible_ssh_user }}@{{ remote_host }}:{{ remote_filesystem_path }}
      become: yes
      delegate_to: "{{ source_host }}"

    - name: Compare source and remote content after rsync
      ansible.builtin.include_tasks: tasks/diff-source-and-remote.yml

    #- name: restore the backup of the rsyncd.conf
    #  ansible.builtin.command: "mv /etc/rsyncd.conf.bkup /etc/rsyncd.conf"
    #  when: item.status == false
    #  delegate_to: "{{ item.ip }}"
    #  loop: "{{ rsync_dict }}"

    #- name: uninstall rsync
    #  ansible.builtin.package:
    #    name: rsync
    #    state: absent
    #  when: item.status == true
    #  delegate_to: "{{ item.ip }}"
    #  loop: "{{ rsync_dict }}"

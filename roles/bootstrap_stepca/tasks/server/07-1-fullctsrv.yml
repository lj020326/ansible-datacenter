---
- name: Creating configuration file of Trillian services
  ansible.builtin.template:
    dest: "{{ trillian_install_root }}/config/{{ item }}.cfg"
    src: ct_config/{{ item }}.cfg.j2
    mode: "0644"
  loop:
    - log-server
    - log-signer

- name: Creating Trillian systemd services
  ansible.builtin.template:
    dest: /etc/systemd/system/{{ item }}.service
    src: ct_systemd_units/{{ item }}.service
    mode: "0644"
  loop: "{{ ctlog_services }}"

- name: Calcuating log shards differences
  block:
    - name: Set __current_prefixes
      ansible.builtin.set_fact:
        __current_prefixes: "{{ ansible_local.ctlog.current_shards | d([]) | map(attribute='prefix') | list }}"
        __desired_prefixes: "{{ ctlog_shards | map(attribute='prefix') | list }}"

    - name: Set __remove_prefixes
      ansible.builtin.set_fact:
        __remove_prefixes: "{{ __current_prefixes | difference(__desired_prefixes) }}"
        __new_prefixes: "{{ __desired_prefixes | difference(__current_prefixes) }}"
        __stay_prefixes: "{{ __current_prefixes | intersect(__desired_prefixes) }}"

- name: Configuring log shards
  when: __new_prefixes | length or __remove_prefixes| length > 0
  block:
    - name: Starting Trillian for now
      ansible.builtin.systemd:
        name: trillian-log
        daemon_reload: true
        state: started

    - name: Creating new log trees
      changed_when: false
      ansible.builtin.command:
        cmd: "{{ trillian_install_root }}/createtree --admin_server 127.0.0.1:{{ trillian_log_server_grpc }} --display_name {{ item }}"
      loop: "{{ __new_prefixes }}"
      register: __new_tree_ids

    - name: Deleting removed log trees
      changed_when: false
      ansible.builtin.command:
        cmd: "{{ trillian_install_root }}/deletetree --admin_server 127.0.0.1:{{ trillian_log_server_grpc }} --log_id {{ item }}"
      loop: "{{ __remove_prefixes }}"

    - name: Stopping Trillian
      ansible.builtin.systemd:
        name: trillian-log
        state: stopped

    - name: Generating log signing key
      community.crypto.openssl_privatekey:
        path: "{{ secret + '/certificates/' + ansible_fqdn + '/ctlog/' + item + '.key' }}"
        type: ECC
        curve: secp256r1
      loop: "{{ __new_prefixes }}"
      delegate_to: 127.0.0.1

    - name: Obtaining log signing public key
      changed_when: false
      ansible.builtin.command:
        cmd: openssl ec -in {{ item }}.key -pubout -out {{ item }}.pub
        chdir: "{{ secret + '/certificates/' + ansible_fqdn + '/ctlog' }}"
      loop: "{{ __new_prefixes }}"
      delegate_to: 127.0.0.1

    #    - name: Obtaining log signing public key
    #      community.crypto.openssl_publickey:
    #        path: "{{ secret + '/certificates/' + ansible_fqdn + '/ctlog/' + item + '.pub' }}"
    #        privatekey_path: "{{ secret + '/certificates/' + ansible_fqdn + '/ctlog/' + item + '.key' }}"
    #      loop: "{{ __new_prefixes }}"
    #      delegate_to: 127.0.0.1

    - name: Removing removed log signing key
      ansible.builtin.file:
        path: "{{ secret + '/certificates/' + ansible_fqdn + '/ctlog/' + item }}"
        state: absent
      loop: "{{ __remove_prefixes | product(['key', 'pub']) | map('join', '.') | list }}"
      delegate_to: 127.0.0.1

    - name: Synchronizing log signing keys
      ansible.posix.synchronize:
        dest: "{{ ct_install_root + '/signing_keys/' }}"
        src: "{{ secret + '/certificates/' + ansible_fqdn + '/ctlog/' }}"
        archive: false
        compress: false
        delete: true
        recursive: true

    - name: Calculating current established shard informations
      block:
        - name: Set __new_shards
          ansible.builtin.set_fact:
            __new_shards: "{{ __new_shards | d([]) + [ { 'prefix': item.0, 'id': item.1 } ] }}"
          loop: "{{ __new_prefixes | zip(__new_tree_ids.results | map(attribute='stdout')) | list }}"

        - name: Set __all_shards_id
          ansible.builtin.set_fact:
            __all_shards_id: "{{ (ansible_local.ctlog.current_shards | d([]) +
              __new_shards | d([])) | sort(False, True, attribute='prefix') }}"

        - name: Set __all_shards
          ansible.builtin.set_fact:
            __all_shards: "{{ __all_shards | d([]) + [ item.0 | combine(item.1) ] }}"
          loop: "{{ ctlog_shards | sort(False,True,attribute='prefix') | zip(__all_shards_id) | list }}"

    - name: Updating current established trees info
      block:
        - name: Ensure /etc/ansible/facts.d
          ansible.builtin.file:
            path: /etc/ansible/facts.d
            state: directory
            mode: "0755"

        - name: Update /etc/ansible/facts.d/ctlog.fact
          ansible.builtin.copy:
            dest: /etc/ansible/facts.d/ctlog.fact
            mode: "0644"
            content: |
              {
                "current_shards": [
                  {% for i in __all_shards_id %}
                    {
                      "prefix": "{{ i.prefix }}",
                      "id": {{ i.id }}
                    }{{ ',' if not loop.last else '' }}
                  {% endfor %}
                ]
              }

    - name: Generating CT log definitions
      ansible.builtin.template:
        dest: "{{ ct_install_root }}/config/log_definitions.cfg"
        src: ct_config/log_definitions.cfg.j2
        mode: "0644"

- name: Inserting signing public key information to stepca's ra.json
  ansible.builtin.replace:
    path: "{{ install_root + '/config/ra.json' }}"
    after: "{{ item }}"
    before: submitFinalCert
    regexp: "@@TOBEREPLACED@@"
    replace: "{{ lookup('file', secret + '/certificates/' + ansible_fqdn + '/ctlog/' + item + '.pub') | decap_pem }}"
  loop: "{{ __stay_prefixes + __new_prefixes | d([]) }}"

- name: Copying accepting CA certificate file
  ansible.builtin.copy:
    src: "{{ secret + '/certificates/' + ansible_fqdn + '/issuing/' + issuing_ca_crtname }}"
    dest: "{{ ct_install_root + '/config/' + issuing_ca_crtname }}"
    mode: "0644"

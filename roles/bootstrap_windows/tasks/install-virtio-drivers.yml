---
# tasks file for virtio-win

- name: Get list of all drivers
  ansible.windows.win_command: driverquery /V
  changed_when: false
  register: driver_list

- name: Check if Red Hat certificate is not already installed
  ansible.windows.win_shell: Get-ChildItem -Path Cert:\LocalMachine\TrustedPublisher
  changed_when: false
  register: cert_check

- name: Download virtio-win.iso to {{ ansible_env.TEMP }}
  when: bootstrap_windows_virtio_win_iso_path is not defined
  ansible.windows.win_get_url:
    url: "{{ bootstrap_windows_virtio_win_iso_url }}"
    force: false
    dest: "{{ ansible_env.TEMP }}\\virtio-win.iso"

- name: Mount virtio-win.iso
  when: bootstrap_windows_virtio_win_iso_path is not defined
  community.windows.win_disk_image:
    image_path: "{{ ansible_env.TEMP }}\\virtio-win.iso"
  register: win_disk_image

- name: Set the bootstrap_windows_virtio_win_iso_path from predefined value or mounted ISO
  when: bootstrap_windows_virtio_win_iso_path is not defined
  ansible.builtin.set_fact:
    bootstrap_windows_virtio_win_iso_path: "{{ win_disk_image.mount_path }}"

- name: Install RH certificate
  when: cert_check.stdout is not search("Red Hat")
  block:
    - name: Export Cert from balloon
      ansible.windows.win_shell: |
        $cert = (Get-AuthenticodeSignature "{{ bootstrap_windows_virtio_win_iso_path }}\Balloon\{{ virtio_driver_directory }}\amd64\blnsvr.exe").SignerCertificate;
        [System.IO.File]::WriteAllBytes("{{ ansible_env.TEMP }}\redhat_balloon.cer", $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert));

    - name: Install RH certificate (Balloon) to TrustedPublisher certificate store
      ansible.windows.win_command: |
        certutil.exe -f -addstore "TrustedPublisher" "{{ ansible_env.TEMP }}\redhat_balloon.cer"

- name: Install the Virtio Network Driver (netkvm)
  when: driver_list.stdout is not search("netkvm")
  ansible.windows.win_command: |
    pnputil -i -a "{{ bootstrap_windows_virtio_win_iso_path }}\NetKVM\{{ virtio_driver_directory }}\{{ 
      ansible_env.PROCESSOR_ARCHITECTURE | lower }}\*.inf"

- name: Install the Virtio Block Driver (viostor)
  when: driver_list.stdout is not search("viostor")
  ansible.windows.win_command: |
    pnputil -i -a "{{ bootstrap_windows_virtio_win_iso_path }}\viostor\{{ virtio_driver_directory }}\{{ 
      ansible_env.PROCESSOR_ARCHITECTURE | lower }}\*.inf"

# This workaround should be removed...
# Using old 2k19 driver for Microsoft Windows Server 2022, because 2k22 is not ready yet
- name: Install the QXL Graphics Driver (qxldod)
  when:
    - driver_list.stdout is not search("qxldod")
    - ansible_distribution is not search("Microsoft Windows Server 2022 Datacenter Evaluation")
  ansible.windows.win_command: |
    pnputil -i -a "{{ bootstrap_windows_virtio_win_iso_path }}\qxldod\{{ virtio_driver_directory }}\{{ 
      ansible_env.PROCESSOR_ARCHITECTURE | lower }}\*.inf"

# This workaround should be removed...
# Using old 2k19 driver for Microsoft Windows Server 2022, because 2k22 is not ready yet
- name: Install the QXL Graphics Driver (qxldod) - Win Server 2022
  when:
    - driver_list.stdout is not search("qxldod")
    - ansible_distribution is search("Microsoft Windows Server 2022 Datacenter Evaluation")
  ansible.windows.win_command: |
    pnputil -i -a "{{ bootstrap_windows_virtio_win_iso_path }}\qxldod\2k19\{{ 
      ansible_env.PROCESSOR_ARCHITECTURE | lower }}\*.inf"

- name: Install the Balloon Driver (Balloon)
  when: driver_list.stdout is not search("balloon")
  ansible.windows.win_command: |
    pnputil -i -a "{{ bootstrap_windows_virtio_win_iso_path }}\Balloon\{{ virtio_driver_directory }}\{{ 
      ansible_env.PROCESSOR_ARCHITECTURE | lower }}\*.inf"

- name: Install Virtio RNG driver (viorng)
  when: driver_list.stdout is not search("viorng")
  ansible.windows.win_command: |
    pnputil -i -a "{{ bootstrap_windows_virtio_win_iso_path }}\viorng\{{ virtio_driver_directory }}\{{ 
      ansible_env.PROCESSOR_ARCHITECTURE | lower }}\*.inf"

- name: Install Virtio serial driver (vioserial)
  when: driver_list.stdout is not search("vioser")
  ansible.windows.win_command: |
    pnputil -i -a "{{ bootstrap_windows_virtio_win_iso_path }}\vioserial\{{ virtio_driver_directory }}\{{ 
      ansible_env.PROCESSOR_ARCHITECTURE | lower }}\*.inf"

- name: Install Virtio Input driver (vioinput)
  when: driver_list.stdout is not search("vioinput")
  ansible.windows.win_command: |
    pnputil -i -a "{{ bootstrap_windows_virtio_win_iso_path }}\vioinput\{{ virtio_driver_directory }}\{{ 
      ansible_env.PROCESSOR_ARCHITECTURE | lower }}\*.inf"

#- name: Install pvpanic device driver (pvpanic)
#  when: driver_list.stdout is not search("pvpanic")
#  ansible.windows.win_command: |
#    pnputil -i -a "{{ bootstrap_windows_virtio_win_iso_path }}\\pvpanic\\{{ virtio_driver_directory }}\\{{
#      ansible_env.PROCESSOR_ARCHITECTURE | lower }}\\*.inf"

- name: Install Qemu Guest Agent (qemu-ga-x86_64.msi)
  ansible.windows.win_package:
    path: "{{ bootstrap_windows_virtio_win_iso_path }}\\guest-agent\\qemu-ga-x86_64.msi"
    creates_path: "{{ ansible_env['ProgramFiles'] }}\\qemu-ga"

- name: Install and enable spice-webdavd service (spice-webdavd-x64-latest.msi)
  ansible.windows.win_package:
    path: https://www.spice-space.org/download/windows/spice-webdavd/spice-webdavd-x64-latest.msi
    creates_path: "{{ ansible_env['ProgramFiles'] }}\\SPICE webdavd"
  register: result
  until: result is succeeded

- name: Unmount virtio-win.iso
  when: win_disk_image.mount_path is defined
  community.windows.win_disk_image:
    image_path: "{{ ansible_env.TEMP }}\\virtio-win.iso"
    state: absent

- name: Delete previously downloaded iso and the certificates {{ ansible_env.SystemDrive }}\{redhat_balloon.cer,redhat_qxldod.cer}
  ansible.windows.win_file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ ansible_env.TEMP }}\\redhat_balloon.cer"
    - "{{ ansible_env.TEMP }}\\redhat_qxldod.cer"
    - "{{ ansible_env.TEMP }}\\virtio-win.iso"

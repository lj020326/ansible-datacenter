---

##
## Remove roles
##

- name: Flatten the list of roles
  set_fact:
    tower_role_list: "{{ _role_list|from_yaml }}"
  vars:
    _role_list: |-
      {% for i in tower_organizations %}
      {% if "teams" in i %}
      {% for j in i.teams %}
      {% if "roles" in j %}
      {% for k in j.roles %}
      - {{ k | combine({ 'team': j.name, 'state': tower_resource_state }) }}
      {% endfor %}
      {% endif %}
      {% endfor %}
      {% endif %}
      {% endfor %}

- name: Combine lists of roles
  set_fact:
    tower_role_list: "{{ tower_role_list|d([]) + tower_roles|d([]) }}"

- name: "Set tower_role_list state"
  set_fact:
    tower_role_list: "{{ tower_role_list | map('combine', {'state': tower_resource_state }) }}"

- name: Display tower_role_list
  debug:
    var: tower_role_list

- name: Remove roles
  when: tower_role_list|length>0
  tower_role: "{{ item }}"
  loop: "{{ tower_role_list }}"
  register: tower_cmd
  failed_when: tower_cmd is failed and "not found" not in tower_cmd.msg


##
## Remove teams
##

- name: Flatten the list of organization teams
  set_fact:
    tower_team_list: "{{ _team_list|d([])|from_yaml }}"
  vars:
    _team_list: |-
      {% for i in tower_organizations %}
      {% if "teams" in i %}
      {% for j in i.teams %}
      {% set copy=j.copy() %}
      {% set removed=copy.pop('roles') %}
      {% set removed=copy.pop('team_role') %}
      {% set removed=copy.pop('organization_role') %}
      - {{ { 'organization': i.name, 'state': tower_resource_state } | combine(copy) }}
      {% endfor %}
      {% endif %}
      {% endfor %}

- name: Combine lists of teams
  set_fact:
    tower_team_list: "{{ tower_team_list|d([]) + tower_teams|d([]) }}"

- name: "Set tower_team_list state"
  set_fact:
    tower_team_list: "{{ tower_team_list | map('combine', {'state': tower_resource_state }) }}"

- name: Display tower_team_list
  debug:
    var: tower_team_list

- name: Remove teams
  when: tower_team_list|d([])|length>0
  tower_team: "{{ item }}"
  loop: "{{ tower_team_list }}"
  register: tower_cmd
  failed_when: tower_cmd is failed and "not found" not in tower_cmd.msg



##
## Remove job_templates
##

- name: Flatten the list of templates
  set_fact:
    tower_template_list: "{{ _template_list|d([])|from_yaml }}"
  vars:
    _template_list: |-
      {% for i in tower_organizations %}
      {% if "projects" in i %}
      {% for j in i.projects %}
      {% if "job_templates" in j %}
      {% for k in j.job_templates %}
      - {{ k | combine( { 'organization': i.name, 'project': j.name, 'state': 'absent' } ) }}
      {% endfor %}
      {% endif %}
      {% endfor %}
      {% endif %}
      {% endfor %}

- name: Combine lists of job_templates
  set_fact:
    tower_template_list: "{{ tower_template_list|d([]) + tower_templates|d([]) }}"

- name: "Set tower_template_list state"
  set_fact:
    tower_template_list: "{{ tower_template_list | map('combine', {'state': tower_resource_state }) }}"

- name: Display tower_template_list
  debug:
    var: tower_template_list

- name: Remove project job templates
  when: tower_template_list|d([])|length>0
  tower_job_template: "{{ item }}"
  loop: "{{ tower_template_list }}"
  register: tower_cmd
  failed_when: tower_cmd is failed and "not found" not in tower_cmd.msg


##
## Remove projects
##


- name: Flatten the list of organization projects
  set_fact:
    tower_project_list: "{{ _project_list|d([])|from_yaml }}"
  vars:
    _project_list: |-
      {% for i in tower_organizations %}
      {% if "projects" in i %}
      {% for j in i.projects %}
      {% set copy=j.copy() %}{% set removed=copy.pop('job_templates') %}
      - {{ { 'organization': i.name, 'state': tower_resource_state } | combine(copy) }}
      {% endfor %}
      {% endif %}
      {% endfor %}

- name: Combine lists of projects
  set_fact:
    tower_project_list: "{{ tower_project_list|d([]) + tower_projects|d([]) }}"

- name: "Set tower_project_list state"
  set_fact:
    tower_project_list: "{{ tower_project_list | map('combine', {'state': tower_resource_state }) }}"

- name: Display tower_project_list
  debug:
    var: tower_project_list

- name: Remove projects
  when: tower_project_list|d([])|length>0
  tower_project: "{{ item }}"
  loop: "{{ tower_project_list }}"
  register: tower_cmd
  failed_when: tower_cmd is failed and "not found" not in tower_cmd.msg


##
## Remove inventories
##

- name: Flatten the list of organization inventories
  set_fact:
    tower_inventory_list: "{{ _inventory_list|d([])|from_yaml }}"
  vars:
    _inventory_list: |-
      {% for i in tower_organizations %}
      {% if "inventories" in i %}
      {% for j in i.inventories %}
      - {{ { 'organization': i.name, 'state': tower_resource_state } | combine(j) }}
      {% endfor %}
      {% endif %}
      {% endfor %}

- name: Combine lists of inventories
  set_fact:
    tower_inventory_list: "{{ tower_inventory_list|d([]) + tower_inventories|d([]) }}"

- name: "Set tower_inventory_list state"
  set_fact:
    tower_inventory_list: "{{ tower_inventory_list | map('combine', {'state': tower_resource_state }) }}"

- name: Display tower_inventory_list
  debug:
    var: tower_inventory_list

- name: Remove inventories
  when: tower_inventory_list|d([])|length>0
  tower_inventory: "{{ item }}"
  loop: "{{ tower_inventory_list }}"
  register: tower_cmd
  failed_when: tower_cmd is failed and "not found" not in tower_cmd.msg


##
## Remove credentials
##

- name: Flatten the list of organization credentials
  set_fact:
    tower_credential_list: "{{ _credential_list|from_yaml }}"
  vars:
    _credential_list: |-
      {% for i in tower_organizations %}
      {% if "credentials" in i %}
      {% for j in i.credentials %}
      - {{ { 'organization': i.name, 'state': tower_resource_state } | combine(j) }}
      {% endfor %}
      {% endif %}
      {% endfor %}

- name: Combine lists of credentials
  set_fact:
    tower_credential_list: "{{ tower_credential_list|d([]) + tower_credentials|d([]) }}"

- name: "Set tower_credential_list state"
  set_fact:
    tower_credential_list: "{{ tower_credential_list | map('combine', {'state': tower_resource_state }) }}"

- name: Display tower_credential_list
  debug:
    var: tower_credential_list

- name: Remove org credentials
  tower_credential: "{{ item }}"
  changed_when: no
  loop: "{{ tower_credential_list }}"
  register: tower_cmd
  failed_when: tower_cmd is failed and "not found" not in tower_cmd.msg



##
## Remove organizations
##

- name: Remove organizations
  when: tower_organizations|length>0
  tower_organization:
    name: "{{ item.name }}"
    state: "{{ tower_resource_state }}"
  loop: "{{ tower_organizations }}"
  register: tower_cmd
  failed_when: tower_cmd is failed and "not found" not in tower_cmd.msg


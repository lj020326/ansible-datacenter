---

- name: Install the required  packages in Redhat derivatives
  package:
    name: "{{ network_pkgs }}"
    state: present
  when: network_check_packages|bool

- name: Write configuration files for rhel route configuration with vlan
  template:
    src: "route_{{ ansible_os_family }}.j2"
    dest: "{{ net_path }}/route-{{ item.device }}"
  with_items: "{{ network_vlan_interfaces }}"
  when: network_ether_interfaces is defined and item.route is defined

- name: Write configuration files for rhel route configuration
  template:
    src: "route_{{ ansible_os_family }}.j2"
    dest: "{{ net_path }}/route-{{ item.device }}"
  with_items: "{{ network_ether_interfaces }}"
  when: network_ether_interfaces is defined and item.route is defined

- name: Write configuration files for bond route configuration
  template:
    src: "route_{{ ansible_os_family }}.j2"
    dest: "{{ net_path }}/route-{{ item.device }}"
  with_items: "{{ network_bond_interfaces }}"
  when: network_bond_interfaces is defined and item.route is defined

- name: Write configuration files for bridge route configuration
  template:
    src: "route_{{ ansible_os_family }}.j2"
    dest: "{{ net_path }}/route-{{ item.device }}"
  with_items: "{{ network_bridge_interfaces }}"
  when: network_bridge_interfaces is defined and item.route is defined

- name: Cleanup gateway dev that does not set to the one we want
  lineinfile:
    dest: /etc/sysconfig/network
    regexp: "^GATEWAYDEV=(?!{{ gateway_dev }})"
    state: absent
  when: gateway_dev is defined

- name: Explicitly set the gateway device
  lineinfile:
    dest: /etc/sysconfig/network
    line: "GATEWAYDEV={{ gateway_dev }}"
  when: gateway_dev is defined

- name: Enable the "network" service
  service:
    name: network
    enabled: true
  check_mode: yes
  register: network_service
  ignore_errors: true
  when: network_allow_service_restart|bool

- name: Verify if the "network" service is enabled
  set_fact:
    network_service_enabled: "{{ not network_service.failed
        and not network_service.changed }}"
#  when: network_allow_service_restart|bool and ansible_os_family == 'RedHat'
  when: network_allow_service_restart|bool

- name: Enable the "NetworkManager" service
  service:
    name: NetworkManager
    enabled: true
  check_mode: yes
  register: NetworkManager_service
  ignore_errors: true
#  when: network_allow_service_restart|bool and ansible_os_family == 'RedHat'
  when: network_allow_service_restart|bool

- name: Verify if the "NetworkManager" service is enabled
  set_fact:
    NetworkManager_service_enabled: "{{ not NetworkManager_service.failed
        and not NetworkManager_service.changed }}"
#  when: network_allow_service_restart|bool and ansible_os_family == 'RedHat'
  when: network_allow_service_restart|bool

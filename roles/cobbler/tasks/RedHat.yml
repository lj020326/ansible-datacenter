---
# tasks file for rbicker.cobbler
# ref: https://github.com/rbicker/ansible-cobbler/blob/master/tasks/main.yml
- include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "default.yml"

- name: ensure required packages are installed
  package:
    name: "{{ cobbler_packages[ansible_os_family] }}"
    state: present

- name: ensure bind is installed
  package:
    name: "{{ bind_packages[ansible_os_family] }}"
    state: present
  when: cobbler_manage_dns | bool

- name: ensure dhcp is installed
  package:
    name: dhcp
    state: present
  when: cobbler_manage_dhcp | bool

- name: RedHat | Ensure httpd is setup
  when: ansible_os_family == "RedHat"
  block:
    - name: ensure httpd can talk to cobblerd (selinux)
      seboolean:
        name: httpd_can_network_connect
        state: yes
        persistent: yes

    - name: ensure httpd service is enabled
      service:
        name: httpd
        enabled: yes
        state: started

    - name: ensure xinetd service is enabled and started
      service:
        name: xinetd
        enabled: yes
        state: started

    - name: ensure named-chroot is enabled and started
      service:
        name: named-chroot
        enabled: yes
        state: started
      when: cobbler_manage_dns | bool

    - name: ensure dhcpd
      service:
        name: dhcpd
        enabled: yes
      when: cobbler_manage_dhcp | bool

    - name: ensure cobbler services is enabled and started
      service:
        name: cobblerd
        enabled: yes
        state: started
      notify: restart apache

- name: copy modern django urls
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {src: 'urls.py', dest: "/usr/share/cobbler/web/urls.py"}
    - {src: 'cobbler_web/urls.py', dest: "/usr/share/cobbler/web/cobbler_web/urls.py"}

- name: update modern django settings/urls
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {src: 'settings.py.j2', dest: "/usr/share/cobbler/web/settings.py"}

- name: ensure cobbler templates are present
  template:
    src: "{{ item }}.template"
    dest: "/etc/cobbler/{{ item }}.template"
  with_items:
    - dhcp
    - dnsmasq
    - named
    - rsync
    - secondary
    - tftpd
    - zone
  notify: restart cobblerd
  when: cobbler_templates_force | bool

- name: ensure server is set in /etc/cobbler/settings
  lineinfile:
    line: "server: {{ ansible_default_ipv4.address }}"
    regexp: "^server:"
    dest: /etc/cobbler/settings
  notify: restart cobblerd

- name: ensure next_server is set in /etc/cobbler/settings
  lineinfile:
    line: "next_server: {{ ansible_default_ipv4.address }}"
    regexp: "^next_server:"
    dest: /etc/cobbler/settings
  notify: restart cobblerd

- name: ensure default_password_crypted is set in /etc/cobbler/settings
  lineinfile:
    line: "default_password_crypted: {{ cobbler_default_password_crypted }}"
    regexp: "^default_password_crypted:"
    dest: /etc/cobbler/settings
  notify: restart cobblerd

- name: ensure pxe_just_once is enabled in /etc/cobbler/settings
  lineinfile:
    line: "pxe_just_once: {{ cobbler_pxe_just_once }}"
    regexp: "^pxe_just_once:"
    dest: /etc/cobbler/settings
  notify: restart cobblerd

- name: ensure authn_configfile is set in /etc/cobbler/modules.conf for cobbler web
  lineinfile:
    line: "module = authn_configfile"
    regexp: "^module = authn"
    insertafter: "[authentication]"
    dest: /etc/cobbler/modules.conf
  notify:
   - restart cobblerd
   - restart apache

- name: ensure authz_allowall is set in /etc/cobbler/modules.conf for cobbler web
  lineinfile:
    line: "module = authz_allowall"
    regexp: "^module = authz"
    insertafter: "[authorization]"
    dest: /etc/cobbler/modules.conf
  notify:
   - restart cobblerd
   - restart apache

- name: ensure cobbler web password is set
  copy:
    content: cobbler:Cobbler:{{ cobbler_web_password_crypted }}
    dest: /etc/cobbler/users.digest
  notify:
   - restart cobblerd
   - restart apache

- name: ensure dhcp management is enabled in /etc/cobbler/settings
  lineinfile:
    line: "manage_dhcp: {{ cobbler_manage_dhcp }}"
    regexp: "^manage_dhcp:"
    dest: /etc/cobbler/settings
  notify: restart cobblerd

- name: ensure dns management is enabled in /etc/cobbler/settings
  lineinfile:
    line: "manage_dns: {{ cobbler_manage_dns }}"
    regexp: "^manage_dns:"
    dest: /etc/cobbler/settings
  notify: restart cobblerd
  register: cobbler_dns_enabled

- name: ensure /etc/secondary.conf exists with se type cobbler_var_lib_t
  file:
    state: touch
    setype: cobbler_var_lib_t
    path: /etc/secondary.conf
  when: cobbler_dns_enabled.changed

- name: ensure dns forward zones are set in /etc/cobbler/settings
  lineinfile:
    line: "manage_forward_zones: {{ cobbler_manage_forward_zones }}"
    regexp: "^manage_forward_zones:"
    dest: /etc/cobbler/settings
  notify: restart cobblerd
  when: cobbler_manage_dns | bool

- name: ensure dns reverse zones are set in /etc/cobbler/settings
  lineinfile:
    line: "manage_reverse_zones: {{ cobbler_manage_reverse_zones }}"
    regexp: "^manage_reverse_zones:"
    dest: /etc/cobbler/settings
  notify: restart cobblerd
  when: cobbler_manage_dns | bool

- name: ensure di_dists directive is set in /etc/debmirror.conf
  lineinfile:
    line: "@di_dists=\"dists\";"
    regexp: "@di_dists="
    dest: /etc/debmirror.conf

- name: ensure di_archs directive is set in /etc/debmirror.conf
  lineinfile:
    line: "@di_archs=\"arches\";"
    regexp: "@di_archs="
    dest: /etc/debmirror.conf

- name: ensure cobbler profile folder exists in /var/www/cobbler/ks_mirror/
  file:
    path: "/var/www/cobbler/ks_mirror/{{ item.name }}-{{ item.arch }}"
    state: directory
  with_items: "{{ cobbler_profiles }}"
  register: cobbler_profiles_folders

- name: ensure folder for iso files exist
  file:
    path: "{{ cobbler_isos_path }}"
    state: directory

- name: ensure iso mount path exists
  file:
    path: "{{ cobbler_isos_mount_path }}"
    state: directory

- name: ensure iso files are present
  get_url:
    url: "{{ item.item.url }}"
    dest: "{{ cobbler_isos_path }}/{{ item.item.name }}.iso"
  with_items: "{{ cobbler_profiles_folders.results }}"
  when: item.changed == true

- name: ensure isos are mounted
  mount:
    src: "{{ cobbler_isos_path }}/{{ item.item.name }}.iso"
    path: "{{ cobbler_isos_mount_path }}/{{ item.item.name }}"
    opts: ro
    fstype: iso9660
    state: mounted
  when: item.changed == true
  with_items: "{{ cobbler_profiles_folders.results }}"

- name: ensure distros are imported
  shell: "cobbler profile list --name={{ item.item.name }}-{{ item.item.arch }} || cobbler import --name={{item.item.name}} --arch={{ item.item.arch }} --path={{ cobbler_isos_mount_path }}/{{ item.item.name }}"
  when: item.changed == true
  with_items: "{{ cobbler_profiles_folders.results }}"

- name: ensure kickstart template is copied to cobbler server
  template:
    src: "{{ item.kickstart }}.ks.j2"
    dest: "{{ cobbler_kickstart_path }}/{{ item.kickstart }}.ks"
  when: item.kickstart is defined
  register: cobbler_profile_kickstarts
  with_items: "{{ cobbler_profiles }}"

- name: ensure kickstart option is set
  shell: "cobbler profile edit --name={{item.item.name}}-{{ item.item.arch }} --kickstart={{ cobbler_kickstart_path }}/{{ item.item.kickstart }}.ks"
  when: item.changed == true
  with_items: "{{ cobbler_profile_kickstarts.results }}"
  notify: cobbler sync

- name: ensure isos are unmounted after import
  mount:
    path: "{{ cobbler_isos_mount_path }}/{{ item.item.name }}"
    state: unmounted
  when: item.changed == true
  with_items: "{{ cobbler_profiles_folders.results }}"

- name: ensure isos are deleted after import
  file:
    path: "{{ cobbler_isos_path }}/{{ item.item.name }}.iso"
    state: absent
  when: cobbler_isos_delete == true and item.changed == true
  with_items: "{{ cobbler_profiles_folders.results }}"

- name: configure firewall for cobbler node
  when: firewalld_enabled | default(True) | bool
  tags: [ firewall-config-cobbler ]
  include_role:
    name: firewall-config
  vars:
    firewalld_services: [ "{{ cobbler_firewalld_services | default(omit) }}" ]
    firewalld_ports: [ "{{ cobbler_firewalld_ports | default(omit) }}" ]


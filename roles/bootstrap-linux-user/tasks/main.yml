---

- name: "Init {{ role_name }} vars"
  include_tasks: init-vars.yml

- name: Display ansible_user
  debug:
    var: ansible_user

- name: Debug bootstrap_ansible_user
  debug:
    var: bootstrap_ansible_user

- name: "Display bootstrap_linux_user_list"
  debug:
    var: bootstrap_linux_user_list

## ref: https://devops.stackexchange.com/questions/11481/doing-map-and-filter-of-a-list-of-dictionaries-in-ansible
## possible alternative to custom filter:
## https://gist.github.com/halberom/9bfe009c9a3df5d64c7bb505a7700430
- name: "Initialize homedir for users"
  set_fact:
    __bootstrap_linux_user_list: "{{ bootstrap_linux_user_list | rejectattr('name', 'equalto', 'root') | list | add_homedir | list }}"

- name: "Initialize __all_bootstrap_linux_user_list"
  set_fact:
    __all_bootstrap_linux_user_list: "{{ __bootstrap_linux_user_list + [bootstrap_linux_root_user] }}"

- name: "Display __bootstrap_linux_user_list"
  debug:
    var: __bootstrap_linux_user_list

- name: "Ensure any user processes are stopped/terminated before modifying users"
  when:
    - "__bootstrap_linux_user_list | selectattr('name','equalto', ansible_user) | list | length == 0"
#    - "'vm_template' not in group_names"
  include_tasks: stop-user-processes.yml

- name: Load current group info
  getent:
    database: group
    split: ":"
  check_mode: false

- name: "Ensure group exist with correct gid"
  when:
    - item.gid is defined
    - item.gid!=getent_group[item.name][1]|d('')
  ignore_errors: yes
  group:
    name: "{{ item.name }}"
    gid: "{{ item.gid }}"
    state: present
  loop: "{{ __bootstrap_linux_user_list }}"
  loop_control:
    label: "{{ item.name }}"

## ref: https://stackoverflow.com/questions/19292899/creating-a-new-user-and-password-with-ansible
- name: "Add users with groups"
  user:
    state: present
    name: "{{ item.name }}"
    system: "{{ item.system | d(false) }}"
    shell: "{{ item.shell | d(omit) }}"
    append: "{{ True if item.groups is defined else False }}"
    uid: "{{ item.uid | d(omit) }}"
    group: "{{ item.gid | default(omit) }}"
    groups: "{{ item.groups | default(omit) }}"
#    password: "{{ item.hashed_password | d(item.password | d(omit) | password_hash('sha512',65534 | random(seed=bootstrap_linux_user_hash_seed) | string)) }}"
    password: "{{ vault__user_credentials[item.name].hashed_password | d(vault__user_credentials[item.name].password
      | d(omit) | password_hash('sha512',65534 | random(seed=bootstrap_linux_user_hash_seed) | string)) }}"
    generate_ssh_key: "{{ item.generate_ssh_key | d(omit) }}"
    ssh_key_bits: "{{ item.ssh_key_bits | d(omit) }}" ## 2048
    ssh_key_file: "{{ item.ssh_key_file | d(omit) }}"
  loop: "{{ __bootstrap_linux_user_list }}"
  loop_control:
    label: "{{ item.name }}"

## ref: https://github.com/selivan/ansible-set-user-password-expire/blob/master/passwords-set-expire.yml
- name: "Check users password valid days"
  shell: getent shadow "{{ item.name }}" | cut -d':' -f5
  register: users_pw_valid
  changed_when: False
  loop: "{{ __bootstrap_linux_user_list }}"
  loop_control:
    label: "{{ item.name }}"

## ref: https://github.com/ansible/ansible/issues/5564
- name: "Display user password valid days"
  debug:
    msg: "output = {{ item.stdout }}"
#  with_items: "{{ users_pw_valid.results }}"
  loop: "{{ users_pw_valid.results }}"
  loop_control:
    label: "{{ item.item.name }}"

### ref: https://github.com/ansible/ansible/issues/5564
#- name: "Display user password valid days"
#  debug:
##    var: users_pw_valid
##    var: users_pw_valid.results|map(attribute='stdout')|map('default','')
#    var: users_pw_valid.results|map(attribute='stdout')

- name: "Set users password valid days"
  shell: chage -M "{{ item.password_valid_days }}" "{{ item.name }}"
#  when: item.stdout is defined and item.stdout != {{ user_password_valid_time }}
#  loop: users_pw_valid.results
  when:
    - item.password_valid_days is defined
    - users_pw_valid.results[user_idx].stdout is defined
    - users_pw_valid.results[user_idx].stdout != item.password_valid_days
  loop: "{{ __bootstrap_linux_user_list }}"
  loop_control:
    label: "{{ item.name }}"
    index_var: user_idx

- name: "Ensure sudoers.d exists"
  file:
    path: /etc/sudoers.d
    state: directory

- name: "Add to sudoers"
  when: item.system|d(False)==True
#  no_log: yes
  copy:
    dest: /etc/sudoers.d/{{ item.name }}
    mode: "0644"
    content: |
             {{ item.name }}  ALL=(ALL) ALL
             {{ item.name }}  ALL=(ALL) NOPASSWD: ALL
             {{ item.name }}  ALL=(root) NOPASSWD:/usr/bin/supervisorctl
             Defaults !requiretty
             #
  loop: "{{ __bootstrap_linux_user_list }}"
  loop_control:
    label: "{{ item.name }}"

#- name: Allow ttyless sudo
#  lineinfile: dest=/etc/sudoers regexp=requiretty state=absent

- name: Add .ssh directories
#  no_log: yes
  file:
    path: "{{ item.homedir }}/.ssh"
    state: directory
    mode: 0700
    owner: "{{ item.name }}"
    group: "{{ item.group|default(item.name) }}"
#  loop: "{{ __bootstrap_linux_user_list }}"
  loop: "{{ __all_bootstrap_linux_user_list }}"
  loop_control:
    label: "{{ item.name }}"

- name: Add user SSH authorized keys
#  no_log: yes
  when: vault__user_credentials[item.name].auth_key is defined
  authorized_key:
    user: "{{ item.name }}"
    key: "{{ vault__user_credentials[item.name].auth_key }}"
  loop: "{{ __bootstrap_linux_user_list }}"
  loop_control:
    label: "{{ item.name }}"

- name: Add user SSH private key
  no_log: yes
  when: vault__user_credentials[item.name].ssh_keypair.private is defined
  copy:
    content: "{{ vault__user_credentials[item.name].ssh_keypair.private }}"
    dest: "{{ item.homedir }}/.ssh/id_rsa"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0600"
#  loop: "{{ __bootstrap_linux_user_list }}"
  loop: "{{ __all_bootstrap_linux_user_list }}"
  loop_control:
    label: "{{ item.name }}"

- name: Add user SSH public key
  when: vault__user_credentials[item.name].ssh_keypair.public is defined
  copy:
    content: "{{ vault__user_credentials[item.name].ssh_keypair.public }}"
    dest: "{{ item.homedir }}/.ssh/id_rsa.pub"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0600"
#  loop: "{{ __bootstrap_linux_user_list }}"
  loop: "{{ __all_bootstrap_linux_user_list }}"
  loop_control:
    label: "{{ item.name }}"

- name: Copy bash env files to home folder
#  no_log: yes
  copy:
    backup: yes
    src: "{{ item.1 }}"
    dest: "{{ item.0.homedir }}/"
    mode: "0644"
    owner: "{{ item.0.name }}"
    force: yes
  loop: "{{ __bootstrap_linux_user_list | product( lookup('fileglob', 'bashenv/.*', wantlist=True)) | list }}"
  loop_control:
    label: "Copy {{ item.1 | basename }} for {{ item.0.name }}"
  tags:
    - user-updatebash

- name: Copy bashlib files to home folder
#  no_log: yes
  copy:
    backup: yes
    src: "{{ item[1] }}"
    dest: "{{ item[0].homedir }}/.bashlib/"
    mode: "0644"
    owner: "{{ item[0].name }}"
    force: yes
  loop: "{{ __bootstrap_linux_user_list | product( lookup('fileglob', 'bashenv/.bashlib/*', wantlist=True)) | list }}"
  loop_control:
    label: "Copy {{ item[1] | basename }} for {{ item[0].name }}"
  tags:
    - user-updatebash

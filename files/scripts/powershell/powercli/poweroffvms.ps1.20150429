#################################################################################
# Power off VMs (poweroffvms.ps1)
#
# This is a complete update to my previous shutdown script.  No longer do we
# loop through the esx hosts and shut down VMs per host.  We now just shut them
# all down up front.  Also, no more $vmstoleaveon variable.  I'm assuming here 
# that your vCenter is not virtual.  If it is you can most likely grab version
# 1 of this script and take the code to leave the vCenter host till last.  Maybe
# someday I'll get around to updating it to merge the two...but for now, this is
# it!
#
# This script does have a 'partner' script that powers the VMs back on, you can
# grab that script at http://blog.mwpreston.net/shares/
#
# Created By: Mike Preston, 2012 - With a whole lot of help from Eric Wright 
#                                  (@discoposse)
#
# Variables:  $mysecret - a secret word to actually make the script run, stops 
#                         the script from running when double click DISASTER
#             $vcenter - The IP/DNS of your vCenter Server
#             $username/password - credentials for your vCenter Server
#             $filename - path to csv file to store powered on vms
#					  used for the poweronvms.ps1 script.
#             $cluster - Name of specific cluster to target within vCenter
#             $datacenter - Name of specific datacenter to target within vCenter
#
#
# Usage: ./poweroffvms.ps1 "keyword"
#        Intended to be ran in the command section of the APC Powerchute Network
#        Shutdown program before the shutdown sequence has started.
#
#################################################################################

param($keyword)

Import-Module PowerShellLogging 

#. "C:\apps\powershell\libs\Logging_Functions.ps1"

function func_log([string] $msg, [System.ConsoleColor] $foregroundColor) {
		$msg += "`r`n" 
		if ($foregroundColor) {
			Write-Host $msg -ForegroundColor $foregroundColor
		} else {
			Write-Host $msg 
		}
		return $msg 
}

function func_sendReport ( [string]$report ) {
	#Send out an email with the names  
	$emailFrom = "admin@dettonville.org"  
	$emailTo = "admin@dettonville.org"  
	$subject = "List of servers shutdown for maintenance"  
	$smtpServer = "mail1.johnson.local"  
	$smtp = new-object Net.Mail.SmtpClient($smtpServer)  
	$smtp.Send($emailFrom, $emailTo, $subject, $report)  
}


function func_logon ([string] $server ) {
	#connect to vcenter
	$msg = func_log "Connecting to vCenter - $server ...."
	$success = Connect-VIServer $server 

	if ($success) { 
		$msg += func_log "Connected!" Green
	}
	else
	{
	    $msg += func_log "Connection to $vcenter failed, Aborting script" Red
		func_sendReport $msg
	    exit
	}
	Write-Host ""
	return $msg
}

function func_poweroffvms([object[]]$vmlist, [Boolean] $hardoff = $false, [int] $timeout = 120 ) {
	$msg=""
	$taskTab = @{}
	
	if ($vmlist.count -eq 0) {
		$msg += func_log "no VMs to stop"
		return $msg
	}

	func_log "power off vm guests for guests: $vmlist...."
	ForEach ( $guest in $vmlist ) 
	{
		$vmname = $guest.name
		$msg += func_log "Processing $guest - checking for VMware tools install..." Green 
	    $guestinfo = get-view -Id $guest.ID
	    if ($guestinfo.config.Tools.ToolsVersion -eq 0 -or $hardoff)
	    {
	        $msg += func_log "No VMware tools detected in $guest , hard restart on this one" Yellow
			$task = Stop-VM $guest -confirm:$false -RunAsync:$true
			$taskid = $task.Id
			$msg += func_log "$vmname stop-vm task launched: task.ID = $taskid" Green 
	        $taskTab[$taskid] = $guest
	    }
	    else {
			$msg += func_log "VMware tools detected.  I will attempt to gracefully shutdown $guest"
			Shutdown-VMGuest $guest -Confirm:$false
	    }
	}
	
	# track restart VM status to completion or timeout
	$runningTasks = $taskTab.Count

	$timer = New-Object System.Diagnostics.Stopwatch
	$timer.Start()

	while($runningTasks -gt 0){
		$CurrentTime = $timer.Elapsed
		$timeElapsed = ([int] $CurrentTime.TotalSeconds).ToString() 
		$msg += func_log "waited $timeElapsed seconds" Yellow
		
		Get-Task | Where-Object {$taskTab.keys -contains $_.id } | % {
			$task = $_
			$taskid = $task.Id
			$guest = $taskTab.Item($taskid)
			$state = $task.State
			$msg += func_log "VM ${guest}: task.ID = $taskid and task.State = $state"

			if($task.State -eq "Success"){
		        $msg += func_log "VM $guest stopped" Green
				$taskTab.Remove($vmname)
				$runningTasks--
			}
			elseif($task.State -eq "Error"){
		        $msg += func_log "VM $guest failed to start" Red
				$taskTab.Remove($vmname)
				$runningTasks--
			}
		}
		# wait up to timeout seconds - then break
		if ( $CurrentTime.TotalSeconds -ge $timeout) {
		    $msg += func_log "wait for stop tasks for ${taskTab.keys} exceeded timeout of $timeout seconds, timing out now"
			func_sendReport $msg
			exit;
		}
		Start-Sleep -Seconds 5
	}

	while ((Get-VM $vmlist | where-object {$_.PowerState -eq "PoweredOn" } ) )
	{
		$CurrentTime = $timer.Elapsed
		$timeElapsed = ([int] $CurrentTime.TotalSeconds).ToString() 
		$msg += func_log "waited $timeElapsed seconds" Yellow
		# wait up to timeout seconds - then break
		if ( $CurrentTime.TotalSeconds -ge $timeout) {
		    $msg += func_log "wait for VM guest stop exceeded timeout of $timeout seconds, timing out now"
			break;
		}
		Start-Sleep -Seconds 5
	}

	$timer.Stop()

	$timeElapsed = ([int] $timer.Elapsed.TotalSeconds).ToString() 
	$msg += func_log "All VMs stopped after $timeElapsed seconds!" Green

	return $msg
}

function func_suspendvmhost([object[]]$vmhostlist, [int] $timeout=400) {
	$msg=""
	$taskTab = @{}
	
	if ($vmhostlist.count -eq 0) {
		$msg += func_log "no hosts to stop"
		return $msg
	}
	
	$msg += func_log "Stopping VM hosts...."
	ForEach ( $vmhost in $vmhostlist ) 
	{
		$msg += func_log "Stopping $vmhost..." Green 
		$taskTab[(Suspend-VMHost $vmhost -Confirm:$false -RunAsync:$true).Id] = $vmhost
	}
	
	$runningTasks = $taskTab.Count
	$timer = New-Object System.Diagnostics.Stopwatch
	$timer.Start()

	while($runningTasks -gt 0){
		$CurrentTime = $timer.Elapsed
		$timeElapsed = ([int] $CurrentTime.TotalSeconds).ToString() 
		$msg += func_log "waited $timeElapsed seconds" Yellow

		Get-Task | Where-Object {$taskTab.keys -contains $_.id } | % {
			$task = $_
			$taskid = $task.Id
			$vmhost = $taskTab.Item($taskid)
			$state = $task.State
			$msg += func_log "VMHost ${vmhost}: task.ID = $taskid and task.State = $state"
			
			if($taskTab.ContainsKey($_.Id) -and $_.State -eq "Success"){
		        $msg += func_log "VM Host $vmhost shut-down after $timeElapsed seconds" Green
				$taskTab.Remove($_.Id)
				$runningTasks--
			}
			elseif($taskTab.ContainsKey($_.Id) -and $_.State -eq "Error"){
		        $msg += func_log "VM Host $vmhost failed to shut-down" Red
				$taskTab.Remove($_.Id)
				$runningTasks--
			}
		}
		# wait up to timeout seconds - then break
		if ( $CurrentTime.TotalSeconds -ge $timeout) {
		    $msg += func_log "wait for VM host suspend exceeded timeout of $timeout seconds, timing out now"
			func_sendReport $msg
			exit;
		}
		Start-Sleep -Seconds 15
	}

	while ((Get-VMHost $vmhostlist | where-object {$_.PowerState -ne "Standby" } ) )
	{
		$CurrentTime = $timer.Elapsed
		$timeElapsed = ([int] $CurrentTime.TotalSeconds).ToString() 
		$msg += func_log "waited $timeElapsed seconds" Yellow
		# wait up to timeout seconds - then break
		if ( $CurrentTime.TotalSeconds -ge $timeout) {
		    $msg += func_log "wait for VM host power off exceeded timeout of $timeout seconds, timing out now"
			break;
		}
		Start-Sleep -Seconds 5
	}

	$timer.Stop()

	$timeElapsed = ([int] $timer.Elapsed.TotalSeconds).ToString() 
	$msg += func_log "All ESXi hosts stopped after $timeElapsed seconds!" Green

	return $msg
}

## now for the script

$logFileName = "C:\apps\powershell\logs\poweroffvms.log"

$logFile = Enable-LogFile -Path $logFileName
 
# Note - it is necessary to save the result of Enable-LogFile to a variable in order to keep the object alive.  
# As soon as the $LogFile variable is reassigned or falls out of scope, the LogFile object becomes eligible for garbage collection. 
 
$VerbosePreference = 'Continue' 
$DebugPreference = 'Continue' 

#Add-PSSnapin VMware.VimAutomation.Core
#some variables
$vcenter = "vcenter50.johnson.local"
$cluster = "prod-cluster"
$vmhost = "esx1.johnson.local"
$filename = "c:\apps\powershell\poweredonvms.csv"
$vmslast2stop = "nas1"
#$mysecret = "abracadabra"
$mysecret = "test"
$msg=""

Write-Host "A Powerchute network shutdown command has been sent to the vCenter Server." -Foregroundcolor yellow
Write-Host "This script will shutdown all of the VMs and hosts located in $datacenter" -Foregroundcolor yellow
Write-Host "Upon completion, this server ($vcenter) will also be shutdown gracefully" -Foregroundcolor yellow
Write-Host ""
Write-Host "This script has also has a counterpart (powervmsbackon.ps1) which should" -Foregroundcolor yellow
Write-Host "be setup to run during the startup of this machine ($vcenter). " -Foregroundcolor yellow
Write-Host "This will ensure that your VMs are powered back on once power is restored!" -Foregroundcolor yellow

#if ($keyword -ne $mysecret) 
#{ 
#    Write-Host "You haven't passed the proper detonation sequence...ABORTING THE SCRIPT" -ForegroundColor red
#    exit
#}

#connect to vcenter
Write-Host ""
func_logon $vcenter
Write-Host ""

#Get a list of all powered on VMs - used for powering back on....
#Get-VM -Location $cluster | where-object {$_.PowerState -eq "PoweredOn" } | Select Name | Export-CSV $filename
Get-VMHost $vmhost | Get-VM | where-object {$_.PowerState -eq "PoweredOn"} | Select Name | Export-CSV $filename

##change DRS Automation level to partially automated...
#$msg += func_log "Changing cluster DRS Automation Level to Partially Automated" green
#Get-Cluster $cluster | Set-Cluster -DrsAutomation PartiallyAutomated -confirm:$false 

###change the HA Level
#Write-Host ""
#$msg += func_log "Disabling HA on the cluster..." + "`r`n" green
#Write-Host ""
#Get-Cluster $cluster | Set-Cluster -HAEnabled:$false -confirm:$false 

Write-Host ""
$msg = func_log "Phase 1 - get VMs - we will do this instead of parsing the file in case a VM was powered in the nanosecond that it took to get here.... :)" Yellow
Write-Host ""
$poweredonguests = Get-VMHost $vmhost | Get-VM | where-object {$_.PowerState -eq "PoweredOn" -and $vmslast2stop -notcontains $_.name} 
$msg += func_poweroffvms $poweredonguests

$msg += func_log "Phase 2 - hard stop for any non-priority VMs still left on....night night..." Red
Write-Host ""
$poweredonguests = Get-VMHost $vmhost | Get-VM | where-object {$_.PowerState -eq "PoweredOn" -and $vmslast2stop -notcontains $_.name} 
if ($poweredonguests.count -gt 0) {
	$msg += func_poweroffvms $poweredonguests, $true
}

$msg += func_log "Phase 3 - priority VM shutdown - shutdown all remaining ..." Red
$poweredonguests = Get-VMHost $vmhost | Get-VM | where-object {$_.PowerState -eq "PoweredOn" } 
$msg += func_poweroffvms $poweredonguests

$msg += func_log "Phase 4 - now its time to shut down the hosts" Red

$esxhosts = Get-VMHost $vmhost

$msg += func_suspendvmhost $esxhosts

func_sendReport $msg

Disconnect-VIServer $vcenter -Confirm:$false

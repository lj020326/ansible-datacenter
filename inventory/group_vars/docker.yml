---

container_user_name: "container-user"
#container_user_uid: "1100"
#container_user_gid: "1100"
container_user_uid: "1102"
container_user_gid: "1102"

bootstrap_docker__user_uid: "{{ container_user_uid }}"
bootstrap_docker__user_gid: "{{ container_user_gid }}"

bootstrap_docker__user_username: "{{ container_user_name }}"
bootstrap_docker__user_password: "{{ vault__docker_user_password | d('') }}"
bootstrap_docker__user_group: "{{ bootstrap_docker__user_username }}"

bootstrap_docker_python_docker_interpreter: "{{ ansible_python_docker_interpreter }}"

bootstrap_docker__python_virtualenv_command: "{{ os_python3_interpreter }} -m venv"

bootstrap_linux_user_list__docker:
  - name: "{{ container_user_name }}"
    uid: "{{ container_user_uid }}"
    gid: "{{ container_user_gid }}"
    shell: /bin/bash

ldap_server: "ldap.{{ ldap_internal.ldap_domain }}"

## bootstrap-linux-docker
bootstrap_docker__dns:
#  - "192.168.0.1"
  - "{{ gateway_ipv4_subnet_1_2 }}.0.1"

### bootstrap-linux-docker
bootstrap_docker__storage_driver: overlay2
#bootstrap_docker__storage_driver: devicemapper

bootstrap_docker__config:
  "experimental": true

#bootstrap_docker__daemon_flags: []
bootstrap_docker__daemon_flags:
  - "-H unix:///var/run/docker.sock"

##docker_api_port: "{{ docker_server__unencrypted_tcp_port }}"
#docker_api_port: "{{ docker_server__tls_tcp_port }}"

#bootstrap_docker__daemon_flags:
#  - "-H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock"

#  ## ref: https://dzone.com/articles/running-jenkins-build-slaves-in-a-docker-container
#bootstrap_docker__daemon_flags:
#  - "-H tcp://0.0.0.0:{{ docker_server__unencrypted_tcp_port }}"
#  - "-H tcp://0.0.0.0:{{ docker_server__tls_tcp_port }}"
##  - "-H tcp://0.0.0.0:2375"
##  - "-H tcp://0.0.0.0:2376"
#  ## ref: https://scriptcrunch.com/enable-docker-remote-api/
#  ## ref: https://devopscube.com/docker-containers-as-build-slaves-jenkins/
##  - "-H tcp://0.0.0.0:4243"

#docker_hosts:
#  - "unix:///var/run/docker.sock"
#  ## ref: https://dzone.com/articles/running-jenkins-build-slaves-in-a-docker-container
#  - "tcp://0.0.0.0:2375"
#  - "tcp://0.0.0.0:2376"
#  ## ref: https://scriptcrunch.com/enable-docker-remote-api/
#  ## ref: https://devopscube.com/docker-containers-as-build-slaves-jenkins/
#  - "tcp://0.0.0.0:4243"

##
## ref: https://github.com/nickjj/ansible-docker
##

### https://github.com/nickjj/ansible-docker
#ansible_python_interpreter: "/usr/bin/env python-docker"

# `a` removes unused images (useful in production).
# `f` forces it to happen without prompting you to agree.
bootstrap_docker__cron_jobs_prune_flags: "af"

bootstrap_docker__cron_jobs:
  - name: "Docker disk clean up"
    job: "docker system prune -{{ bootstrap_docker__cron_jobs_prune_flags }} > /dev/null 2>&1"
    schedule: ["0", "0", "*", "*", "0"]
    cron_file: "docker-disk-clean-up"
    #user: "{{ (bootstrap_docker__users | first) | d('root') }}"
    #state: "present"



##
## docker_registries
##
registry_name: "media"
#registry_domain: "{{ internal_domain }}"
registry_domain: "johnson.int"
#registry_domain: "dettonville.int"
#registry_domain: "admin.dettonville.int"

internal_registry_name: "{{ registry_name }}"
#internal_registry_name: "registry"
internal_registry_fqdn: "{{ internal_registry_name }}.{{ registry_domain }}"
internal_registry: "{{ internal_registry_fqdn }}:5000"

#docker_registry: "{{ registry_name }}.{{ registry_domain }}:5000"
docker_registry: "{{ internal_registry }}"
docker_registry_url: "https://{{ internal_registry }}"

passthru_registry_name: "admin"
#passthru_registry_name: "registry"
#passthru_registry_domain: "{{ registry_domain }}"
passthru_registry_domain: "dettonville.int"
passthru_registry_fqdn: "{{ passthru_registry_name }}.{{ passthru_registry_domain }}"
passthru_registry: "{{ passthru_registry_fqdn }}:5000"

#registry_name: "{{ passthru_registry_name }}"
external_domain: "{{ external_root_domain }}"

openstack_docker_registry: "{{ passthru_registry }}"

docker_registries:
  - certname: "{{ internal_registry_fqdn }}.pem"
    host: "{{ internal_registry_fqdn }}"
    endpoint: "{{ internal_registry }}"
    url: "https://{{ internal_registry }}"
  - certname: "{{ passthru_registry_fqdn }}.pem"
    host: "{{ passthru_registry_fqdn }}"
    endpoint: "{{ passthru_registry }}"
    url: "https://{{ passthru_registry }}"

bootstrap_docker__registry_mirrors: "{{ docker_registries | map(attribute='url') | list }}"

bootstrap_docker__insecure_registries: "{{ docker_registries | map(attribute='endpoint') | list }}"

registry_users: "{{ vault__registry_users | d('') }}"

#docker_registry_user:
#  - username: testuser
#    password: testpassword

overwrite_configs: no

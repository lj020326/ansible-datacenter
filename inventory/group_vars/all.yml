---
############
## Ansible vars
############

host_key_checking: no

#ansible_user: root
ansible_user: "ansible"
ansible_ssh_user: "{{ ansible_user }}"
#ansible_debug_mode: yes
bootstrap_user: "{{ ansible_user }}"

#####################
## vaulted vars
#####################
ansible_password__linux: "{{ vault__ansible_password__linux }}"
ansible_password__windows: "{{ vault__ansible_password__windows }}"
ansible_ssh_private_key: "{{ vault__ansible_ssh_private_key }}"
ansible_ssh_public_key: "{{ vault__ansible_ssh_public_key }}"
admin_ssh_private_key: "{{ vault__admin_ssh_private_key }}"
admin_ssh_public_key: "{{ vault__admin_ssh_public_key }}"

bootstrap_user_password: "{{ vault__bootstrap_user_password }}"
bootstrap_linux_user_hash_seed: "{{ vault__bootstrap_linux_user_hash_seed | d('asdfklrgarvrjtn54er3') }}"
bootstrap_linux_docker_user_hash_seed: "{{ vault__bootstrap_linux_docker_user_hash_seed | d('34rsvfdvdhyu5trfsd') }}"
vsphere_deploy_iso_hash_seed: "{{ vault__vsphere_deploy_iso_hash_seed | d('rtfgiujuj5iytfogk434rtghh') }}"
sha512_hashed_packer_password: "{{ vault__sha512_hashed_packer_password | d('y6irhtfnvubytgsyrehtjntmyry') }}"
harden_linux_os_grub_secure_boot: "{{ vault__harden_linux_os_grub_secure_boot | d('56576uyjhgr345') }}"
bind_admin_password: "{{ vault__bind_admin_password }}"
bind_tsig_keys_secret: "{{ vault__bind_tsig_keys_secret | d('') }}"
awx_admin_password: "{{ vault__awx_admin_password }}"
veeam_agent_password: "{{ vault__veeam_agent_password }}"
git_ssh_private_keyfile: "{{ vault__git_ssh_private_keyfile }}"
openstack_ssh_public_key_file: "{{ vault__openstack_ssh_public_key_file }}"
smtp_relay_username: "{{ vault__smtp_relay_username }}"
smtp_relay_password: "{{ vault__smtp_relay_password }}"
postfix_recipient_target: "{{ vault__postfix_recipient_target }}"
cloudflare_email: "{{ vault__cloudflare_email }}"
cloudflare_apikey: "{{ vault__cloudflare_apikey }}"
registry_username: "{{ vault__registry_username }}"
registry_password: "{{ vault__registry_password }}"
registry_users: "{{ vault__registry_users }}"
admin_password: "{{ vault__admin_password }}"
mysql_root_password: "{{ vault__mysql_root_password }}"


postgres_user: "{{ vault__postgres_user }}"
postgres_password: "{{ vault__postgres_password }}"
pgadmin_password: "{{ vault__pgadmin_password }}"
snapraid_healthcheck_io_uuid: "{{ vault__snapraid_healthcheck_io_uuid }}"

jenkins_agent_password: "{{ vault__jenkins_agent_password }}"

vm_image_pwd: "{{ vault__vm_image_pwd }}"
vm_image_sudo_pwd: "{{ vault__vm_image_sudo_pwd }}"

pxe_vm_admin_pwd: "{{ vault__pxe_vm_admin_pwd }}"

bind_tsig_keys:
  - name: rndc-key
    algorithm: hmac-md5
    secret: "{{ bind_tsig_keys_secret }}"

############
## Ansible PING test exclude tags
############

##tags_excluded_from_ping_test: []
tags_excluded_from_ping_test:
  - bootstrap-ansible-user
  - deploy-vm
  - deploy-vsphere-dc
  - bootstrap-user
  - bootstrap-vmware-esxi

## ref: https://stackoverflow.com/questions/62701036/filter-out-elements-from-list-if-matching-multiple-patterns
run_tags_included_ping_test: "{{ ansible_run_tags | reject('match', '(' +  tags_excluded_from_ping_test | join('|') + ')') | list }}"
run_tags_excluded_ping_test: "{{ ansible_run_tags | intersect(tags_excluded_from_ping_test) }}"
ping_exclude: "{{ run_tags_excluded_ping_test|length==ansible_run_tags|length }}"

apply_os_groups_exclude: "{{ ping_exclude }}"

############
## Domain vars
############

external_root_domain: "dettonville.org"
external_domain: "{{ external_root_domain }}"

control_planes:
  baremetal: "johnson.int"
  vmware: "dettonville.int"

control_plane_domain: "{{ control_planes.baremetal }}"
control_plane_domain_vm: "{{ control_planes.vmware }}"
internal_root_domain: "{{ control_planes.baremetal }}"

internal_subdomain: "{{ dc_environment|d('') | upper }}"
internal_domain: "{{ internal_root_domain if internal_subdomain|d('')=='' else internal_subdomain + '.' + internal_root_domain }}"
#internal_parent_domain: "{{ ('.').join(internal_domain.split('.')[1::]) }}"

############
## Network vars
############
hostname_internal_domain: "{{ internal_domain }}"
hostname_name_full: "{{ inventory_hostname_short }}.{{ hostname_internal_domain }}"
hostname_name_short: "{{ inventory_hostname_short }}"

netbase__hostname: "{{ hostname_name_full if (inventory_hostname.split('.')[0] not in ['localhost','127']) else inventory_hostname }}"

## keep this out of all.yml for the molecule docker provisioner testing
#ansible_host: "{{ netbase__hostname }}"

############
## Gateway related vars
############

## ref: https://en.wikipedia.org/wiki/IPv4
## ref: http://www.steves-internet-guide.com/ipv4-basics/
## ref: https://docs.oracle.com/cd/E19683-01/806-4075/ipref-1/index.html
gateway_ipv4_subnet_1_2: "10.0"
gateway_ipv4: "{{ gateway_ipv4_subnet_1_2 }}.0.1"
gateway_ipv4_subnet: "{{ gateway_ipv4_subnet_1_2 }}.0.0"
gateway_ipv4_net_cidr: 8
gateway_ipv4_network_cidr: "{{ gateway_ipv4_subnet }}/{{ gateway_ipv4_net_cidr }}"
#gateway_ipv4_netmask: "255.0.0.0"
gateway_ipv4_netmask: "{{ gateway_ipv4_network_cidr | ansible.utils.ipaddr('netmask') }}"

############
## DNS related vars
############
dns_domain: "{{ internal_domain }}"
dns_search_domains:
  - johnson.int
  - dettonville.int

dns_nameservers:
  - "{{ gateway_ipv4 }}"

############
## LDAP vars
############
ldap_root_password: "{{ vault__ldap_root_password }}"
ldap_config_password: "{{ vault__ldap_config_password }}"
ldap_admin_password: "{{ vault__ldap_admin_password }}"
ldap_readonly_user_password: "{{ vault__ldap_readonly_user_password }}"

#ldap_internal_domain: "johnson.int"
#ldap_internal_base_dn: "dc=johnson,dc=int"
ldap_internal_domain: "{{ internal_domain }}"
ldap_internal_base_dn: "dc={{ ldap_internal_domain.split('.')[-2] }},dc={{ ldap_internal_domain.split('.')[-1] }}"

ldap_internal_search_base_dn: "ou=users,{{ ldap_internal_base_dn }}"
ldap_internal_host: "ldap.{{ ldap_internal_domain }}:389"
ldap_internal_uri: "ldap://{{ ldap_internal_host }}"

# if smb_ldap_uri not empty, use ldap (to be defined in eg. "SMBDC" group)
ldap_admindn: "cn=admin,{{ ldap_internal_base_dn }}"
ldap_adminpw: "{{ ldap_admin_password }}"

ldap_internal:
  ldap_organisation: "Johnsonville LLC"
  ldap_domain: "{{ ldap_internal_domain }}"
  ldap_base_dn: "{{ ldap_internal_base_dn }}"
  ldap_admin_password: "{{ ldap_admin_password }}"
  ldap_readonly_user: "true"
  ldap_readonly_user_username: "readonly"
  ldap_readonly_user_password: "{{ ldap_readonly_user_password }}"
  ldap_config_password: "{{ ldap_config_password }}"

ldap_external:
  ldap_organisation: "Dettonville LLC"
  ldap_domain: "{{ external_domain }}"
  ldap_base_dn: "dc=dettonville,dc=org"
  ldap_admin_password: "{{ ldap_admin_password }}"
  ldap_readonly_user: "true"
  ldap_readonly_user_username: "readonly"
  ldap_readonly_user_password: "{{ ldap_readonly_user_password }}"
  ldap_config_password: "{{ ldap_config_password }}"


############
## Samba (SMB) vars
############
samba_domain: JOHNSON.INT
samba_data_path: /data
samba_server: samba.johnson.int
samba_mail_domain: dettonville.org

# user to join domain
samba_join_user: admin
samba_join_passwd: "{{ ldap_admin_password }}"

## if smb_ldap_uri not empty, use ldap (to be defined in eg. "SMBDC" group)
#smb_ldap_admindn: "cn=admin,{{ ldap_internal.ldap_base_dn }}"
smb_ldap_admindn: "{{ ldap_admindn }}"
smb_ldap_adminpw: "{{ ldap_admin_password }}"

smb_ldap_uri: "ldap://ldap.{{ smb_domain }}"
#smb_ldap_uri: "ldap://{{ hostvars[groups['ldap_server'][0]]['inventory_hostname'].{{ smb_domain }}"
#smb_ldap_suffix: "dc=johnson,dc=int"
smb_ldap_suffix: "dc={{ internal_domain.split('.')[-2] }},dc={{ internal_domain.split('.')[-1] }}"
smb_ldap_group_suffix: 'ou=groups'
smb_ldap_user_suffix: 'ou=users'
smb_ldap_machine_suffix: 'ou=computers'
smb_ldap_idmap_suffix: "ou=Idmap"
smb_ldap_replication_sleep: 2000
smb_ldap_ssl: 'off'
smb_ldap_passwd_sync: 'Yes'

#smb_group_shares:
#  - name: "netlogon"
##    path: "/shares/netlogon"
#    path: "/srv/storage/netlogon"
#    cifs: True
#    smbparms:
#      guest ok: yes
#      read only: yes
#      valid users: "@smbadmin, @smbuser"
#      comment: "Netlogon service"
##      root preexec: "/my/script/mknetlogon %U %G %I"

smb_group_shares:
  - name: "data"
    path: "/data"
    cifs: True
    smbparms:
      valid users: "root @users @admin @smbuser @smbguest @smbadmin @administrator"
      public: "yes"
      guest ok: "yes"
      force group: "smbguest"
      force directory mode: "775"
      force create mode: "775"
      write list: "root @users @admin @smbuser @smbguest @smbadmin @administrator"
      writeable: "yes"
      create mode: "0777"
      directory mode: "0777"

############
## Certificate Authority (CA) vars
############
ca_root:
  domainName: "{{ ca_root_cn }}"
  commonName: "{{ ca_root_cn }}"
  country: "US"
  state: "New York"
  locality: "New York"
  organization: "Dettonville LLC"
  organizationalUnit: "Research"
  email: "admin@dettonville.org"

ca_root_cn: "ca-root"

pki_caroot_cert: "{{ ca_root_cn }}.pem"
pki_caroot_key: "{{ ca_root_cn }}-key.pem"

trust_ca_cert_extension: "pem"


############
## email
############

email: "admin@dettonville.org"
email_from: "{{ email }}"
email_to: "{{ email }}"

############
## other
############

timezone: "America/New_York"

report_inventory_facts_git_repo_endpoint: "gitea.admin.dettonville.int:2222/infra/report-inventory-facts.git"
#report_inventory_facts_git_repo_endpoint: "gitea.admin.dettonville.int/infra/report-inventory-facts.git"
report_inventory_facts_git_repo_branch: "main"
report_inventory_facts_git_repo_url_scheme: "ssh"

#report_inventory_facts_inventory_source: "{{ dc_environment | upper }}/{{ os_family | d(ansible_os_family) | replace('dc_os_','') | d('unknown') | upper }}"
report_inventory_facts_inventory_source: "{{ dc_environment | upper }}"

#report_inventory_facts_git_repo_user: ansible
#report_inventory_facts_git_repo_url_scheme: "https"
#report_inventory_facts_git_repo_token: "fasdgasgdf"

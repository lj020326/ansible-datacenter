---

docker_stack_service_groups__base:
  - name: base
    source: role

#time_server: 0.pool.ntp.org
#time_server: 192.168.0.1
time_server: "{{ gateway_ipv4_subnet_1_2 }}.0.1"

#docker_stack_run_services: no
#docker_stack_traefik_version: v1
#docker_stack_traefik_certprovider_qa: yes

docker_stack_script_dir: "/opt/scripts"

#docker_stack_enable_external_route: yes

docker_stack_http_username: "{{ vault__docker_stack_http_username | d('') }}"
docker_stack_http_password: "{{ vault__docker_stack_http_password | d('') }}"

docker_stack_enable_selfsigned_certs: no
docker_stack_enable_cacerts: yes

#docker_stack_ca_cert_bundle: "{{ ca_cert_bundle }}"
#docker_stack_ca_java_keystore: "{{ ca_java_keystore }}"

docker_registry_username: "{{ registry_username }}"
docker_registry_password: "{{ registry_password }}"

docker_stack_mysql_root_password: "{{ vault__docker_stack_mysql_root_password | d('') }}"
docker_stack_grafana_admin_password: "{{ vault__docker_stack_grafana_admin_password | d('') }}"

############
## LDAP
############
docker_stack_ldap_domain: "{{ docker_stack_internal_root_domain }}"
#docker_stack_ldap_domain: "{{ control_plane_domain }}"

docker_stack_ldap_host: "ldap.{{ docker_stack_ldap_domain }}"
docker_stack_ldap_port: "389"
docker_stack_ldap_endpoint: "{{ docker_stack_ldap_host }}:{{ docker_stack_ldap_port }}"
docker_stack_ldap_uri: "ldap://{{ docker_stack_ldap_endpoint }}"

docker_stack_ldap_domain_parts: |
  [
    {% for domain in docker_stack_ldap_domain | split('.') %}
    "dc={{ domain }}",
    {% endfor %}
  ]

docker_stack_ldap_base_dn: "{{ docker_stack_ldap_domain_parts | join(',') }}"
#docker_stack_ldap_base_dn: "{{ ldap_internal_base_dn }}"
docker_stack_ldap_user_base_dn: "ou=users,{{ docker_stack_ldap_base_dn }}"
docker_stack_ldap_group_base_dn: "ou=groups,{{ docker_stack_ldap_base_dn }}"
#docker_stack_ldap_user_base_dn: "{{ ldap_internal_user_search_base_dn }}"
#docker_stack_ldap_search_user_dn: "{{ ldap_internal_search_user_dn }}"

docker_stack_ldap_root_password: "{{ ldap_root_password | d('password') }}"
docker_stack_ldap_admin_password: "{{ ldap_admin_password | d('password') }}"
docker_stack_ldap_config_password: "{{ ldap_config_password | d('passsword') }}"
docker_stack_ldap_readonly_user: "true"
docker_stack_ldap_readonly_username: "readonly"
docker_stack_ldap_readonly_password: "{{ ldap_readonly_password }}"
#docker_stack_ldap_search_user_password: "{{ ldap_search_user_password }}"

#docker_stack_ldap_user_root_samba_nt_password: "{{ vault__ldap_domain_users['root'].sambaNTPassword }}"
#docker_stack_ldap_user_root_password: "{{ vault__ldap_domain_users['root'].ssha_password }}"

############
## STEPCA
############
stepca_root_ca_fingerprint: "{{ vault__stepca_root_ca_fingerprint | d('') }}"
docker_stepca_enc_key: "{{ vault__docker_stepca_enc_key | d('') }}"

############
## AUTH
############
docker_stack_auth_google_client_id: "{{ vault__docker_stack_auth_google_client_id | d('') }}"
docker_stack_auth_google_client_secret: "{{ vault__docker_stack_auth_google_client_secret | d('') }}"

docker_stack_auth_oauth_secret: "{{ vault__docker_stack_auth_oauth_secret | d('') }}"
docker_stack_auth_whitelist: "{{ vault__docker_stack_auth_whitelist | d('') }}"
docker_stack_authelia_jwt_secret: "{{ vault__docker_stack_authelia_jwt_secret | d('') }}"
docker_stack_authelia_encryption_key: "{{ vault__docker_stack_authelia_encryption_key | d('') }}"
docker_stack_authelia_password: "{{ vault__docker_stack_authelia_password | d('') }}"
docker_stack_authelia_users: "{{ vault__docker_stack_authelia_users | d([]) }}"

docker_stack_redis_password: "{{ vault__docker_stack_redis_password | d('') }}"

docker_stack_gitea_lfs_jwt_secret: "{{ vault__docker_stack_gitea_lfs_jwt_secret | d('') }}"
docker_stack_gitea_secret_key: "{{ vault__docker_stack_gitea_secret_key | d('') }}"
docker_stack_gitea_internal_token: "{{ vault__docker_stack_gitea_internal_token | d('') }}"
docker_stack_gitea_oauth_jwt_secret: "{{ vault__docker_stack_gitea_oauth_jwt_secret | d('') }}"

docker_stack_healthchecks_email_su_password: "{{ vault__docker_stack_healthchecks_email_su_password | d('') }}"

docker_stack_keycloak_user: "{{ vault__docker_stack_keycloak_user | d('') }}"
docker_stack_keycloak_password: "{{ vault__docker_stack_keycloak_password | d('') }}"

docker_stack_wordpress_db_password: "{{ vault__docker_stack_wordpress_db_password | d('') }}"

docker_stack_jenkins_mgr_pwd_secret: "{{ vault__docker_stack_jenkins_mgr_pwd_secret | d('') }}"
#docker_stack_jenkins_agent_secret: "{{ vault__docker_stack_jenkins_agent_secret | d('') }}"
docker_stack_jenkins_agent_secret: "{{ vault__docker_stack_jenkins_agent_secrets[inventory_hostname] | d('') }}"

docker_stack_jenkins_swarm_username: "{{ jenkins_agent_username }}"
docker_stack_jenkins_swarm_password: "{{ vault__jenkins_agent_password }}"

docker_stack_keycloak_postgres_user: keycloak
docker_stack_keycloak_postgres_password: "{{ vault__docker_stack_keycloak_postgres_password }}"

docker_stack_gitea_postgres_password: "{{ vault__docker_stack_gitea_postgres_password }}"

docker_stack_vnc_passwd: "{{ vault__docker_stack_vnc_passwd }}"

docker_stack_vmware_data_dir: /data/datacenter/vmware

docker_stack_service_route_name: "{{ inventory_hostname_short }}"

docker_stack_internal_ssl_cert_dir: "{{ ca_local_cert_dir }}"
docker_stack_internal_ssl_certkey_dir: "{{ ca_local_key_dir }}"

registry_domain: "{{ control_plane_domain }}"

ca_service_route: "{{ docker_stack_internal_domain }}"

docker_stack_stepca_ca_name: "stepca.{{ docker_stack_internal_domain }}"

bind_aliases:
  - "{{ docker_stack_service_route_name if docker_stack_service_route_name != inventory_hostname_short else '' }}"

ca_domains_hosted:
  - "{{ docker_stack_internal_domain }}"

docker_stack_registry_name: "{{ docker_stack_internal_domain }}"
docker_stack_registry_endpoint: "{{ docker_registry }}"

docker_stack_registry_username: "{{ docker_registry_username }}"
docker_stack_registry_password: "{{ docker_registry_password }}"

docker_stack_registry_service_common_name: "{{ docker_stack_internal_domain }}"
docker_stack_registry_users: "{{ registry_users }}"

docker_stack_smtp_address: "mail.johnson.int"
docker_stack_smtp_port: 25

docker_stack_archiva_smtp_host: "{{ docker_stack_smtp_address }}"

docker_stack_gitlab_smtp_address: "{{ docker_stack_smtp_address }}"
docker_stack_gitlab_smtp_port: "{{ docker_stack_smtp_port }}"

docker_stack_email_from: "admin@dettonville.org"
docker_stack_email_to: "admin@dettonville.org"

docker_stack_healthchecks_site_name: "Dettonville HealthChecks"
docker_stack_healthchecks_default_from_email: "{{ docker_stack_email_from }}"
docker_stack_healthchecks_email_host: "{{ docker_stack_smtp_address }}"
docker_stack_healthchecks_email_port: "{{ docker_stack_smtp_port }}"
docker_stack_healthchecks_email_su_email: "{{ docker_stack_email_to }}"

docker_stack_authelia_default_redirection_url: "https://{{ docker_stack_internal_domain }}"

docker_stack_pgadmin_config_use_ldap: yes

docker_stack_pgadmin_config_ldap_server_uri: "{{ ldap_internal_host }}"
docker_stack_pgadmin_config_ldap_base_dn: "{{ ldap_internal_base_dn }}"
docker_stack_pgadmin_config_ldap_search_base_dn: "{{ ldap_internal_user_search_base_dn }}"
#docker_stack_pgadmin_config_ldap_search_filter: "(cn=*)"
docker_stack_pgadmin_config_ldap_search_filter: "(objectClass=user)"

stepca_acme_http_challenge_proxy_port: 8980
docker_stack_acme_http_challenge_proxy_port: "{{ stepca_acme_http_challenge_proxy_port }}"

#docker_stack_compose_http_timeout: 120
docker_stack_compose_http_timeout: 240

docker_source_images: []

###########
## JENKINS
###########
docker_stack_jenkins_ldap_host: "{{ ldap_internal_host }}"
docker_stack_jenkins_ldap_base_dn: "{{ ldap_internal_base_dn }}"
docker_stack_jenkins_jcac_mgr_pwd_secret: "{{ ldap_readonly_password }}"

##########
## stepca
##########

#docker_stack_stepca_image: "media.johnson.int:5000/docker-stepca:latest"

## ref: https://www.authelia.com/docs/configuration/one-time-password.html

##########
## authelia
##########

docker_stack_authelia_domain: "{{ docker_stack_internal_domain }}"

docker_stack_authelia_access_control:
  default_policy: deny
  rules:
    # Rules applied to everyone
    - domain: "secure.{{ docker_stack_internal_domain }}"
      policy: two_factor
    - domain:
        - "authelia.{{ docker_stack_internal_domain }}"
        - "public.{{ docker_stack_internal_domain }}"
      policy: bypass
#    - domain: "traefik.{{ docker_stack_internal_domain }}"
#      policy: one_factor
#    - domain: "heimdall.{{ docker_stack_internal_domain }}"
#      policy: one_factor
    - domain:
        - "*.{{ docker_stack_internal_domain }}"
      policy: one_factor
#      policy: two_factor

docker_stackauthelia_totp:
  issuer: authe.dettonville.org

docker_stack_authelia_notifier:
  smtp:
    host: "{{ docker_stack_smtp_address }}"
    port: "{{ docker_stack_smtp_port }}"
    sender: "{{ docker_stack_email_from }}"
    disable_require_tls: true
    tls:
      skip_verify: true

## ref: https://docs.ibracorp.io/authelia/configuration-files/configuration.yml
#docker_stack_authelia_notifier:
#  disable_startup_check: true
#  smtp:
#    host: "{{ docker_stack_smtp_address }}"
#    port: "{{ docker_stack_smtp_port }}"
#    sender: "{{ docker_stack_email_from }}"
#    disable_require_tls: true
#    tls:
#      skip_verify: true
#    disable_require_tls: true
#    tls:
#      skip_verify: true
#  filesystem:
#    filename: /tmp/authelia/notification.txt

#docker_stack_user_username: "adminuser"
#docker_stack_user_group: "adminuser"

docker_stack_dir: "{{ docker_stack_user_home }}/docker"

#docker_stack_admin_jobs: []

#nfs_exports:
#  - "/srv      192.168.0.0/255.255.0.0(ro,fsid=0,async,nohide,no_subtree_check,crossmnt)"

# docker_stack_service_groups: []


docker_stack_authelia_authentication_backend:
  ldap:
    # The LDAP implementation, this affects elements like the attribute utilised for resetting a password.
    # Acceptable options are as follows:
    # - 'activedirectory' - For Microsoft Active Directory.
    # - 'custom' - For custom specifications of attributes and filters.
    # This currently defaults to 'custom' to maintain existing behaviour.
    #
    # Depending on the option here certain other values in this section have a default value, notably all
    # of the attribute mappings have a default value that this config overrides, you can read more
    # about these default values at https://docs.authelia.com/configuration/authentication/ldap.html#defaults
    implementation: custom

    # The url to the ldap server. Scheme can be ldap or ldaps in the format (port optional) <scheme>://<address>[:<port>].
    url: "{{ ldap_uri }}"

    # Use StartTLS with the LDAP connection.
    start_tls: false

    tls:
      # Server Name for certificate validation (in case it's not set correctly in the URL).
      # server_name: ldap.example.com

      # Skip verifying the server certificate (to allow a self-signed certificate).
      skip_verify: false

      # Minimum TLS version for either Secure LDAP or LDAP StartTLS.
      minimum_version: TLS1.2

    # The base dn for every entries.
    base_dn: "{{ ldap_base }}"

    # The attribute holding the username of the user. This attribute is used to populate
    # the username in the session information. It was introduced due to #561 to handle case
    # insensitive search queries.
    # For you information, Microsoft Active Directory usually uses 'sAMAccountName' and OpenLDAP
    # usually uses 'uid'
    # Beware that this attribute holds the unique identifiers for the users binding the user and the configuration
    # stored in database. Therefore only single value attributes are allowed and the value
    # must never be changed once attributed to a user otherwise it would break the configuration
    # for that user. Technically, non-unique attributes like 'mail' can also be used but we don't recommend using
    # them, we instead advise to use the attributes mentioned above (sAMAccountName and uid) to follow
    # https://www.ietf.org/rfc/rfc2307.txt.
    # username_attribute: uid

    # An additional dn to define the scope to all users.
    additional_users_dn: ou=users

    # The users filter used in search queries to find the user profile based on input filled in login form.
    # Various placeholders are available to represent the user input and back reference other options of the configuration:
    # - {input} is a placeholder replaced by what the user inputs in the login form.
    # - {username_attribute} is a mandatory placeholder replaced by what is configured in `username_attribute`.
    # - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
    # - DON'T USE - {0} is an alias for {input} supported for backward compatibility but it will be deprecated in later versions, so please don't use it.
    #
    # Recommended settings are as follows:
    # - Microsoft Active Directory: (&({username_attribute}={input})(objectCategory=person)(objectClass=user))
    # - OpenLDAP: (&({username_attribute}={input})(objectClass=person))' or '(&({username_attribute}={input})(objectClass=inetOrgPerson))
    #
    # To allow sign in both with username and email, one can use a filter like
    # (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
#    users_filter: (&({username_attribute}={input})(objectClass=person))
    users_filter: "(&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))"

    # An additional dn to define the scope of groups.
    additional_groups_dn: ou=groups

    # The groups filter used in search queries to find the groups of the user.
    # - {input} is a placeholder replaced by what the user inputs in the login form.
    # - {username} is a placeholder replace by the username stored in LDAP (based on `username_attribute`).
    # - {dn} is a matcher replaced by the user distinguished name, aka, user DN.
    # - {username_attribute} is a placeholder replaced by what is configured in `username_attribute`.
    # - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
    # - DON'T USE - {0} is an alias for {input} supported for backward compatibility but it will be deprecated in later versions, so please don't use it.
    # - DON'T USE - {1} is an alias for {username} supported for backward compatibility but it will be deprecated in later version, so please don't use it.
    # If your groups use the `groupOfUniqueNames` structure use this instead: (&(uniquemember={dn})(objectclass=groupOfUniqueNames))
    groups_filter: (&(member={dn})(objectclass=groupOfNames))

    # The attribute holding the name of the group
    # group_name_attribute: cn

    # The attribute holding the mail address of the user. If multiple email addresses are defined for a user, only the first
    # one returned by the LDAP server is used.
    # mail_attribute: mail

    # The attribute holding the display name of the user. This will be used to greet an authenticated user.
    # display_name_attribute: displayname

    # The username and password of the admin user.
    user: "{{ ldap_admin_dn }}"
    # Password can also be set using a secret: https://docs.authelia.com/configuration/secrets.html
    password: "{{ ldap_admin_pw }}"

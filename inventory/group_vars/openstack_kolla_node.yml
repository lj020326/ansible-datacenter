---

firewalld_enabled: no

bootstrap_firewalld_enabled: no
openstack_kolla_run_playbooks: no

openstack_venv_path: "/opt/openstack"
ansible_openstack_python_interpreter: "{{openstack_venv_path}}/bin/python"

openstack_registry_name: "admin"
openstack_registry_domain: "johnson.int"
openstack_registry_port: "5000"

#docker_registry: "media.johnson.int:5000"
#docker_registry: "admin2.johnson.local:5000"
openstack_docker_registry: "{{openstack_registry_name}}.{{openstack_registry_domain}}:{{openstack_registry_port}}"

openstack_images_dir: "/srv/data2/openstack/images"

## management networks
openstack_network_interface: "mgtbr0"

## Neutron external (or public) networks
#openstack_neutron_external_interface: "cloudbr0"
#openstack_neutron_external_interface: "cloudbr1"
openstack_neutron_external_interface: "em4"

## floating IP for management traffic
openstack_kolla_internal_vip_address: "192.168.0.250"

openstack_kolla_options:

  ## management networks
  network_interface: "{{ openstack_network_interface }}"

  ## Neutron external (or public) networks
  neutron_external_interface: "{{ openstack_neutron_external_interface }}"

  ## floating IP for management traffic
  kolla_internal_vip_address: "{{ openstack_kolla_internal_vip_address }}"
  keepalived_virtual_router_id: "51"

  ## ref: https://docs.openstack.org/kolla-ansible/rocky/reference/networking-guide.html
  enable_neutron_provider_networks: "yes"

  ## ref: https://docs.openstack.org/project-deploy-guide/kolla-ansible/latest/multinode.html#deploy-a-registry
  ## ref: https://superuser.openstack.org/articles/deploying-openstack-designate-kolla/
  #docker_registry: 192.168.1.100:5000
  docker_registry: "{{ openstack_docker_registry }}"

  #docker_namespace: "local-kolla"
  #docker_namespace: "lokolla"

  ##
  ## we only want to configure the jump host to use the venv - not the target nodes
  ## so only configure the virtualenv variable and not the ansible_python_interpreter per the following instructs:
  ##
  ## ref: https://opendev.org/openstack/kolla-ansible/commit/ddd9d6ae6d1ab0d6fed100343b090d023878a19b
  ## ref: https://sudomakeinstall.com/uncategorized/openstack-ansible-kolla-on-centos-7-with-python-virtual-env
  ##
  virtualenv: "{{ openstack_venv_path }}"

  ansible_python_interpreter: "{{ ansible_openstack_python_interpreter }}"
  #ansible_python_interpreter: ./venv/bin/python

  ##
  ## the easy_install was not working on the jump host (node01 centos) so run without it
  ## or upgrading virtualenv seems to resolve
  ##
  ## NOTE: you might need to upgrade virtualenv if getting the following virtualenv requests error:
  ## ImportError: cannot import name requests
  ## ref: https://stackoverflow.com/posts/54100356/timeline
  ##
  ## e.g., pip install --upgrade virtualenv
  ##
  #easy_install_available: no

  ###################
  # OpenStack options
  ###################
  # Use these options to set the various log levels across all OpenStack projects
  # Valid options are [ True, False ]
  #openstack_logging_debug: "False"

  # These roles are required for Kolla to be operation, however a savvy deployer
  # could disable some of these required roles and run their own services.
  #enable_glance: "yes"
  #enable_haproxy: "yes"
  #enable_haproxy: "no"

  # OpenStack services can be enabled or disabled with these options
  #enable_ceph: "yes"
  #enable_cinder: "yes"
  #enable_heat: "yes"

  ### ref: https://superuser.openstack.org/articles/deploying-openstack-designate-kolla/
  enable_designate: "yes"
  dns_interface: "mgtbr0"
  #designate_backend: "bind9"

  ## to use an external DNS server:
  ## ref: https://docs.oracle.com/cd/E96260_01/E96263/html/designate-config.html
  designate_backend: no
  designate_backend_external: bind9
  designate_backend_external_bind9_nameservers:
  #  - "192.160.0.42"
    - "192.160.0.15"

  #designate_ns_record: "sample.openstack.org"
  #designate_ns_record: "pool.openstack.johnson.local"
  #designate_ns_record: "pool.openstack.dettonville.int"
  designate_ns_record: "ns1.dettonville.int"
#  designate_backend_external_bind9_nameservers: "{{ designate_backend_external_bind9_nameservers |join(',') }}"

  ## ref: https://docs.openstack.org/kolla-ansible/latest/user/troubleshooting.html
  ## When enable_central_logging is enabled, to view the logs in a web browser using Kibana,
  ## go to http://<kolla_internal_vip_address>:<kibana_server_port> or http://<kolla_external_vip_address>:<kibana_server_port>.
  ## Authenticate using <kibana_user> and <kibana_password>.
  ## ref: https://docs.openstack.org/kolla-ansible/latest/reference/logging-and-monitoring/central-logging-guide.html
  enable_central_logging: "yes"
  enable_elasticsearch_curator: "yes"

  #kibana_user: "kibana"
  #kibana_server_port: "5601"

  #enable_openvswitch: "yes"
  #enable_ovs_dpdk: "no"

  ###################
  # The directory to merge custom config files the kolla's config files
  # Service custom configuration(s)
  # ref: https://docs.openstack.org/kolla-ansible/latest/admin/advanced-configuration.html#openstack-service-configuration-in-kolla
  ###################
  node_custom_config: "/etc/kolla/config"

#### cloud setup
openstack_cloud_projects:

  - name: demo123
    description: demo project
    domain_id: default
    quota_cores: 20
    quota_instances: 10
    quota_ram: 40960
    users:
      - login: demo_user
        email: demo@centos.org
        password: Ch@ngeM3
        role: admin # can be _member_ or admin
      - login: demo_user2
        email: demo2@centos.org
        password: Ch@ngeMe2


openstack_cloud_security_groups:
  - name: default
    rules:
      - name: allow icmp traffic
        protocol: icmp

      - name: allow ssh traffic
        protocol: tcp
        port_range_min: 22
        port_range_max: 22

  - name: admin-secgrp
    project: admin
    rules:
      - name: allow icmp traffic
        protocol: icmp
        remote_ip_prefix: 0.0.0.0/0

      - name: allow ssh traffic
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: 0.0.0.0/0

  - name: demo-secgrp
#    project: demo123
    rules:
      - name: allow icmp traffic
        protocol: icmp
        remote_ip_prefix: 0.0.0.0/0

      - name: allow ssh traffic
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: 0.0.0.0/0


openstack_cloud_networks:

  ## ref: https://ask.openstack.org/en/question/111356/cannot-ssh-or-ping-instance-floating-ips-in-openstack/
  - name: public01
    external: yes
    provider_network_type: flat
    provider_physical_network: physnet1
#    provider_physical_network: extnet
#    provider_segmentation_id: 1234
    shared: yes
    subnets:
      - name: public01-subnet
        gateway_ip: "{{ gateway_ip4 }}"
        cidr: 192.168.0.0/16
        enable_dhcp: no
        dns_nameservers:
           - 192.168.0.1
#        dns_nameservers:
#           - 8.8.8.7
#           - 8.8.8.8
        allocation_pool_start: 192.168.30.20
        allocation_pool_end: 192.168.30.200
        host_routes:
           - destination: 192.168.0.0/24
             nexthop: 192.168.30.1

  - name: admin-net
    provider_network_type: vxlan
    project: admin
    subnets:
      - name: admin-subnet
        gateway_ip: 10.10.0.1
        cidr: 10.10.0.0/24
#        enable_dhcp: no
        dns_nameservers:
           - 8.8.8.7
           - 8.8.8.8

  - name: demo-net
    provider_network_type: vxlan
    project: demo123
    subnets:
      - name: demo-subnet
        gateway_ip: 10.10.1.1
        cidr: 10.10.1.0/24
#        enable_dhcp: no
        dns_nameservers:
           - 8.8.8.7
           - 8.8.8.8

openstack_cloud_routers:
  - name: admin-router
    network: public01
    project: admin
    external_fixed_ips:
      - subnet: public01-subnet
        ip: 192.168.30.2
    interfaces:
      - net: admin-net
        subnet: admin-subnet

  - name: demo-router
    network: public01
    project: demo123
    external_fixed_ips:
      - subnet: public01-subnet
        ip: 192.168.30.3
    interfaces:
      - net: demo-net
        subnet: demo-subnet


openstack_cloud_instances:

  ## ref: https://cplatform99.blogspot.com/2017/07/openstack-instance-deployment-using.html
  - name: admin-cirros-01
    auto_floating_ip: true
    flavor: m1.nano
    image: cirros
    key_name: ansible_key
    security_groups:
      - admin-secgrp
    nics:
      - net-name: admin-net
    ext_floating_ips:
      - network: public01
        nat_destination: admin-net
        wait: true
        timeout: 180
    meta:
      ## ref: https://docs.ukcloud.com/articles/openstack/ostack-how-recover-instance.html
      RestartOnFail: 'True'

  ## ref: https://cplatform99.blogspot.com/2017/07/openstack-instance-deployment-using.html
  - name: admin-cirros-02
    auto_floating_ip: true
    flavor: m1.nano
    image: cirros
    key_name: ansible_key
    security_groups:
      - admin-secgrp
    nics:
      - net-name: admin-net
    ext_floating_ips:
      - network: public01
        nat_destination: admin-net
        wait: true
        timeout: 180
    meta:
      ## ref: https://docs.ukcloud.com/articles/openstack/ostack-how-recover-instance.html
      RestartOnFail: 'True'

  ## ref: https://cplatform99.blogspot.com/2017/07/openstack-instance-deployment-using.html
  - name: admin-ubuntu-01
    auto_floating_ip: true
#    flavor: m1.tiny
    flavor: m1.small
    image: ubuntu-18-lts
    key_name: ansible_key
    security_groups:
      - admin-secgrp
    nics:
      - net-name: admin-net
    ext_floating_ips:
      - network: public01
        nat_destination: admin-net
        wait: true
        timeout: 180
    meta:
      ## ref: https://docs.ukcloud.com/articles/openstack/ostack-how-recover-instance.html
      RestartOnFail: 'True'
    ## ref: https://keithtenzer.com/2016/05/09/openstack-heat-and-ansible-automation-born-in-the-cloud/
    ## ref: https://docs.ansible.com/ansible/latest/modules/os_server_module.html#os-server-module
    ## ref: https://raymii.org/s/tutorials/Automating_Openstack_with_Cloud_init_run_a_script_on_VMs_first_boot.html
    ## ref: https://docs.ansible.com/ansible/latest/modules/os_server_module.html#os-server-module
    ## ref: https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-ubuntu-18-04
    userdata: |
      {%- raw -%}#!/bin/bash -v
      # Example script to run at first boot via Openstack
      # using the user_data and cloud-init.
      # This example installs Ansible.
      echo "userdata running on hostname: $(uname -n)"
      echo "install Ansible"
      #pip2 install --upgrade ansible 2>&1
      #pip install --upgrade ansible 2>&1
      sudo apt-add-repository ppa:ansible/ansible
      sudo apt update
      sudo apt install -y ansible
      {% endraw %}

#  - name: demo-cirros-01
#    auto_floating_ip: true
#    flavor: m1.nano
#    image: cirros
#    key_name: ansible_key
#    security_groups:
#      - demo-secgrp
#    nics:
#      - net-name: demo-net
#    ext_floating_ips:
#      - network: public01
#        nat_destination: demo-net
#        wait: true
#        timeout: 180
#    meta:
#      ## ref: https://docs.ukcloud.com/articles/openstack/ostack-how-recover-instance.html
#      RestartOnFail: 'True'

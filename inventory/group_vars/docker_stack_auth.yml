---

docker_stack__service_groups__auth:
  - auth

############
## AUTH
############
docker_stack__auth_google_client_id: "{{ vault__docker_stack__auth_google_client_id | d('') }}"
docker_stack__auth_google_client_secret: "{{ vault__docker_stack__auth_google_client_secret | d('') }}"

##########
## authelia
##########
docker_stack__auth_oauth_secret: "{{ vault__docker_stack__auth_oauth_secret }}"
docker_stack__auth_whitelist: "{{ vault__docker_stack__auth_whitelist }}"

docker_stack__authelia_jwt_secret: "{{ vault__docker_stack__authelia_jwt_secret | d('') }}"
docker_stack__authelia_encryption_key: "{{ vault__docker_stack__authelia_encryption_key | d('') }}"
docker_stack__authelia_password: "{{ vault__docker_stack__authelia_password | d('') }}"
docker_stack__authelia_users: "{{ vault__docker_stack__authelia_users | d([]) }}"

docker_stack__authelia_domain: "{{ docker_stack__internal_domain }}"
docker_stack__authelia_default_redirection_url: "https://{{ docker_stack__internal_domain }}"

docker_stack__authelia_access_control:
  default_policy: deny
  rules:
    # Rules applied to everyone
    - domain: "secure.{{ docker_stack__internal_domain }}"
      policy: two_factor
    - domain:
        - "authelia.{{ docker_stack__internal_domain }}"
        - "public.{{ docker_stack__internal_domain }}"
      policy: bypass
#    - domain: "traefik.{{ docker_stack__internal_domain }}"
#      policy: one_factor
#    - domain: "heimdall.{{ docker_stack__internal_domain }}"
#      policy: one_factor
    - domain:
        - "*.{{ docker_stack__internal_domain }}"
      policy: one_factor
#      policy: two_factor

docker_stackauthelia_totp:
  issuer: authe.dettonville.org

## ref: https://www.authelia.com/docs/configuration/one-time-password.html
docker_stack__authelia_notifier:
  smtp:
    host: "{{ docker_stack__smtp_address }}"
    port: "{{ docker_stack__smtp_port }}"
    sender: "{{ docker_stack__email_from }}"
    disable_require_tls: true
    disable_starttls: true
#    tls:
#      skip_verify: true

## ref: https://docs.ibracorp.io/authelia/configuration-files/configuration.yml
#docker_stack__authelia_notifier:
#  disable_startup_check: true
#  smtp:
#    host: "{{ docker_stack__smtp_address }}"
#    port: "{{ docker_stack__smtp_port }}"
#    sender: "{{ docker_stack__email_from }}"
#    disable_require_tls: true
#    tls:
#      skip_verify: true
#    disable_require_tls: true
#    tls:
#      skip_verify: true
#  filesystem:
#    filename: /tmp/authelia/notification.txt


docker_stack__authelia_authentication_backend:
  ldap:
    # The LDAP implementation, this affects elements like the attribute utilised for resetting a password.
    # Acceptable options are as follows:
    # - 'activedirectory' - For Microsoft Active Directory.
    # - 'custom' - For custom specifications of attributes and filters.
    # This currently defaults to 'custom' to maintain existing behaviour.
    #
    # Depending on the option here certain other values in this section have a default value, notably all
    # of the attribute mappings have a default value that this config overrides, you can read more
    # about these default values at https://docs.authelia.com/configuration/authentication/ldap.html#defaults
    implementation: custom

    # The url to the ldap server. Scheme can be ldap or ldaps in the format (port optional) <scheme>://<address>[:<port>].
    url: "{{ ldap_internal_uri }}"

    # Use StartTLS with the LDAP connection.
    start_tls: false

    tls:
      # Server Name for certificate validation (in case it's not set correctly in the URL).
      # server_name: ldap.example.com

      # Skip verifying the server certificate (to allow a self-signed certificate).
      skip_verify: false

      # Minimum TLS version for either Secure LDAP or LDAP StartTLS.
      minimum_version: TLS1.2

    # The base dn for every entries.
    base_dn: "{{ ldap_internal_base }}"

    # The attribute holding the username of the user. This attribute is used to populate
    # the username in the session information. It was introduced due to #561 to handle case
    # insensitive search queries.
    # For you information, Microsoft Active Directory usually uses 'sAMAccountName' and OpenLDAP
    # usually uses 'uid'
    # Beware that this attribute holds the unique identifiers for the users binding the user and the configuration
    # stored in database. Therefore only single value attributes are allowed and the value
    # must never be changed once attributed to a user otherwise it would break the configuration
    # for that user. Technically, non-unique attributes like 'mail' can also be used but we don't recommend using
    # them, we instead advise to use the attributes mentioned above (sAMAccountName and uid) to follow
    # https://www.ietf.org/rfc/rfc2307.txt.
    # username_attribute: uid

    # An additional dn to define the scope to all users.
    additional_users_dn: ou=users

    # The users filter used in search queries to find the user profile based on input filled in login form.
    # Various placeholders are available to represent the user input and back reference other options of the configuration:
    # - {input} is a placeholder replaced by what the user inputs in the login form.
    # - {username_attribute} is a mandatory placeholder replaced by what is configured in `username_attribute`.
    # - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
    # - DON'T USE - {0} is an alias for {input} supported for backward compatibility but it will be deprecated in later versions, so please don't use it.
    #
    # Recommended settings are as follows:
    # - Microsoft Active Directory: (&({username_attribute}={input})(objectCategory=person)(objectClass=user))
    # - OpenLDAP: (&({username_attribute}={input})(objectClass=person))' or '(&({username_attribute}={input})(objectClass=inetOrgPerson))
    #
    # To allow sign in both with username and email, one can use a filter like
    # (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
#    users_filter: (&({username_attribute}={input})(objectClass=person))
    users_filter: "(&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))"

    # An additional dn to define the scope of groups.
    additional_groups_dn: ou=groups

    # The groups filter used in search queries to find the groups of the user.
    # - {input} is a placeholder replaced by what the user inputs in the login form.
    # - {username} is a placeholder replace by the username stored in LDAP (based on `username_attribute`).
    # - {dn} is a matcher replaced by the user distinguished name, aka, user DN.
    # - {username_attribute} is a placeholder replaced by what is configured in `username_attribute`.
    # - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
    # - DON'T USE - {0} is an alias for {input} supported for backward compatibility but it will be deprecated in later versions, so please don't use it.
    # - DON'T USE - {1} is an alias for {username} supported for backward compatibility but it will be deprecated in later version, so please don't use it.
    # If your groups use the `groupOfUniqueNames` structure use this instead: (&(uniquemember={dn})(objectclass=groupOfUniqueNames))
    groups_filter: (&(member={dn})(objectclass=groupOfNames))

    # The attribute holding the name of the group
    # group_name_attribute: cn

    # The attribute holding the mail address of the user. If multiple email addresses are defined for a user, only the first
    # one returned by the LDAP server is used.
    # mail_attribute: mail

    # The attribute holding the display name of the user. This will be used to greet an authenticated user.
    # display_name_attribute: displayname

    # The username and password of the admin user.
    user: "{{ ldap_admin_dn }}"
    # Password can also be set using a secret: https://docs.authelia.com/configuration/secrets.html
    password: "{{ ldap_admin_pw }}"

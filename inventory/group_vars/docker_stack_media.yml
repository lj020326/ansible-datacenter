---

## container user
docker_stack__user_username: media
docker_stack__user_password: "{{ vault__docker_user_password }}"
docker_stack__user_group: media

## make sure to use the same UID/GID specified for the LDAP user
## this also guarantees consistency across all nodes for the given user ID.
#docker_stack__user_uid: 1003
docker_stack__user_uid: 10003
docker_stack__user_gid: 995

## run 1:30 AM every day
docker_stack__restart_stack_schedule: ["30", "1", "*", "*", "*"]

bootstrap_linux_package__package_list__media_node:
  ## ref: https://github.com/desimaniac/docs/blob/master/enable_igpu_on_hetzner.md
  - vainfo
  ## ref: https://askubuntu.com/questions/387594/how-to-measure-gpu-usage
  - intel-gpu-tools
  ## ref: https://unix.stackexchange.com/questions/127347/editing-metadata-with-bash
  - libimage-exiftool-perl
  ## ref: https://www.tecmint.com/find-and-delete-duplicate-files-in-linux/
  - rdfind

docker_stack__service_groups__media:
  - registry
  - redis
  - media
  - photoprism
#  - immich
#  - nextcloud
#  - pydio
#  - plex

docker_stack__service_route_name: "media"

#############
## vault vars
#############
docker_stack__media__sickbeard_api_key: "{{ vault__docker_stack__media__sickbeard_api_key | d('') }}"
docker_stack__media__couchpotato_apikey: "{{ vault__docker_stack__media__couchpotato_apikey | d('') }}"
docker_stack__media__lidarr_apikey: "{{ vault__docker_stack__media__lidarr_apikey | d('') }}"
docker_stack__media__sonarr_apikey: "{{ vault__docker_stack__media__sonarr_apikey | d('') }}"
docker_stack__media__radarr_apikey: "{{ vault__docker_stack__media__radarr_apikey | d('') }}"

docker_stack__media__sabnzbd_apikey: "{{ vault__docker_stack__media__sabnzbd_apikey | d('') }}"
docker_stack__media__sabnzbd_nzbkey: "{{ vault__docker_stack__media__sabnzbd_nzbkey | d('') }}"
# docker_stack__media__sabnzbd_nzbkey: "{{ vault__docker_stack__media__sabnzbd_nzbkey | d('') }}"
docker_stack__media__sabnzbd_rating_apikey: "{{ vault__docker_stack__media__sabnzbd_rating_apikey | d('') }}"

docker_stack__media__newznab_key: "{{ vault__docker_stack__media__newznab_key | d('') }}"

docker_stack__media__couchpotato_password: "{{ vault__docker_stack__media__couchpotato_password | d('') }}"

docker_stack__media__transmission_rpc_username: "{{ vault__docker_stack__media__transmission_rpc_username | d('') }}"
docker_stack__media__transmission_rpc_password: "{{ vault__docker_stack__media__transmission_rpc_password | d('') }}"

docker_stack__photoprism__username: "{{ vault__docker_stack__photoprism__username | d('') }}"
docker_stack__photoprism__password: "{{ vault__docker_stack__photoprism__password | d('') }}"

docker_stack__plex_apikey: "{{ vault__docker_stack__plex_apikey | d('') }}"
docker_stack__plex_claim: "{{ vault__docker_stack__plex_claim | d('') }}"

docker_stack__openvpn_ip: "{{ vault__docker_stack__openvpn_ip | d('') }}"
docker_stack__openvpn_port: "{{ vault__docker_stack__openvpn_port }}"
docker_stack__openvpn_proto: "{{ vault__docker_stack__openvpn_proto }}"

docker_stack__openvpn_username: "{{ vault__docker_stack__openvpn_username }}"
docker_stack__openvpn_password: "{{ vault__docker_stack__openvpn_password }}"
# docker_stack__openvpn_config: "{{ vault__docker_stack__openvpn_config }}"

## piwigo
docker_piwigo_mysql_pwd: "{{ vault__docker_piwigo_mysql_pwd }}"

## lychee
docker_lychee_mysql_pwd: "{{ vault__docker_lychee_mysql_pwd }}"

docker_stack__openvpn_certkey: "{{ vault__docker_stack__openvpn_certkey }}"

#############
## app vars
#############

# media_server_fqdn: media.johnson.int

# docker_stack__run_services: false
# docker_stack__traefik_version: v1
# docker_stack__traefik_certprovider_qa: true

# docker_stack__media__sonarr_image: "linuxserver/sonarr:5.14"
# docker_stack__media__sonarr_image: "linuxserver/sonarr:latest"
# docker_stack__media__sonarr_image: "{{ docker_stack__registry_endpoint }}/docker-sonarr:latest"
# docker_stack__media__radarr_image: "{{ docker_stack__registry_endpoint }}/docker-radarr:latest"
docker_stack__media__openvpn_image: "{{ docker_stack__registry_endpoint }}/docker-nordvpn:latest"

docker_stack__enable_external_route: true
# docker_stack__openvpn_network: "192.168.0.0/16"
docker_stack__openvpn_network: "{{ gateway_ipv4_network_cidr }}"

docker_stack__media__media_path: "/export/media"

# docker_stack__nextcloud__media_path: "/srv/media"
# docker_stack__pydio__media_path: "/srv/media"

# docker_stack__media__nas_media_path: "/data/media"
docker_stack__media__nas_media_path: "/srv/media"

docker_stack__nextcloud__server_fqdn: "nextcloud.{{ docker_stack__external_domain }}"
docker_stack__nextcloud__media_path: "{{ docker_stack__media__nas_media_path }}"
docker_stack__nextcloud__shared_data_dir: "/data"
docker_stack__nextcloud__passwd: "{{ vault__nextcloud__passwd }}"
docker_stack__nextcloud__redis_passwd: "{{ vault__docker_stack__redis_password }}"

docker_stack__nextcloud__ldap_host: "{{ docker_stack__ldap_host }}"
docker_stack__nextcloud__ldap_base_dn: "{{ docker_stack__ldap_base_dn }}"

docker_stack__pydio__media_path: "{{ docker_stack__media__nas_media_path }}"
docker_stack__pydio__shared_data_dir: "/data"
docker_stack__pydio__ajxp_cli_secret_key: "{{ vault__pydio__ajxp_cli_secret_key }}"

docker_stack__pydio__mysql_host: "media.{{ docker_stack__internal_domain }}:3306"
docker_stack__pydio__mysql_username: "{{ mysql_root_username }}"
docker_stack__pydio__mysql_password: "{{ mysql_root_password }}"

docker_stack__pydio__ldap_url: "{{ docker_stack__ldap_host }}"
docker_stack__pydio__ldap_port: "{{ docker_stack__ldap_port }}"
docker_stack__pydio__ldap_user: "{{ docker_stack__ldap_admin_dn }}"
docker_stack__pydio__ldap_password: "{{ docker_stack__ldap_admin_password }}"
docker_stack__pydio__ldap_base_dn: "{{ docker_stack__ldap_base_dn }}"
docker_stack__pydio__ldap_groupattr: "ou=groups,{{ docker_stack__ldap_base_dn }}"
docker_stack__pydio__ldap_gdn: "ou=groups,{{ docker_stack__ldap_base_dn }}"
docker_stack__pydio__ldap_filter: "objectClass=person"
docker_stack__pydio__ldap_dn: "ou=users,{{ docker_stack__ldap_base_dn }}"
docker_stack__pydio__ldap_test_user: "ljohnson"


# ca_java_keystore_enabled: false

# docker_registry_backend: media.johnson.int:5000
# docker_registry: media.johnson.int:5000
# docker_registry: registry.media.johnson.int:5000

docker_stack__registry_service_common_name: "{{ docker_stack__internal_domain }}"

# docker_stack__registry_service_data_path: "/srv/data2/docker_registry_local"
docker_stack__registry_service_data_path: "/data/docker_registry_local"

docker_registry_login: true
docker_stack__registry_enable_passthru: false

## piwigo
docker_piwigo_mysql_host: "media.{{ docker_stack__internal_root_domain }}:3306"
docker_lychee_mysql_host: "media.{{ docker_stack__internal_root_domain }}:3306"

docker_stack__registry_enable_auth: true
# docker_stack__registry_users: "{{ registry_users }}"

docker_stack__media__newsgroups_servers: "{{ vault__docker_stack__media__newsgroups_servers }}"

pgadmin_username: "admin"

plex_host: "media.{{ docker_stack__internal_root_domain }}:32400"
plex_host_ip: "{{ gateway_ipv4_subnet_1_2 }}.0.135"

## ref:
# docker_stack__admin_jobs: []
# docker_stack__admin_jobs:
#  - name: "hourly docker restart job"
##    special_time: daily
#    minute: "5"
#    hour: "*"
##    job: "cd {{ docker_stack__dir }} && docker-compose restart qbittorrent sonarr radarr lidarr readarr"
#    job: "cd {{ docker_stack__dir }} && docker-compose restart sonarr radarr lidarr readarr"
#
#  - name: "hourly docker restart job"
#    minute: "10"
#    hour: "*/6"
##    hour: "*"
#    job: "cd {{ docker_stack__dir }} && docker-compose up -d"

##########
## crons
##   list of CRONs to be setup for docker_stack machines.
##########

#bootstrap_linux_cron__list__docker_stack_media:
#  - name: "Restart qbittorrent service"
#    job: "cd /home/{{ docker_stack__user_username }}/docker && docker-compose restart qbittorrent"
#    ## run at 10 minutes past (*:10:00) every hour
#    schedule: ["10", "*", "*", "*", "*"]
#    cron_file: "docker-stack-restart-service"
##    user: "{{ (bootstrap_docker__users | first) | d('root') }}"

bootstrap_linux_mount__list__tmpdir:
  - name: "/tmp"
    src: "tmpfs"
    fstype: "tmpfs"
    ## ref: https://forums.plex.tv/t/guide-plex-media-server-with-intel-nuc-and-ubuntu-16-04-lts/217937
    options: 'size=100G,defaults,noatime,nosuid,nodev,mode=1777'

bootstrap_linux_mount__list__media:
  - name: "/srv/backups"
    src: "diskstation01.johnson.int:/volume2/backups"
    fstype: "nfs"
    options: "vers=4.1,intr,auto,nofail"

  - name: "/srv/media"
    src: "/data/media"
    fstype: none
    options: "rw,auto,bind"

  - name: "/data/backups"
    src: "/srv/backups"
    fstype: none
    options: "ro,auto,bind"

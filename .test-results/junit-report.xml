<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="6" time="7.343" timestamp="2024-05-02T16:51:42.348797" hostname="Lees-MacBook-Pro.local"><testcase classname="test_inventory" name="test_inventory[validate_yamllint]" time="3.929" /><testcase classname="test_inventory" name="test_inventory[validate_file_extensions]" time="0.092"><failure message="AssertionError: assert 4 == 0&#10; +  where 4 = ProcessResult(returncode=4, stdout='[INFO ]: ==&gt; PROJECT_DIR=/Users/ljohnson/repos/ansible/ansible-datacenter\n[INFO ]: ==&gt; TEST_CASES=validate_file_extensions\n[INFO ]: ==&gt; run_tests(): TEST_CASES[@]=validate_file_extensions\n[ERROR]: ==&gt; run_test_case(02): validate_file_extensions: FAILED\n[INFO ]: ==&gt; run_test_case(02): TEST_RESULTS ****\n[INFO ]: ==&gt; \n[INFO ]: ==&gt; #######################################################\n[INFO ]: ==&gt; validate_file_extensions(): Validate all files consistent with *.yml\n[INFO ]: ==&gt; validate_file_extensions(): There are [4] inconsistent file names found without *.yml extension:\n./.pytest_cache/CACHEDIR.TAG\n./.pytest_cache/v/cache/nodeids\n./.pytest_cache/v/cache/lastfailed\n./.pytest_cache/v/cache/stepwise\n[INFO ]: ==&gt; #######################################################\n[INFO ]: ==&gt; validate_file_extensions(): ERROR_COUNT=4\n[INFO ]: ==&gt; \n[INFO ]: ==&gt; run_tests(): ERROR_COUNT=4\n[INFO ]: ==&gt; *********************** \n[INFO ]: ==&gt; OVERALL INVENTORY TEST RESULTS\n[INFO ]: ==&gt; TOTAL TOTAL_FAILED=4\n[ERROR]: ==&gt; TEST FAILED!\n', stderr='', cmdline=['/Users/ljohnson/repos/ansible/ansible-datacenter/run-inventory-tests.sh', b'validate_file_extensions'], data_key=None, data=None).returncode">shell = Subprocess(cwd=PosixPath('/Users/ljohnson/repos/ansible/ansible-datacenter'), slow_stop=True, timeout=None), script_path = '/Users/ljohnson/repos/ansible/ansible-datacenter/run-inventory-tests.sh'
test_case = b'validate_file_extensions'

    @pytest.mark.parametrize("test_case", test_case_list)
    def test_inventory(shell, script_path, test_case):
        ret = shell.run(script_path, test_case)
        if ret.returncode != 0:
            # ref: https://docs.python.org/3/library/subprocess.html#subprocess.Popen
            print(ret.stderr)
&gt;       assert ret.returncode == 0
E       AssertionError: assert 4 == 0
E        +  where 4 = ProcessResult(returncode=4, stdout='[INFO ]: ==&gt; PROJECT_DIR=/Users/ljohnson/repos/ansible/ansible-datacenter\n[INFO ]: ==&gt; TEST_CASES=validate_file_extensions\n[INFO ]: ==&gt; run_tests(): TEST_CASES[@]=validate_file_extensions\n[ERROR]: ==&gt; run_test_case(02): validate_file_extensions: FAILED\n[INFO ]: ==&gt; run_test_case(02): TEST_RESULTS ****\n[INFO ]: ==&gt; \n[INFO ]: ==&gt; #######################################################\n[INFO ]: ==&gt; validate_file_extensions(): Validate all files consistent with *.yml\n[INFO ]: ==&gt; validate_file_extensions(): There are [4] inconsistent file names found without *.yml extension:\n./.pytest_cache/CACHEDIR.TAG\n./.pytest_cache/v/cache/nodeids\n./.pytest_cache/v/cache/lastfailed\n./.pytest_cache/v/cache/stepwise\n[INFO ]: ==&gt; #######################################################\n[INFO ]: ==&gt; validate_file_extensions(): ERROR_COUNT=4\n[INFO ]: ==&gt; \n[INFO ]: ==&gt; run_tests(): ERROR_COUNT=4\n[INFO ]: ==&gt; *********************** \n[INFO ]: ==&gt; OVERALL INVENTORY TEST RESULTS\n[INFO ]: ==&gt; TOTAL TOTAL_FAILED=4\n[ERROR]: ==&gt; TEST FAILED!\n', stderr='', cmdline=['/Users/ljohnson/repos/ansible/ansible-datacenter/run-inventory-tests.sh', b'validate_file_extensions'], data_key=None, data=None).returncode

inventory/test_inventory.py:59: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------


</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="test_inventory" name="test_inventory[validate_yml_sortorder]" time="0.345" /><testcase classname="test_inventory" name="test_inventory[validate_xenv_group_hierarchy]" time="0.599" /><testcase classname="test_inventory" name="test_inventory[validate_child_inventories]" time="2.049" /><testcase classname="test_inventory" name="test_inventory[validate_child_groupvars]" time="0.094" /></testsuite></testsuites>
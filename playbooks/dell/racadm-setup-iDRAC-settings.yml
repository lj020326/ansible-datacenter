---
- name: Manage IDRAC Settings for Dell PowerEdge Servers.
  gather_facts: false
  hosts: idrac_hosts
  user: root
  become: true
  tasks:
    - name: Get Existing iDRAC IP Address
      ansible.builtin.raw: racadm get iDRAC.IPv4.Address
      changed_when: false
      register: idrac_ip
      failed_when: "'ERROR' in idrac_ip.stdout or 'Invalid' in idrac_ip.stdout"

    - name: debug - Get Existing iDRAC IP Address
      ansible.builtin.debug:
        var: idrac_ip.stdout

    - name: Get Existing iDRAC.NIC.DNSRacName
      ansible.builtin.raw: racadm get iDRAC.NIC.DNSRacName
      changed_when: false
      register: idrac_rac_name
      failed_when: "'ERROR' in idrac_rac_name.stdout or 'Invalid' in idrac_rac_name.stdout"
      #ignore_errors: true

    - name: debug - Get Existing iDRAC.NIC.DNSRacName
      ansible.builtin.debug:
        var: idrac_rac_name.stdout

    - name: Set iDRAC.NIC.DNSRacName
      when: idrac_racname not in idrac_rac_name.stdout
      ansible.builtin.raw: racadm set iDRAC.NIC.DNSRacName "{{idrac_racname}}"
      changed_when: false
      register: result
      failed_when: "'ERROR' in result.stdout or 'Invalid' in result.stdout"

    - name: Get Existing iDRAC.NIC.DNSDomainName
      ansible.builtin.raw: racadm get iDRAC.NIC.DNSDomainName
      changed_when: false
      register: idrac_domain_name
      failed_when: "'ERROR' in idrac_domain_name.stdout or 'Invalid' in idrac_domain_name.stdout"

    - name: debug - Get Existing iDRAC.NIC.DNSDomainName
      ansible.builtin.debug:
        var: idrac_domain_name.stdout

    - name: Set iDRAC.NIC.DNSDomainName
      when: idrac_domainname not in idrac_domain_name.stdout
      ansible.builtin.raw: racadm set iDRAC.NIC.DNSDomainName "{{idrac_domainname}}"
      changed_when: false
      register: result
      failed_when: "'ERROR' in result.stdout or 'Invalid' in result.stdout"

    - name: Get Existing iDRAC.IPv4.Netmask
      ansible.builtin.raw: racadm get iDRAC.IPv4.Netmask
      changed_when: false
      register: idrac_netmask_value
      failed_when: "'ERROR' in idrac_netmask_value.stdout or 'Invalid' in idrac_netmask_value.stdout"

    - name: debug - Get Existing iDRAC.IPv4.Netmask
      ansible.builtin.debug:
        var: idrac_netmask_value.stdout

    - name: Set iDRAC.IPv4.Netmask
      when: idrac_netmask not in idrac_netmask_value.stdout
      ansible.builtin.raw: racadm set iDRAC.IPv4.Netmask "{{idrac_netmask}}"
      changed_when: false
      register: result
      failed_when: "'ERROR' in result.stdout or 'Invalid' in result.stdout"

    - name: Get Existing iDRAC.IPv4.Gateway
      ansible.builtin.raw: racadm get iDRAC.IPv4.Gateway
      changed_when: false
      register: idrac_gateway_value
      failed_when: "'ERROR' in idrac_gateway_value.stdout or 'Invalid' in idrac_gateway_value.stdout"

    - name: debug - Get Existing iDRAC.IPv4.Gateway
      ansible.builtin.debug:
        var: idrac_gateway_value.stdout

    - name: Set iDRAC.IPv4.Gateway
      when: idrac_gateway not in idrac_gateway_value.stdout
      ansible.builtin.raw: racadm set iDRAC.IPv4.Gateway "{{idrac_gateway}}"
      changed_when: false
      register: result
      failed_when: "'ERROR' in result.stdout or 'Invalid' in result.stdout"

    - name: Get Existing iDRAC.IPv4.DNS1
      ansible.builtin.raw: racadm get iDRAC.IPv4.DNS1
      changed_when: false
      register: idrac_dns1_value
      failed_when: "'ERROR' in idrac_dns1_value.stdout or 'Invalid' in idrac_dns1_value.stdout"

    - name: debug - Get Existing iDRAC.IPv4.DNS1
      ansible.builtin.debug:
        var: idrac_dns1_value.stdout

    - name: Set iDRAC.IPv4.DNS1
      when: idrac_dns1 not in idrac_dns1_value.stdout
      ansible.builtin.raw: racadm set iDRAC.IPv4.DNS1 "{{idrac_dns1}}"
      changed_when: false
      register: result
      failed_when: "'ERROR' in result.stdout or 'Invalid' in result.stdout"

    - name: Get Existing iDRAC.IPv4.DNS2
      ansible.builtin.raw: racadm get iDRAC.IPv4.DNS2
      changed_when: false
      register: idrac_dns2_value
      failed_when: "'ERROR' in idrac_dns2_value.stdout or 'Invalid' in idrac_dns2_value.stdout"

    - name: debug - Get Existing iDRAC.IPv4.DNS2
      ansible.builtin.debug:
        var: idrac_dns2_value.stdout

    - name: Set iDRAC.IPv4.DNS2
      when: idrac_dns2 not in idrac_dns2_value.stdout
      ansible.builtin.raw: racadm set iDRAC.IPv4.DNS2 "{{idrac_dns2}}"
      changed_when: false
      register: result
      failed_when: "'ERROR' in result.stdout or 'Invalid' in result.stdout"

    - name: Set DHCP to Disable on iDRAC.IPv4.DHCPEnable
      ansible.builtin.raw: racadm set iDRAC.IPv4.DHCPEnable 0
      changed_when: false
      register: idrac_dhcp_disbale
      failed_when: "'ERROR' in idrac_dhcp_disbale.stdout or 'Invalid' in idrac_dhcp_disbale.stdout"

    - name: debug - Set DHCP to Disable on iDRAC.IPv4.DHCPEnable
      ansible.builtin.debug:
        var: idrac_dhcp_disbale.stdout

    - name: Set DNS from DHCP to Disable on iDRAC.IPv4.DNSFromDHCP
      ansible.builtin.raw: racadm set iDRAC.IPv4.DNSFromDHCP 0
      changed_when: false
      register: idrac_dns_disbale
      failed_when: "'ERROR' in idrac_dns_disbale.stdout or 'Invalid' in idrac_dns_disbale.stdout"

    - name: debug - Set DNS from DHCP to Disable on iDRAC.IPv4.DNSFromDHCP
      ansible.builtin.debug:
        var: idrac_dns_disbale.stdout

    - name: Enable IPMI on iDRAC
      ansible.builtin.raw: racadm set iDRAC.IPMILan.Enable 1
      changed_when: false
      register: idrac_ipmi_enable
      failed_when: "'ERROR' in idrac_ipmi_enable.stdout or 'Invalid' in idrac_ipmi_enable.stdout"

    - name: debug - Enable IPMI on iDRAC
      ansible.builtin.debug:
        var: idrac_ipmi_enable.stdout

    - name: Enable LifeController State
      ansible.builtin.raw: racadm set LifecycleController.LCAttributes.LifecycleControllerState 1
      changed_when: false
      register: lifecontroller_state
      failed_when: "'ERROR' in lifecontroller_state.stdout or 'Invalid' in lifecontroller_state.stdout"

    - name: debug - Enable LifeController State
      ansible.builtin.debug:
        var: lifecontroller_state.stdout

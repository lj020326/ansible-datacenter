---

- name: "Pre-check | Perform connectivity (ping) tests to determine nodes to add to group 'node_offline'"
  hosts: all,!node_offline
  tags: always
  ## https://issues.jenkins-ci.org/browse/JENKINS-54557
  ignore_unreachable: yes
  gather_facts: no
  roles:
    - role: ansible-ping-test
      when:
        - inventory_hostname in ansible_play_hosts_all
        - run_tags_do_not_include_excluded_tags

## ref: https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html
## ref: https://grokbase.com/t/gg/ansible-project/149c6gcb6f/is-there-a-way-to-dynamically-target-subsets-of-an-inventory-group-based-on-facts
## ref: https://github.com/ansible/ansible/issues/20360
- name: "Gather facts for all hosts to apply OS specific group vars for them"
  tags: always
#  hosts: all,!node_offline,!local
  hosts: all,!node_offline
  ignore_unreachable: yes
  gather_facts: yes
  vars_files:
    - vars/secrets.yml
  roles:
    - role: assign-dynamic-groups
      when: inventory_hostname in ansible_play_hosts_all

- name: Display important common variable information
  hosts: all,!node_offline,!local
  ignore_unreachable: yes
  ignore_errors: yes
  gather_facts: no
  tasks:

    - name: Display important common variable information
      when: inventory_hostname in ansible_play_hosts
      debug:
        msg:
          - "inventory_hostname={{ inventory_hostname | d('unknown') }}"
          - "inventory_hostname_short={{ inventory_hostname_short | d('unknown') }}"
          - "internal_subdomain={{ internal_subdomain | d('') }}"
          - "internal_domain={{ internal_domain | d('unknown') }}"
          - "netbase__hostname={{ netbase__hostname }}"
          - "bootstrap_user={{ bootstrap_user }}"
          ## BEGIN dynamically derived os_* groups
          - "os_family={{ os_family }}"
          - "os_distribution={{ os_distribution }}"
          - "os_distribution_version={{ os_distribution_version }}"
          - "os_machine_type={{ os_machine_type }}"
          ## END dynamically derived os_* groups
          - "os_python_interpreter={{ os_python_interpreter| d('') }}"
          - "ansible_python_interpreter={{ ansible_python_interpreter | d('unknown') }}"
          - "ansible_pip_interpreter={{ ansible_pip_interpreter | d('unknown') }}"
          - "ansible_user={{ ansible_user }}"
          - "ansible_host={{ ansible_host }}"
          - "ansible_hostname={{ ansible_hostname | d('') }}"
          - "ansible_port={{ ansible_port | d('') }}"
          - "ansible_fqdn={{ ansible_fqdn | d('') }}"
          - "ansible_default_ipv4.address={{ ansible_default_ipv4.address | d(ansible_all_ipv4_addresses[0]) | d('') }}"
          - "ansible_connection={{ ansible_connection|d('') }}"
          - "ansible_virtualization_type={{ ansible_virtualization_type|d('') }}"
          - "ansible_virtualization_role={{ ansible_virtualization_role|d('') }}"
          - "ansible_system_vendor={{ ansible_system_vendor|d('') }}"
          - "ansible_product_name={{ ansible_product_name|d('') }}"
          - "ansible_winrm_transport={{ ansible_winrm_transport|d('') }}"
          - "ansible_winrm_scheme={{ ansible_winrm_scheme|d('') }}"
          - "ansible_winrm_server_cert_validation={{ ansible_winrm_server_cert_validation|d('') }}"
          - "ansible_os_family={{ ansible_os_family | d('unknown') }}"
          - "ansible_distribution={{ ansible_distribution | d('unknown') }}"
          - "ansible_distribution_release={{ ansible_distribution_release | d('unknown') }}"
          - "ansible_distribution_major_version={{ ansible_distribution_major_version | d('unknown') }}"
          - "group_names={{ group_names | d('') }}"
          - "ntp_servers={{ ntp_servers | d('') }}"
          - "firewalld_enabled={{ firewalld_enabled | d('') }}"
          - "docker_stack_external_domain={{ docker_stack_external_domain | d('') }}"
          - "docker_stack_internal_domain={{ docker_stack_internal_domain | d('') }}"
          - "ca_domain={{ ca_domain | d('unknown') }}"
          - "ca_domains_hosted={{ ca_domains_hosted | d('') }}"

## Debugging purposes: print all environment variables
## ref: https://gryzli.info/2017/12/21/ansible-debug-print-variables/
- name: "Debug: Print environment variables"
#  hosts: compute_node,!node_offline
  hosts: all,!node_offline
  tags:
    - display-envvars
    - debug-envvars
    - debug-env-vars
  tasks:
    - name: Print env var debug information
      when: inventory_hostname in ansible_play_hosts
      debug:
        var: environment
      tags: debug_info

- name: "Display hostvars"
  hosts: all,!node_offline
  gather_facts: true
  tags:
    - debug-hostvars
    - display-hostvars
  tasks:
    - name: Print host variable information
      when: inventory_hostname in ansible_play_hosts
      debug:
        var: hostvars
      tags: debug_info


- name: "Display cert info"
  hosts: control_node,!node_offline,!local
  ignore_unreachable: yes
  ignore_errors: yes
  tags:
    - bootstrap-keyring
    - deploy-cacerts
  tasks:
    - name: Print cert chain information
      debug:
        msg:
          - "ca_domains_dynamic={{ ca_domains_dynamic | to_nice_json }}"
          - "ca_service_routes_list={{ ca_service_routes_list | to_nice_json }}"
          - "ca_intermediate_certs_config={{ ca_intermediate_certs_config | to_nice_json }}"
          - "ca_intermediate_certs_list_dynamic={{ ca_intermediate_certs_list_dynamic | to_nice_json }}"
          - "ca_intermediate_certs_list={{ ca_intermediate_certs_list | to_nice_json }}"
          - "ca_internal_domains_dynamic={{ ca_internal_domains_dynamic | to_nice_json }}"
          - "ca_routes_dynamic={{ ca_routes_dynamic | to_nice_json }}"

- name: "Display bind info"
  hosts: bind_master,!node_offline
  tags:
    - bootstrap-bind
    - deploy-vm
  ignore_unreachable: yes
  ignore_errors: yes
  tasks:

    - name: "Print domain vars"
      when: inventory_hostname in groups['bind_master'] or inventory_hostname in groups['bind_slave']
      debug:
        msg:
          - "bind_zone_hosts_dynamic={{ bind_zone_hosts_dynamic | to_nice_json }}"


##
## Deploy VMs
##
- name: "Deploy VM"
  hosts: vmware_control_node
  tags:
    - deploy-vm
  gather_facts: false
  become: True
#  become_method: sudo
  vars_files:
    - vars/secrets.yml
  roles:
    - role: ansible-role-govc
    - role: deploy-vm

##
## Reporting plays
##
- name: Get linux os configs
  hosts: os_linux,!node_offline,!local
  tags:
    - fetch-linux-os-configs
  gather_facts: false
  roles:
    - role: fetch-linux-os-configs

- name: "Fetch OS images"
  hosts: localhost
  connection: local
  gather_facts: false
  tags:
    - fetch-os-images
  roles:
    - role: fetch-os-images

- name: "Report windows facts"
  hosts: windows,!node_offline
  gather_facts: false
  tags: report-windows-facts
  roles:
    - role: report-windows-facts



## ref: [see firewall notes here](./docs/ansible-firewall-example.md)
- name: "Bootstrap linux firewall"
  hosts: os_linux,!node_offline
  become: yes
  tags:
    - bootstrap-firewall
    - bootstrap-linux-firewall
  roles:
    - name: bootstrap-linux-firewall
      firewalld_action: install

- name: "Bootstrap linux packages"
  hosts: os_linux,!node_offline
  become: yes
  tags:
    - bootstrap-packages
    - bootstrap-linux-package
  roles:
    - name: bootstrap-linux-package

- name: "Bootstrap nfs services"
  hosts: os_linux,!node_offline
  become: yes
  tags:
    - bootstrap-nfs
    - bootstrap-linux-nfs
  roles:
    - name: bootstrap-nfs-service
    - name: bootstrap-linux-firewall
      firewalld_action: install


## ref: [see firewall notes here](./docs/ansible-firewall-example.md)
- name: "Configure linux firewall"
  hosts: os_linux,!node_offline
  become: true
  tags:
    - configure-firewall
    - configure-linux-firewall
  roles:
    - name: bootstrap-linux-firewall
      firewalld_action: configure
#  include_role:
#    name: bootstrap-linux-firewall
#  vars:
#    firewalld_action: configure


## ref: https://www.nathancurry.com/blog/22-ansible-pxeboot-vms/
## ref: https://github.com/nathancurry/homelab.ansible/tree/master
- name: "Configure nameservers"
  hosts: nameserver,!node_offline
  become: true
  tags:
    - bootstrap-nameserver
    - bootstrap-bind
    - bind-node
    - deploy-vm
  vars_files:
    - vars/secrets.yml
  roles:
#    - role: chronyclient
    - role: ansible-role-bind
#    - role: ansible-role-dhcp
    - name: bootstrap-linux-firewall
      firewalld_action: configure
      tags: [ 'firewall-config-nameserver' ]


- name: "Bootstrap kvm hosts"
  hosts: kvm_host,!node_offline
  gather_facts: false
  become: yes
  tags:
    - bootstrap-kvm
  vars_files:
    - vars/secrets.yml
  roles:
    - role: bootstrap-kvm


##
## make sure this is running as bootstrap user
## get pwd for this user using the --ask-pass directive,
## and not the --ask-become-pass which is used for the sudo once logged in
##
## ref: https://stackoverflow.com/questions/41771725/ansible-2-1-2-playbook-pass-ssh-password-and-sudo-password-as-command-line-args
## ref: https://8gwifi.org/docs/ansible-sudo-ssh-password.jsp
##
- name: "Bootstrap linux VM ansible user"
  hosts: os_linux,!node_offline
  vars_files:
    - vars/secrets.yml
  vars:
    ansible_ssh_user: "{{ bootstrap_user }}"
    ansible_user: "{{ bootstrap_user }}"
#    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
  tags:
    - bootstrap-linux
    - bootstrap-ansible-user
    - bootstrap-ansible
    - bootstrap-node-core
    - bootstrap-node
  become: yes
  remote_user: "{{ bootstrap_user }}"
  gather_facts: false
  roles:
    - role: bootstrap-linux-user
      bootstrap_linux_users:
        - "{{ bootstrap_ansible_user }}"

##
## Bootstrap linux plays
##
- name: "Bootstrap linux to new deployed vm instance"
  hosts: vmware_new_vm_linux
  tags: deploy-vm
  become: yes
  vars_files:
    - vars/secrets.yml
  roles:
    - role: bootstrap-linux


- name: "Bootstrap linux"
  hosts: os_linux,!node_offline
  tags:
    - bootstrap-linux
    - bootstrap-linux-user
    - bootstrap-node-core
    - bootstrap-node
  become: yes
#  become_method: sudo
  vars_files:
    - vars/secrets.yml
  roles:
    - role: bootstrap-linux


##
## Bootstrap windows plays
##
- name: "Bootstrap windows to new deployed vm instance"
  hosts: vmware_new_vm_windows
  tags: deploy-vm
  become: yes
  vars_files:
    - vars/secrets.yml
  roles:
    - role: bootstrap-windows

- name: "Bootstrap windows"
  hosts: os_windows,!node_offline
#  hosts: windows,!node_offline
  tags:
    - bootstrap-windows
    - bootstrap-windows-user
    - bootstrap-node
#  become: yes
#  become_method: runas
  vars_files:
    - vars/secrets.yml
  roles:
    - role: bootstrap-windows


##
## Individual Services to be bootstrapped
##
- name: "Bootstrap logrotate"
  hosts: os_linux,!node_offline
  tags:
    - bootstrap-logrotate
    - bootstrap-linux-logrotate
  become: yes
#  become_method: sudo
  roles:
    - role: ansible-logrotate



## ref: https://www.redhat.com/en/blog/integrating-ansible-jenkins-cicd-process
- name: "Bootstrap CI/CD node"
  hosts: cicd_node,!node_offline,!local
  tags:
    - bootstrap
    - bootstrap-cicd
    - bootstrap-cicd-node
    - cicd-node
  become: True
#  become_method: sudo
  vars_files:
    - vars/secrets.yml
  roles:
    - name: bootstrap-linux-firewall
      firewalld_action: configure
      tags: [ firewall-config-cicd ]
    - role: geerlingguy.git
    - role: gantsign.maven
    - role: geerlingguy.ansible
    - role: bootstrap-packer
    - role: jenkins-swarm-agent
    - role: ansible-role-inspec
    - role: ansible-role-govc
    - role: ansible-role-nodejs
    - role: ansible-role-ovftool

- name: "Setup Jenkins Agent"
  hosts: jenkins_agent,!node_offline
  tags:
    - bootstrap-jenkins-agent
    - deploy-jenkins-agent
  become: True
#  become_method: sudo
  vars_files:
    - vars/secrets.yml
  roles:
    - role: jenkins-swarm-agent
    - role: ansible-role-inspec
      tags: [ bootstrap-inspec ]

- name: "Setup iscsi clients"
  hosts: iscsi_client,!node_offline
  tags:
    - bootstrap
    - bootstrap-iscsi
    - bootstrap-iscsi-client
    - iscsi-client
  become: yes
  vars_files:
    - vars/secrets.yml
  roles:
    - role: iscsi-client

- name: "Setup ntp servers"
  hosts: ntp_server,!node_offline
  tags:
    - bootstrap-ntp
    - bootstrap-ntp-server
  become: yes
  roles:
    - role: bootstrap-ntp

- name: "Setup ntp clients"
  hosts: ntp_client,!ntp_server,!node_offline
  tags:
    - bootstrap-ntp
    - bootstrap-ntp-client
  become: yes
  roles:
    - role: bootstrap-ntp


## ref: https://blog.ktz.me/combining-zfs-with-other-filesystems-using-mergerfs/
## ref: https://selfhostedhome.com/combining-different-sized-drives-with-mergerfs-and-snapraid/
- name: "Setup mergerfs nodes"
  hosts: mergerfs,!node_offline
  tags:
    - mergerfs
    - bootstrap-mergerfs
  vars_files:
    - vars/secrets.yml
  become: True
#  become_method: sudo
  roles:
    - role: ansible-role-snapraid
    - role: ansible-role-hddtemp
#    - role: bootstrap-telegraf
      ignore_errors: true
#    - role: sanoid
#    - role: syncoid
    - role: mergerfs

- name: "Install veeam-agent"
  hosts: veeam_agent,!node_offline
  become: true
  vars_files:
    - vars/secrets.yml
  tags:
    - bootstrap-veeam
    - bootstrap-veeam-agent
    - setup-veeam-agent
    - install-veeam-agent
  roles:
    - bootstrap-veeam-agent
    - name: bootstrap-linux-firewall
      firewalld_action: configure
      tags: [ 'firewall-config-veeamagent' ]

- name: "Configure veeam-agent jobs"
  hosts: veeam_agent,!node_offline
  become: true
  vars_files:
    - vars/secrets.yml
  tags:
    - config-veeam-agent
#    - bootstrap-veeam
#    - bootstrap-veeam-agent
  roles:
    - bootstrap-veeam-agent-config


- name: "Bootstrap ldap client"
  hosts: ldap_client,!node_offline
  vars_files:
    - vars/secrets.yml
  tags:
    - bootstrap-ldap-client
  become: True
  become_method: sudo
  roles:
    - role: ldap-client

- name: "Bootstrap ansible node"
  hosts: ansible_controller,!node_offline
  tags:
    - bootstrap
    - bootstrap-admin
    - bootstrap-ansible
  become: True
#  become_method: sudo
#  vars_files:
#    - vars/secrets.yml
  roles:
    - role: geerlingguy.ansible
    - role: geerlingguy.git
    - role: ansible-init-locale
    - role: bootstrap-ansible


## setup step-ca pki, create CA certs and install CA certs
- name: "Configure Step-ca cli for step clients"
  hosts: step_ca_cli,!node_offline
  tags:
    - bootstrap-stepca
    - bootstrap-stepca-cli
#    - bootstrap-caroot
#    - bootstrap-cacert
  roles:
    - role: ansible-role-stepca


## setup pki, create CA certs and install CA certs
##
## ref: https://www.tikalk.com/posts/2016/10/30/Running-Your-Own-Ansible-Driven-CA/
## ref: https://github.com/shelleg/ansible-role-ca/
- name: "Setup ca_root and cacerts"
  hosts: ca_keyring,!node_offline
  gather_facts: false
#  collections:
#    - lvrfrc87.git_acp
#  vars_files:
#    - vars/secrets.yml
  tags:
    - bootstrap-keyring
#    - bootstrap-cacert
    - caroot
    - caroot-create
    - ca-keyring
    - casigners-create
#    - cacerts
#    - cacerts-create
#    - cacerts-update
  become: yes
#  become_method: sudo
  roles:
    - role: bootstrap-cfssl
#      vars:
#        ansible_python_interpreter: "{{ os_python3_interpreter }}"
    - role: bootstrap-keyring
      tags: [cacerts-create]
#      vars:
#        ansible_python_interpreter: "{{ os_python2_interpreter }}"

#- name: "Create CA certs for cert_node"
##  hosts: compute_node,!vmware_esx_host
##  hosts: compute_node
##  hosts: os_linux
#  hosts: cert_node
##  hosts: os_linux,cert_node
#  gather_facts: false
#  vars_files:
#    - vars/secrets.yml
#  tags:
#    - bootstrap-node
#    - bootstrap-cacert
#    - cacerts
#    - cacerts-update
#  become: yes
##  become_method: sudo
#  roles:
#    - role: cacert-node

- name: "Deploy CA certs to cert_node"
  hosts: os_linux,!node_offline
  gather_facts: false
  vars_files:
    - vars/secrets.yml
  tags:
    - bootstrap-node
    - bootstrap-cacert
    - cacerts
    - cacerts-distribute
    - cacerts-deploy
    - cacerts-update
    - deploy-cacerts
  become: yes
#  become_method: sudo
  roles:
    - role: deploy-cacerts

## possibly need to install docker_service dependencies first
## ref: https://github.com/avinetworks/ansible-role-docker
## ref: https://github.com/suzuki-shunsuke/ansible-docker_service-dep/blob/master/tasks/main.yml
## ref: https://github.com/ansible/ansible/issues/29510
## ref: https://github.com/nickjj/ansible-docker
- name: "Bootstrap docker nodes"
  hosts: docker,!node_offline
  vars_files:
    - vars/secrets.yml
  tags:
    - bootstrap
    - docker
    - bootstrap-linux
    - bootstrap-linux-docker
  become: True
#  become_method: sudo
  roles:
    - role: bootstrap-linux-docker
    - role: docker-deploy-registry-certs
      tags:
        - deploy-docker-registry-certs
        - deploy-registry-certs
        - cacerts-update
    - role: bootstrap-linux-docker-config
      tags:
        - bootstrap-linux-docker-config
        - bootstrap-docker-config
        - docker-config

###########################
# docker_registry install #
###########################

- name: "Create, tag and push docker images (ldap, jenkins, etc) to registry"
  hosts: docker_image_builder,!node_offline
  tags:
    - bootstrap
    - bootstrap-registry
    - bootstrap-docker-images
    - bootstrap-docker-admin-node
    - docker-build-images
    - build-docker-images
  become: True
#  become_method: sudo
  vars_files:
    - vars/secrets.yml
  roles:
    - role: geerlingguy.git
    - role: docker-image-builder


- name: "Setup docker control plane node"
  hosts: docker_control_node,!node_offline
  tags:
    - bootstrap-docker-stack
    - bootstrap-docker-control-node
    - docker-control-node
  become: True
#  become_method: sudo
  vars_files:
    - vars/secrets.yml
  roles:
    - role: docker-stack

- name: "Setup docker admin node : mail, nfs, docker (traefik, portainer, watchdog, ldap, etc)"
  hosts: docker_admin_node,!node_offline
  tags:
    - bootstrap
    - bootstrap-docker-stack
    - bootstrap-docker-admin-node
    - docker-stack
    - docker-admin-node
  become: True
#  become_method: sudo
  vars_files:
    - vars/secrets.yml
  roles:
    - role: docker-stack

- name: "Setup docker media node"
  hosts: docker_media_node,!node_offline
  tags:
    - bootstrap-docker-stack
    - bootstrap-docker-media-node
    - docker-media-node
  become: True
#  become_method: sudo
  vars_files:
    - vars/secrets.yml
  roles:
    - role: docker-stack

- name: "Setup docker ml node"
  hosts: docker_ml_node,!node_offline
  tags:
    - bootstrap-docker-stack
    - bootstrap-docker-ml-node
    - docker-ml-node
  become: True
#  become_method: sudo
  vars_files:
    - vars/secrets.yml
  roles:
    - role: docker-stack

## ref: https://github.com/lae/ansible-role-proxmox
- name: "Deploy ProxMox Cluster"
  hosts: proxmox,!node_offline
  tags:
    - bootstrap-proxmox
  become: True
  vars_files:
    - vars/secrets.yml
  roles:
    - role: ansible-role-proxmox
      pve_group: proxmox
#      pve_reboot_on_kernel_update: true


- name: "Deploy VSphere Datacenter"
  hosts: vsphere_control_node
  tags:
    - deploy-vsphere-dc
    - vsphere-deploy-dc
#  gather_facts: false
  become: True
#  become_method: sudo
  vars_files:
    - vars/secrets.yml
  roles:
    - role: vsphere-deploy-dc

- name: "Bootstrap VMware ESXi servers"
  hosts: vmware_physical_esx_host,!node_offline
  tags:
    - bootstrap-vmware-esxi
    - deploy-vsphere-dc
    - vsphere-deploy-dc
  gather_facts: false
  vars_files:
    - vars/secrets.yml
  roles:
    - role: bootstrap-vmware-esxi
    - role: vmware-esxi-hostconf

- name: "VMware Upgrade ESXi servers"
  hosts: vmware_physical_esx_host,!node_offline
  tags:
    - vmware-upgrade-esxi
  gather_facts: false
  vars_files:
    - vars/secrets.yml
  roles:
    - role: vmware-upgrade-esxi

- name: "VMware Remount VM Datastores"
  hosts: vmware_control_node
  become: True
  tags:
    - vmware-remount-datastores
  vars_files:
    - vars/secrets.yml
  roles:
    - role: vmware-mount-datastores
      vars:
        vmware_unmount_datastores_first: yes

- name: "VMware mount VM Datastores"
  hosts: vmware_control_node
  become: True
  tags:
    - vmware-mount-datastores
  vars_files:
    - vars/secrets.yml
  roles:
    - role: vmware-mount-datastores


- name: "Bootstrap openstack"
  hosts: openstack_kolla_node,!node_offline
  tags:
    - bootstrap
    - bootstrap-openstack
  become: True
#  become_method: sudo
  vars_files:
    - vars/secrets.yml
  roles:
    - name: Configure openstack deploy node
      role: bootstrap-openstack

- name: "Bootstrap k8s cluster"
  hosts: k8s_cluster,!node_offline
  tags:
    - bootstrap
    - bootstrap-k8s
  become: yes
  roles:
    - name: bootstrap-linux-firewall
      firewalld_action: configure
      tags: [ firewall-config-k8s ]

## must first run the kolla-ansible (bootstrap-servers|prechecks|deploy)
- name: "Bootstrap openstack cloud"
  hosts: openstack_kolla_node,!node_offline
  tags:
    - bootstrap-openstack-cloud
    - openstack-cloud
  become: True
#  become_method: sudo
  vars_files:
    - vars/secrets.yml
  vars:
    ansible_python_interpreter: "{{ ansible_openstack_python_interpreter }}"
  roles:

    - name: Configure openstack client
      tags:
        - bootstrap-openstack-osclient
        - openstack-osclient
      role: openstack-osclient
      vars:
        openstack_cloud_name: "{{ openstack_admin_cloud_name | default(omit) }}"

    - name: Configure openstack environment
      role: openstack-config-cloud
      tags:
        - openstack-cloud-config


## bootstrap-fog
## ref: https://github.com/ceph/ceph-cm-ansible/tree/master/roles/bootstrap-fog
- name: Install FOG server
  hosts: fog_server,!node_offline
  become: true
  tags:
    - bootstrap-fog
  vars_files:
    - vars/secrets.yml
  roles:
    - bootstrap-fog
#  vars_prompt:
#    - name: "fog_force"
#      prompt: "\nWARNING: It is not safe to run this role on a running FOG server that\nhas or may have scheduled tasks.\nDo you want to forcefully install/update/restart FOG? (yes|no)"
#      default: "no"
#      private: no

- name: "Setup nginx"
  hosts: nginx_service,!node_offline
  tags:
    - nginx-service
  become: True
#  become_method: sudo
  roles:
    - role: nginx-service


- name: Bootstrap iDRAC Automation
  hosts: dell_idrac_hosts,!node_offline
#  connection: local
  tags:
    - bootstrap-dell-idrac-hosts
    - bootstrap-idrac-hosts
    - bootstrap-idrac
    - dell-idrac-hosts
  strategy: free
  user: root
  become: yes
  gather_facts: false
  vars_files:
    - vars/secrets.yml
  roles:
    - role: dell-racadm-host

# ref: https://dell.github.io/dellemc-openmanage-ansible-modules/GUID-EA8B2754-D62E-4D2C-8951-636D49B0CAA5.html
- name: Get iDRAC LC Ready Status
  hosts: dell_idrac_hosts,!node_offline
  tags:
    - dell-idrac-get-host-info
  connection: local
  gather_facts: False
  collections:
    - dellemc.openmanage
  vars_files:
    - vars/secrets.yml
  tasks:
    - name: Get hardware inventory
#      dellemc_get_system_inventory:
      idrac_system_info:
        idrac_ip:  "{{ idrac_ip }}"
        idrac_port: '443'
        idrac_user:  "{{ idrac_user }}"
        idrac_password:  "{{ idrac_password }}"

    ## ref: https://github.com/dell/dellemc-openmanage-ansible-modules/blob/collections/playbooks/idrac/idrac_lifecycle_controller_status_info.yml
    - name: Check LC Ready Status
#      dellemc_get_lcstatus:
      idrac_lifecycle_controller_status_info:
        idrac_ip:   "{{ idrac_ip }}"
        idrac_port: '443'
        idrac_user: "{{ idrac_user }}"
        idrac_password:  "{{ idrac_password }}"

## ref: https://github.com/jonas-werner/ansible-playbooks/blob/master/set_ntp_values.yml
- name: Change iDRAC NTP Attributes
  hosts: dell_idrac_hosts,!node_offline
  tags:
    - dell-idrac-config-ntp
  connection: local
  gather_facts: False
  vars:
#    ntpserver1: "1.jp.pool.ntp.org"
#    ntpserver1: "192.168.0.1"
    ntpserver1: "{{ gateway_ip4_subnet_1_2 }}.0.1"

  vars_files:
    - vars/secrets.yml
  tasks:

    - name: Enable NTP and set NTP server and Time zone attributes in iDRAC
      idrac_redfish_config:
        category: Manager
        command: SetManagerAttributes
        resource_id: iDRAC.Embedded.1
        manager_attributes:
          NTPConfigGroup.1.NTPEnable: "Enabled"
          NTPConfigGroup.1.NTP1: "{{ ntpserver1 }}"
        baseuri: "{{ idrac_ip }}"
        username: "{{ idrac_user }}"
        password: "{{ idrac_password }}"

##
## Tower config
##

## ref: https://www.ansible.com/blog/introducing-the-awx-collection
- name: Playbook to create tower resource configs
  hosts: tower_control_node
  tags:
    - bootstrap-tower
    - bootstrap-tower-resources
  gather_facts: false
  collections:
    - awx.awx
  vars_files:
    - vars/secrets.yml
  environment:
    CONTROLLER_VERIFY_SSL: no
  roles:
    - role: ansible-tower-resources


## ref: https://www.ansible.com/blog/introducing-the-awx-collection
- name: Playbook for Using a Variety of Tower Modules
  hosts: tower_control_node
  tags:
    - remove-tower-resources
  gather_facts: false
  collections:
    - awx.awx
  vars_files:
    - vars/secrets.yml
  environment:
    CONTROLLER_VERIFY_SSL: no
  roles:
    - role: ansible-tower-resources
      vars:
        tower_resource_state: absent

- name: Playbook for Using a Variety of Tower Modules
  hosts: tower_control_node
  tags:
    - export-tower-resources
  gather_facts: false
  collections:
    - awx.awx
  tasks:
    - name: Export all resources
      tower_export:
        all: yes
#        teams: "TEST - Test Team 1"


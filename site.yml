---
#####################
## IMPORTANT NOTES:
##
## The `untagged` tag is used to run the `common` plays.
## It is implicitly defined by ansible for any plays that do not have tags assigned in the playbook.
##
## The `untagged` plays are mostly meant for target host plays where the ansible machine credential
## has already been set up.
##
## exception use cases include plays that are:
## - run on the ansible controller/localhost and do not include non-controller/localhost target hosts
## - API related: (1) cloud API, (2) vcenter/vmware API, etc,
## - initial ansible user and/or ssh-key setup plays for ansible to connect to newly created hosts
##
## E.g., specific play tags in site.yml that meet these criteria include
## (1) bootstrap-vcenter
## (2) bootstrap-vm
## (3) bootstrap-ansible-user
## and others
##
## All such plays do not require the common plays to run.
##
## The job template/pipeline responsible for launching each play tag should specify
## whether to include the `untagged` tag based on the use-case.
##
## Using this `untagged` tag convention allows for all the aforementioned use cases to be included
## in a single site.yml
##

- name: Pre-check | Perform connectivity (ping) tests to determine nodes to add to group 'node_offline'
  hosts: all,!ansible_localhost,!node_offline
  tags: always
  ignore_unreachable: true
  gather_facts: false
  vars:
    ansible_python_interpreter: "{{ os_python_interpreter }}"
    ansible_user: "{{ bootstrap_user }}"
    ansible_password: "{{ bootstrap_user_password }}"
  roles:
    - role: ansible_ping_test
      when:
        - not ping_exclude|d(False)|bool
        - inventory_hostname in ansible_play_hosts

## ref: https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html
## ref: https://grokbase.com/t/gg/ansible-project/149c6gcb6f/is-there-a-way-to-dynamically-target-subsets-of-an-inventory-group-based-on-facts
## ref: https://github.com/ansible/ansible/issues/20360
- name: Apply common groups and vars
  hosts: all,!ansible_localhost,!node_offline
  tags: always
  #  gather_facts: false
  vars:
    ansible_python_interpreter: "{{ os_python_interpreter }}"
    ansible_user: "{{ bootstrap_user }}"
    ansible_password: "{{ bootstrap_user_password }}"
  roles:
    - role: apply_common_groups
      when:
        - not apply_common_groups_exclude|d(False)|bool
        - inventory_hostname in ansible_play_hosts

- name: Display apply_common_groups derived group vars
  hosts: os_linux,os_windows,!node_offline
  tags:
    - always
    - display-common-vars
    - display-network-vars
  vars:
    ansible_python_interpreter: "{{ os_python_interpreter }}"
    ansible_user: "{{ bootstrap_user }}"
    ansible_password: "{{ bootstrap_user_password }}"
  tasks:
    - name: Validate that the apply_common_group group derived variables are set correctly in the apply_common_groups_(machine|os|network)_* groups
      ansible.builtin.debug:
        msg:
          - dc_machine_type={{ dc_machine_type|d('') }}
          - dc_os_family={{ dc_os_family|d('') }}
          - dc_os_family_shortname={{ dc_os_family_shortname|d('') }}
          - dc_os_distribution={{ dc_os_distribution|d('') }}
          - dc_os_dist_version={{ dc_os_dist_version|d('') }}
#          - "dc_network_site={{ dc_network_site|d('') }}"
#          - "dc_network_location={{ dc_network_location|d('') }}"
#          - "dc_network_segment={{ dc_network_segment|d('') }}"

- name: "Display important collection versions"
  hosts: os_linux,!node_offline
  tags:
    - always
    - display-collection-versions
  vars:
    ansible_python_interpreter: "{{ os_python_interpreter }}"
    ansible_user: "{{ bootstrap_user }}"
    ansible_password: "{{ bootstrap_user_password }}"
  tasks:
    - name: "Display important collection versions" # noqa run-once[task]
      run_once: true
      ansible.builtin.debug:
        msg:
          - "ansible.controller version={{ lookup('community.general.collection_version', 'ansible.controller') }}"
          - "ansible.posix version={{ lookup('community.general.collection_version', 'ansible.posix') }}"
          - "ansible.tower version={{ lookup('community.general.collection_version', 'ansible.tower') }}"
          - "ansible.utils version={{ lookup('community.general.collection_version', 'ansible.utils') }}"
          - "ansible.windows version={{ lookup('community.general.collection_version', 'ansible.windows') }}"
          - "community.crypto version={{ lookup('community.general.collection_version', 'community.crypto') }}"
          - "community.docker version={{ lookup('community.general.collection_version', 'community.docker') }}"
          - "community.general version={{ lookup('community.general.collection_version', 'community.general') }}"
          - "community.postgresql version={{ lookup('community.general.collection_version', 'community.postgresql') }}"
          - "community.vmware version={{ lookup('community.general.collection_version', 'community.vmware') }}"
          - "community.windows version={{ lookup('community.general.collection_version', 'community.windows') }}"
          - "confluent.platform version={{ lookup('community.general.collection_version', 'confluent.platform') }}"
          - "cyberark.conjur version={{ lookup('community.general.collection_version', 'cyberark.conjur') }}"
          - "cyberark.pas version={{ lookup('community.general.collection_version', 'cyberark.pas') }}"
          - "microsoft.ad version={{ lookup('community.general.collection_version', 'microsoft.ad') }}"

- name: Display controller vars
  hosts: ansible_localhost
  tags:
    - display-controller-vars
  tasks:
    - name: Display controller vars - excluding sensitive and/or global scope keys (e.g., '.*token.*', '.*password.*', '.*private_key.*', etc)
      ansible.builtin.debug:
        var: vars | dict2items 
          | rejectattr('key', 'match', '.*vault.*') 
          | rejectattr('key', 'match', '.*token.*') 
          | rejectattr('key', 'match', '.*password.*') 
          | rejectattr('key', 'match', '.*private_key.*') 
          | list | items2dict

- name: Display controller environment variables
  hosts: ansible_localhost
  tags:
    - display-ansible-env
    - display-envvars
    - debug-envvars
    - debug-env-vars
  tasks:
    - name: Display ansible_env - excluding sensitive and/or global scope keys (e.g., '.*TOKEN.*', '.*PASSWORD.*', '.*PRIVATE_KEY.*', etc)
      ansible.builtin.debug:
        var: ansible_env | dict2items
          | rejectattr('key', 'match', '.*TOKEN.*') 
          | rejectattr('key', 'match', '.*PASSWORD.*')
          | rejectattr('key', 'match', '.*PRIVATE_KEY.*')
          | list | items2dict

#    ## Debugging purposes: print all environment variables
#    ## ref: https://gryzli.info/2017/12/21/ansible-debug-print-variables/
#    - name: "Display controller environment variables"
#      tasks:
#        - name: Print env var debug information
#          ansible.builtin.debug:
#            var: environment

- name: Display hostvars
  hosts: all,!node_offline
  become: false
  gather_facts: true
  tags:
    - display-hostvars
    - debug-hostvars
    - display-hostvars
  tasks:
    ## ref: https://stackoverflow.com/questions/53264221/in-ansible-how-to-filter-a-dictionary-based-on-regex-pattern-on-the-keys
    - name: Display host variables - excluding sensitive and/or global scope keys (e.g., `.*vault.*`, '.*private_key.*', 'groups', '.*password.*', etc)
      ansible.builtin.debug:
        var: hostvars[inventory_hostname] | dict2items 
          | rejectattr('key', 'match', '.*vault.*') 
          | rejectattr('key', 'match', '.*password.*') 
          | rejectattr('key', 'match', '.*private_key.*') 
          | rejectattr('key', 'match', 'groups') 
          | rejectattr('key', 'match', 'dcc_network_global_config') 
          | list | items2dict

- name: Display cert info
  hosts: all,!ansible_localhost,!node_offline
  ignore_unreachable: true
  ignore_errors: true
  #  gather_facts: false
  tags:
    - bootstrap-certs
    - bootstrap-cacerts
    - bootstrap-signing-certs
    - bootstrap-keyring
    - deploy-cacerts
  tasks:
    - name: Print cert chain information
      ansible.builtin.debug:
        var: "{{ item }}"
      loop:
        - ca_domains_dynamic
        - ca_service_routes_list
        - ca_intermediate_certs_config
        - ca_intermediate_certs_list_dynamic
        - ca_intermediate_certs_list
        - ca_internal_domains_dynamic
        - ca_routes_dynamic

- name: Display bind controller info
  hosts: bind_controller,!node_offline
  tags:
    - bootstrap-bind
    - deploy-vm
  ignore_unreachable: true
  ignore_errors: true
  tasks:
    - name: Print domain vars
      ansible.builtin.debug:
        var: "{{ item }}"
      loop:
        - bind_zone_hosts_dynamic

##
## Deploy VMs
##
- name: Deploy Virtual Machines
#  hosts: ansible_localhost
  hosts: vmware_control_node
  tags:
    - bootstrap-vm
    - deploy-vm
  gather_facts: false
  become: true
  roles:
    - role: bootstrap_govc
    - role: deploy_vm

##
## Reporting plays
##
- name: Get linux os configs
  hosts: os_linux,!node_offline,!ansible_localhost
  tags:
    - fetch-linux-os-configs
  gather_facts: false
  roles:
    - role: fetch_linux_os_configs

- name: Report inventory facts
  #  hosts: os_windows,!node_offline
  hosts: os_windows,os_linux,!node_offline
  gather_facts: false
  tags:
    - report-inventory-facts
  roles:
    - role: report_inventory_facts

##
## Bootstrap linux component plays
##
- name: Bootstrap linux ansible user
  hosts: os_linux,!node_offline
  gather_facts: false
  become: true
  tags:
    - bootstrap-ansible-user
    - bootstrap-ansible
  vars:
    ansible_python_interpreter: "{{ os_python_interpreter }}"
#    ansible_user: "{{ bootstrap_user }}"
#    ansible_password: "{{ bootstrap_user_password }}"
  tasks:
    - name: Bootstrap ansible user
      ansible.builtin.include_role:
        name: bootstrap_ansible_user

#- name: Bootstrap linux ansible user
#  hosts: os_linux,!node_offline
#  gather_facts: false
#  become: true
#  remote_user: "{{ bootstrap_user }}"
#  tags:
#    - bootstrap-ansible-user
#    - bootstrap-ansible
#  vars:
##    ansible_python_interpreter: "{{ os_python_interpreter }}"
#    #    ansible_ssh_user: "{{ bootstrap_user }}"
#    ansible_user: "{{ bootstrap_user }}"
#    ansible_password: "{{ bootstrap_user_password }}"
#    ansible_ssh_common_args: |
#      -o StrictHostKeyChecking=no \
#      -o UserKnownHostsFile=/dev/null \
#      -o PreferredAuthentications=password \
#      -o PubkeyAuthentication=no
#  #    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
#  roles:
#    - role: bootstrap_linux_user
#      bootstrap_linux_user__list:
#        - "{{ bootstrap_ansible_user }}"

## ref: [see firewall notes here](./docs/ansible-firewall-example.md)
- name: Bootstrap linux firewall
  hosts: os_linux,!node_offline
  become: true
  tags:
    - bootstrap-firewall
    - bootstrap-linux-firewall
    - bootstrap-linux-firewalld
  roles:
    - role: bootstrap_linux_firewalld
      firewalld_action: install

## ref: [see firewall notes here](./docs/ansible-firewall-example.md)
- name: Configure linux firewall
  hosts: os_linux,!node_offline
  become: true
  tags:
    - configure-firewall
    - configure-linux-firewall
  roles:
    - role: bootstrap_linux_firewalld
      firewalld_action: configure

- name: Bootstrap linux packages
  hosts: os_linux,!node_offline
  become: true
  tags:
    - bootstrap-packages
    - bootstrap-linux-package
  roles:
    - role: bootstrap_linux_package

- name: Bootstrap java
  hosts: os_linux,!node_offline
  become: true
  tags:
    - bootstrap-java
    - bootstrap-linux-java
  roles:
    - role: bootstrap_java

- name: Bootstrap linux upgrade
  hosts: os_linux,!node_offline
  become: true
  tags:
    - bootstrap-linux-upgrade
    - bootstrap-os-upgrade
    - bootstrap-os-update
  roles:
    - role: bootstrap_linux_upgrade

##
## bootstrap logrotate
##
- name: Bootstrap logrotate
  hosts: os_linux,!node_offline
  tags:
    - bootstrap-logrotate
    - bootstrap-linux-logrotate
  become: true
  roles:
    - role: bootstrap_logrotate

##
## bootstrap mounts
##
- name: Bootstrap mounts
  hosts: os_linux,!node_offline
  tags:
    - bootstrap-mounts
    - bootstrap-linux-mounts
  become: true
  roles:
    - role: bootstrap_linux_mount

- name: Bootstrap linux ntp
  hosts: os_linux,!node_offline
  become: true
  tags:
    - bootstrap-ntp
    - bootstrap-linux-ntp
  roles:
    - role: bootstrap_ntp

- name: Bootstrap nfs services
  hosts: os_linux,!node_offline
  become: true
  tags:
    - bootstrap-nfs
    - bootstrap-linux-nfs
  roles:
    - role: bootstrap_nfs_service
    - role: bootstrap_linux_firewalld
      firewalld_action: configure

- name: Bootstrap linux crons
  hosts: os_linux,!node_offline
  become: true
  tags:
    - bootstrap-cron
    - bootstrap-linux-cron
  roles:
    - role: bootstrap_linux_cron

- name: Bootstrap webmin
  hosts: os_linux,!node_offline
  become: true
  tags:
    - bootstrap-webmin
    - bootstrap-linux-webmin
  roles:
    - role: bootstrap_webmin

## ref: https://www.nathancurry.com/blog/22-ansible-pxeboot-vms/
## ref: https://github.com/lj020326/homelab.ansible
- name: Configure nameservers
  hosts: nameserver,!node_offline
  become: true
  tags:
    - bootstrap-nameserver
    - bootstrap-bind
    - bind-node
    - deploy-vm
  roles:
    #    - role: chronyclient
    - role: bootstrap_bind
    #    - role: ansible-role-dhcp
    - role: bootstrap_linux_firewalld
      firewalld_action: configure
      tags: [firewall-config-nameserver]

- name: Bootstrap kvm hosts
  hosts: kvm_host,!node_offline
  gather_facts: false
  become: true
  tags:
    - bootstrap-kvm
  roles:
    - role: bootstrap_kvm

##
## make sure this is running as bootstrap user
## get pwd for this user using the --ask-pass directive,
## and not the --ask-become-pass which is used for the sudo once logged in
##
## ref: https://stackoverflow.com/questions/41771725/ansible-2-1-2-playbook-pass-ssh-password-and-sudo-password-as-command-line-args
## ref: https://8gwifi.org/docs/ansible-sudo-ssh-password.jsp
##
- name: Display bootstrap user info
  hosts: all,!node_offline
  become: false
  gather_facts: false
  tags:
    - bootstrap-ansible-user
    - bootstrap-ansible
#  vars:
#    ansible_python_interpreter: "{{ os_python_interpreter }}"
  tasks:
    - name: Display bootstrap_user
      ansible.builtin.debug:
        var: bootstrap_user

    - name: Display ansible_user
      ansible.builtin.debug:
        var: ansible_user

    - name: Display bootstrap_user_password
      ansible.builtin.debug:
        var: bootstrap_user_password
        verbosity: 1

    - name: Display ansible_user
      ansible.builtin.debug:
        var: ansible_user

- name: Bootstrap linux users
  hosts: os_linux,!node_offline
  gather_facts: true
  become: true
  remote_user: "{{ bootstrap_user }}"
  vars:
#    ansible_ssh_user: "{{ bootstrap_user }}"
    ansible_user: "{{ bootstrap_user }}"
    ansible_password: "{{ bootstrap_user_password }}"
    ansible_ssh_common_args: -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
  tags:
#    - bootstrap-linux
    - bootstrap-linux-user
    - bootstrap-user
  roles:
    - role: bootstrap_linux_user

##
## Bootstrap linux plays
##
- name: Bootstrap ansible venv
  hosts: os_linux,!node_offline
  tags:
    - bootstrap-ansible-venv
    - bootstrap-pip
    - bootstrap-linux-docker
    - bootstrap-linux
    - bootstrap-docker
    - vm-template
    - vm-template-linux
  become: true
  vars:
    ansible_python_interpreter: "{{ os_python_interpreter }}"
    bootstrap_pip__env_force_rebuild: false
  roles:
    - role: bootstrap_pip

- name: Bootstrap linux
  hosts: os_linux,!node_offline
  gather_facts: false
  tags:
    - bootstrap-linux
    - bootstrap-node
  become: true
  roles:
    - role: bootstrap_linux

- name: Bootstrap linux core
  hosts: os_linux,!node_offline
  tags:
    - bootstrap-linux-core
    - bootstrap-node-core
  become: true
  roles:
    - role: bootstrap_linux_core

- name: Bootstrap linux to new deployed vm instance
  hosts: vmware_new_vm_linux
  #  gather_facts: false
  tags: deploy-vm
  become: true
  roles:
    - role: apply_common_groups
    - role: bootstrap_linux

##
## Bootstrap windows plays
##
- name: Bootstrap windows to new deployed vm instance
  hosts: vmware_new_vm_windows
  tags: deploy-vm
  become: true
  roles:
    - role: bootstrap_windows

- name: Bootstrap windows
  hosts: os_windows,!node_offline
  #  hosts: windows,!node_offline
  tags:
    - bootstrap-windows
    - bootstrap-windows-user
    - bootstrap-node
  #  become: true
  #  become_method: runas
  roles:
    - role: bootstrap_windows

## ref: https://www.redhat.com/en/blog/integrating-ansible-jenkins-cicd-process
- name: Bootstrap CI/CD node
  hosts: cicd_node,!node_offline,!ansible_localhost
  tags:
    - bootstrap
    - bootstrap-cicd
    - bootstrap-cicd-node
    - cicd-node
  become: true
  roles:
    - role: bootstrap_linux_firewalld
      firewalld_action: configure
    - role: bootstrap_linux_package
    - role: bootstrap_linux_mount
    - role: bootstrap_maven
    - role: bootstrap_git
    - role: bootstrap_ansible
    - role: bootstrap_packer
    - role: bootstrap_nodejs
    #    - role: bootstrap_jenkins_swarm_agent
    - role: bootstrap_jenkins_agent
    - role: bootstrap_inspec
    - role: bootstrap_govc
    - role: bootstrap_ovftool

- name: Bootstrap Jenkins Agents
  hosts: jenkins_agent,!node_offline
  tags:
    - bootstrap-jenkins-agent
    - deploy-jenkins-agent
  become: true
  roles:
    - role: bootstrap_linux_package
    - role: bootstrap_jenkins_agent
    - role: bootstrap_git
    - role: bootstrap_ansible
    - role: bootstrap_govc
    - role: bootstrap_inspec
    - role: bootstrap_packer

- name: Bootstrap iscsi clients
  hosts: iscsi_client,!node_offline
  tags:
    - bootstrap
    - bootstrap-iscsi
    - bootstrap-iscsi-client
    - iscsi-client
  become: true
  roles:
    - role: bootstrap_iscsi_client

- name: Bootstrap ntp servers
  hosts: ntp_server,!node_offline
  tags:
    - bootstrap-ntp
    - bootstrap-ntp-server
  become: true
  roles:
    - role: bootstrap_ntp

- name: Bootstrap ntp clients
  hosts: ntp_network,!ntp_server,!node_offline
  tags:
    - bootstrap-ntp
    - bootstrap-ntp-client
  become: true
  roles:
    - role: bootstrap_ntp

## ref: https://blog.ktz.me/combining-zfs-with-other-filesystems-using-mergerfs/
## ref: https://selfhostedhome.com/combining-different-sized-drives-with-mergerfs-and-snapraid/
- name: Setup mergerfs nodes
  hosts: mergerfs,!node_offline
  tags:
    - mergerfs
    - bootstrap-mergerfs
  become: true
  roles:
    - role: bootstrap_snapraid
    - role: bootstrap_hddtemp
      #    - role: bootstrap_telegraf
      ignore_errors: true
    #    - role: sanoid
    #    - role: syncoid
    - role: bootstrap_mergerfs

- name: Install veeam-agent
  hosts: veeam_agent,!node_offline
  become: true
  tags:
    - bootstrap-veeam
    - bootstrap-veeam-agent
    - setup-veeam-agent
    - install-veeam-agent
  roles:
    - role: bootstrap_veeam_agent
    - role: bootstrap_linux_firewalld
      firewalld_action: configure
      tags: [firewall-config-veeamagent]

- name: Configure veeam-agent jobs
  hosts: veeam_agent,!node_offline
  become: true
  tags:
    - config-veeam-agent
  #    - bootstrap-veeam
  #    - bootstrap-veeam-agent
  roles:
    - role: bootstrap_veeam_agent_config

- name: Bootstrap postfix server
  hosts: postfix_server,!node_offline
  tags:
    - bootstrap-postfix
    - bootstrap-postfix-server
  become: true
  roles:
    - role: bootstrap_postfix

- name: Bootstrap postfix client
  hosts: postfix_network,!postfix_server,!node_offline
  tags:
    - bootstrap-postfix
    - bootstrap-postfix-client
  become: true
  roles:
    - role: bootstrap_postfix

- name: Bootstrap sshd
  hosts: os_linux,!node_offline
  gather_facts: false
  tags:
    - bootstrap-linux-sshd
    - bootstrap-sshd
  become: true
  roles:
    - role: bootstrap_sshd

- name: Bootstrap ldap client
  hosts: ldap_client,!node_offline
  tags:
    - bootstrap-ldap
    - bootstrap-ldap-client
  become: true
  roles:
    - role: bootstrap_ldap_client

- name: Bootstrap ansible node
  hosts: ansible_controller,!node_offline
  tags:
    - bootstrap
    - bootstrap-admin
    - bootstrap-ansible
  become: true
  roles:
    - role: bootstrap_git
    - role: bootstrap_ansible
    - role: bootstrap_linux_locale

#- name: Bootstrap pip
#  hosts: os_linux,!node_offline
#  tags:
#    - bootstrap-pip
#  become: true
#  roles:
#    - role: bootstrap_pip

## setup step-ca pki, create CA certs and install CA certs
- name: Configure Step-ca cli for step clients
  hosts: step_ca_client,!node_offline
  become: true
  tags:
    - bootstrap-stepca
    - bootstrap-stepca-cli
  #    - bootstrap-caroot
  roles:
    - role: bootstrap_stepca

## setup pki, create CA certs and install CA certs
##
## ref: https://www.tikalk.com/posts/2016/10/30/Running-Your-Own-Ansible-Driven-CA/
## ref: https://github.com/shelleg/ansible-role-ca/
- name: Setup ca_root and cacerts
  hosts: ca_keystore,!node_offline
  gather_facts: false
  tags:
    - bootstrap-certs
    - bootstrap-cacerts
    - bootstrap-signing-certs
    - bootstrap-keyring
    - bootstrap-pki
    - renew-expired-cacerts
    - caroot
    - caroot-create
    - ca-keyring
    - casigners-create
  become: true
  roles:
    - role: bootstrap_cfssl
    - role: bootstrap_certs
      tags: [cacerts-create]

- name: Deploy CA certs to cert_node
  hosts: os_linux,!node_offline
  gather_facts: false
  tags:
    - bootstrap-node
#    - bootstrap-docker-stack
    - cacerts
    - cacerts-distribute
    - cacerts-deploy
    - cacerts-update
    - deploy-cacerts
  become: true
  roles:
    - role: deploy_cacerts

- name: Harden linux OS
  hosts: os_linux,!node_offline
  tags:
    - harden-linux-os
    - harden-linux
  become: true
  roles:
    - role: harden_os_linux

## possibly need to install docker_service dependencies first
## ref: https://github.com/avinetworks/ansible-role-docker
## ref: https://github.com/lj020326/ansible-docker_service-dep/blob/main/tasks/main.yml
## ref: https://github.com/ansible/ansible/issues/29510
## ref: https://github.com/nickjj/ansible-docker
- name: Bootstrap docker nodes
  hosts: docker,!node_offline
  tags:
    - bootstrap
    - docker
    - bootstrap-linux
    - bootstrap-linux-docker
    - bootstrap-docker
    - bootstrap-registry
  become: true
  roles:
    - role: bootstrap_docker

- name: Bootstrap docker swarm nodes
  hosts: docker,!node_offline
  tags:
    - bootstrap-docker-swarm
    - docker-swarm
  become: true
  roles:
    - role: bootstrap_docker
      bootstrap_docker__actions: [setup-swarm]

- name: Deploy docker registry certs
  hosts: docker,!node_offline
  tags:
    - deploy-docker-registry-certs
    - deploy-registry-certs
    - deploy-cacerts
    - cacerts-update
  become: true
  roles:
    - role: bootstrap_docker_registry
      bootstrap_docker_registry__actions: [deploy-certs]

###########################
# docker_registry install #
###########################

- name: Create, tag and push docker images (ldap, jenkins, etc) to registry
  hosts: docker_image_builder,!node_offline
  tags:
    - bootstrap
    - bootstrap-registry
    - bootstrap-docker-images
    - bootstrap-admin-node
    - docker-build-images
    - build-docker-images
  become: true
  roles:
    - role: bootstrap_git
    - role: docker_image_builder

##############
## bootstrap docker stack nodes
##############
- name: Bootstrap docker stack node
  hosts: docker_stack,!node_offline
  tags:
    - bootstrap-docker-stack
    - docker-stack
  become: true
#  vars:
#    ansible_python_interpreter: "{{ ansible_virtualenv_docker_python_interpreter }}"
  roles:
    - role: bootstrap_docker_stack

- name: Bootstrap docker control plane node
  hosts: docker_stack_control,!node_offline
  tags:
    - bootstrap-control-node
    - docker-control-node
  become: true
  #  vars:
  #    ansible_python_interpreter: "{{ ansible_virtualenv_docker_python_interpreter }}"
  roles:
    - role: bootstrap_docker_stack

- name: "Bootstrap docker admin node : mail, nfs, docker (traefik, portainer, watchdog, ldap, etc)"
  hosts: docker_stack_admin,!node_offline
  tags:
    - bootstrap-admin-node
    - docker-admin-node
  become: true
  #  vars:
  #    ansible_python_interpreter: "{{ ansible_virtualenv_docker_python_interpreter }}"
  roles:
    - role: bootstrap_docker_stack

- name: Bootstrap docker media node
  hosts: docker_stack_media,!node_offline
  tags:
    - bootstrap-media-node
    - docker-media-node
  become: true
  #  vars:
  #    ansible_python_interpreter: "{{ ansible_virtualenv_docker_python_interpreter }}"
  roles:
    - role: bootstrap_docker_stack

- name: Bootstrap docker ml node
  hosts: docker_stack_ml,!node_offline
  tags:
    - bootstrap-ml-node
    - docker-ml-node
  become: true
  #  vars:
  #    ansible_python_interpreter: "{{ ansible_virtualenv_docker_python_interpreter }}"
  roles:
    - role: bootstrap_docker_stack

## bootstrap_plexupdate
## ref: https://github.com/lj020326/plexupdate
- name: Bootstrap plexupdate
  hosts: plex,!node_offline
  become: true
  tags:
    - bootstrap-plexupdate
  roles:
    - role: bootstrap_plexupdate

## ref: https://github.com/lae/ansible-role-proxmox
- name: Deploy ProxMox Cluster
  hosts: proxmox,!node_offline
  tags:
    - bootstrap-proxmox
  become: true
  roles:
    - role: bootstrap_proxmox
      pve_group: proxmox
#      pve_reboot_on_kernel_update: true

- name: Fetch OS images
  hosts: ansible_localhost
  gather_facts: false
  tags:
    - fetch-os-images
  roles:
    - role: fetch_os_images

- name: Bootstrap VMware ESXi servers
  hosts: vmware_physical_esx_host,!node_offline
  tags:
    - bootstrap-vmware-esxi
    - bootstrap-vcenter
    - deploy-vsphere-dc
    - deploy-vcenter
    - vsphere-deploy-dc
    - ping-exclude
  gather_facts: false
  roles:
    - role: bootstrap_vmware_esxi
    - role: bootstrap_vmware_esxi_hostconf

########################
## VSPHERE DC Setup role
########################
- name: Deploy VSphere Datacenter
  hosts: vsphere_control_node
  tags:
    - bootstrap-vsphere
    - deploy-vsphere-dc
    - vsphere-deploy-dc
    - ping-exclude
  become: true
  roles:
    - role: bootstrap_vsphere_dc

- name: VMware Upgrade ESXi servers
  hosts: vmware_physical_esx_host,!node_offline
  tags:
    - vmware-upgrade-esxi
  gather_facts: false
  roles:
    - role: vmware_upgrade_esxi

- name: VMware Remount VM Datastores
#  hosts: ansible_localhost
  hosts: vmware_control_node
  become: true
  tags:
    - vmware-remount-datastores
  roles:
    #    - role: vmware_remount_datastores
    - role: bootstrap_vmware_datastores
      vars:
        bootstrap_vmware_datastores__unmount_datastores_first: true

- name: VMware Mount VM Datastores
#  hosts: ansible_localhost
  hosts: vmware_control_node
  become: true
  tags:
    - bootstrap-vmware-mounts
    - vmware-mount-datastores
  roles:
    - role: bootstrap_vmware_datastores

- name: Bootstrap Openstack
  hosts: openstack_kolla_node,!node_offline
  tags:
    - bootstrap
    - bootstrap-openstack
  become: true
  roles:
    - name: Configure openstack deploy node
      role: bootstrap_openstack

- name: Bootstrap k8s cluster
  hosts: k8s_cluster,!node_offline
  tags:
    - bootstrap
    - bootstrap-k8s
  become: true
  roles:
    - role: bootstrap_linux_firewalld
      firewalld_action: configure
      tags: [firewall-config-k8s]

## must first run the kolla-ansible (bootstrap-servers|prechecks|deploy)
- name: Bootstrap Openstack Cloud
  hosts: openstack_kolla_node,!node_offline
  tags:
    - bootstrap-openstack-cloud
    - openstack-cloud
  become: true
  vars:
    ansible_python_interpreter: "{{ ansible_openstack_python_interpreter }}"
  roles:
    - name: Configure openstack client
      tags:
        - bootstrap-openstack-osclient
        - openstack-osclient
      role: bootstrap_osclient
      vars:
        openstack_cloud_name: "{{ openstack_admin_cloud_name | default(omit) }}"

    - name: Configure openstack environment
      tags:
        - bootstrap-openstack-cloud
      role: bootstrap_openstack_cloud

## bootstrap_fog
## ref: https://github.com/ceph/ceph-cm-ansible/tree/main/roles/fog-server
- name: Bootstrap FOG server
  hosts: fog_server,!node_offline
  become: true
  tags:
    - bootstrap-fog
  roles:
    - role: bootstrap_fog
#  vars_prompt:
#    - name: "fog_force"
#      prompt: "\nWARNING: It is not safe to run this role on a running FOG server that\nhas or may have scheduled tasks.\nDo you want to forcefully install/update/restart FOG? (yes|no)"
#      default: "no"
#      private: false

- name: Setup nginx
  hosts: nginx_service,!node_offline
  tags:
    - nginx-service
  become: true
  roles:
    - role: bootstrap_nginx_service

- name: Bootstrap iDRAC Automation
  hosts: dell_idrac_hosts,!node_offline
  #  connection: local
  tags:
    - bootstrap-dell-idrac-hosts
    - bootstrap-idrac-hosts
    - bootstrap-idrac
    - dell-idrac-hosts
  user: root
  become: true
  gather_facts: false
  roles:
    - role: bootstrap_dell_racadm_host

# ref: https://dell.github.io/dellemc-openmanage-ansible-modules/GUID-EA8B2754-D62E-4D2C-8951-636D49B0CAA5.html
- name: Get iDRAC LC Ready Status
  hosts: dell_idrac_hosts,!node_offline
  tags:
    - dell-idrac-get-host-info
  connection: local
  gather_facts: false
  tasks:
    - name: Get hardware inventory
      #      dellemc_get_system_inventory:
      dellemc.openmanage.idrac_system_info:
        idrac_ip: "{{ idrac_ip }}"
        idrac_port: "443"
        idrac_user: "{{ idrac_user }}"
        idrac_password: "{{ idrac_password }}"

    ## ref: https://github.com/dell/dellemc-openmanage-ansible-modules/blob/collections/playbooks/idrac/idrac_lifecycle_controller_status_info.yml
    - name: Check LC Ready Status
      #      dellemc_get_lcstatus:
      dellemc.openmanage.idrac_lifecycle_controller_status_info:
        idrac_ip: "{{ idrac_ip }}"
        idrac_port: "443"
        idrac_user: "{{ idrac_user }}"
        idrac_password: "{{ idrac_password }}"

## ref: https://github.com/lj020326/ansible-playbooks/blob/main/set_ntp_values.yml
- name: Change iDRAC NTP Attributes
  hosts: dell_idrac_hosts,!node_offline
  tags:
    - dell-idrac-config-ntp
  connection: local
  gather_facts: false
  vars:
    #    ntpserver1: "1.jp.pool.ntp.org"
    #    ntpserver1: "192.168.0.1"
    ntpserver1: "{{ gateway_ipv4_subnet_1_2 }}.0.1"
  tasks:
    - name: Enable NTP and set NTP server and Time zone attributes in iDRAC
      community.general.idrac_redfish_config:
        category: Manager
        command: SetManagerAttributes
        resource_id: iDRAC.Embedded.1
        manager_attributes:
          NTPConfigGroup.1.NTPEnable: Enabled
          NTPConfigGroup.1.NTP1: "{{ ntpserver1 }}"
        baseuri: "{{ idrac_ip }}"
        username: "{{ idrac_user }}"
        password: "{{ idrac_password }}"

##
## Tower config
##

## ref: https://www.ansible.com/blog/introducing-the-awx-collection
- name: Bootstrap Tower Resource configs
  hosts: tower_control_node
  tags:
    - bootstrap-tower
    - bootstrap-tower-resources
  gather_facts: false
  environment:
    CONTROLLER_VERIFY_SSL: "false"
  roles:
    - role: bootstrap_tower_resources

## ref: https://www.ansible.com/blog/introducing-the-awx-collection
- name: Remove Tower Modules
  hosts: tower_control_node
  tags:
    - remove-tower-resources
  gather_facts: false
  environment:
    CONTROLLER_VERIFY_SSL: "false"
  roles:
    - role: bootstrap_tower_resources
      vars:
        tower_resource_state: absent

- name: Export Tower Objects
  hosts: tower_control_node
  tags:
    - export-tower-resources
  gather_facts: false
  tasks:
    - name: Export all resources
      awx.awx.export:
        all: true
#        teams: "TEST - Test Team 1"
